* preface
:PROPERTIES:
:VISIBILITY: folded
:END:

natural4> test (suite: natural4-test, args: --match "/Parser tests/PDPA/pdpadbno-7/")

* Tokens
§§ ( "Notify Individuals" ) IF
    (
        ( "it is" ( "an NDB" ) )
    ) UNLESS ( ( "you are a Public Agency" ) ) PARTY ( "You" ) MUST
    (
        ( BEFORE
            ( 3 ( "days" ) )
        )
    ) DO
    (
        ( "NOTIFY" ( "each of the Notifiable Individuals" ) "in" ( "any manner that is reasonable in the circumstances" ) "with" ( "a message obeying a certain format" ) )
    ) WHERE
    ( "the Notifiable Individuals" MEANS
        ( "the set of individuals affected by the NDB" LESS
            ( "the individuals who are deemed" ( "Unlikely" ) ) LESS
            ( "the individuals on" ( "the PDPC Exclusion List" ) ) LESS
            ( "the individuals on" ( "the LEA Exclusion List" ) )
        )
    )
* main
:PROPERTIES:
:VISIBILITY: children
:END:

** / pRule                                                                                                             :1_1:RuleMarker:
*** / pRegRule                                                                                                        :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Notify Individuals" Expecting: (                                :1_2:Other "Noti:
****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* / |.| manyLike                                                                                              :1_2:Other "Noti:
******** / someSL                                                                                                  :1_2:Other "Noti:
someSL> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
someSL> MATCH (COK): "Notify Individuals"
someSL> VALUE: ((["Notify Individuals"],0),[])

******** \ someSL has returned (["Notify Individuals"],0)                                                           :2_2:UnDeeper:
|.| manyLike> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|.| manyLike> MATCH (COK): "Notify Individuals"
|.| manyLike> VALUE: ((["Notify Individuals"],0),[])

******* \ |.| manyLike has returned (["Notify Individuals"],0)                                                       :2_2:UnDeeper:
******* > |>>/base got "Notify Individuals"                                                                          :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

****** \ |>>/base has returned ("Notify Individuals",0)                                                               :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

***** \ |>>/recurse has returned ("Notify Individuals",1)                                                              :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:If:
upToNUndeepers/done> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:If:
upToNUndeepers/undeeper> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pRegRuleSugary                                                                                                :2_1:If:
***** / someDeep                                                                                                    :2_1:If:
****** / someDeep first part calls base directly                                                                   :2_1:If:
someDeep first part calls base directly> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someDeep first part calls base directly> MATCH (EERR): <EMPTY>
someDeep first part calls base directly> ERROR:
someDeep first part calls base directly> offset=4:
someDeep first part calls base directly> unexpected IF
someDeep first part calls base directly> expecting Other text

****** \ !Unconsumed Error: someDeep first part calls base directly: Unexpected IF Expecting: Other text           :2_1:If:
someDeep> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someDeep> MATCH (EERR): <EMPTY>
someDeep> ERROR:
someDeep> offset=4:
someDeep> unexpected IF
someDeep> expecting Other text

***** \ !Unconsumed Error: someDeep: Unexpected IF Expecting: Other text                                            :2_1:If:
pRegRuleSugary> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRegRuleSugary> MATCH (EERR): <EMPTY>
pRegRuleSugary> ERROR:
pRegRuleSugary> offset=4:
pRegRuleSugary> unexpected IF
pRegRuleSugary> expecting Other text

**** \ !Unconsumed Error: pRegRuleSugary: Unexpected IF Expecting: Other text                                        :2_1:If:
**** / pRegRuleNormal                                                                                                :2_1:If:
***** / permutationsReg                                                                                             :2_1:If:
****** / regulative permutation with deontic-temporal                                                              :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected IF
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected IF Expecting: WHERE                                                :2_1:If:
******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected IF Expecting: HAVING                                               :2_1:If:
preambleParamText:[Having]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected IF
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected IF Expecting: HAVING                          :2_1:If:
******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected IF Expecting: GIVEN                                                :2_1:If:
preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected IF Expecting: GIVEN                            :2_1:If:
******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected IF Expecting: UPON                                                 :2_1:If:
preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected IF Expecting: UPON                              :2_1:If:
******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected IF
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected IF Expecting: UNLESS                        :2_1:If:
******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / termIndent p                                                                                     :2_2:GoDeeper:
************ / term p/1a:label ends directly above next line                                                  :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************ / term p/1b:label ends to the left of line below, with EOL                                       :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************ / term p/1c:label ends to the right of line below                                                :2_2:GoDeeper:
************* > |<|                                                                                          :2_2:GoDeeper:
************* > |<* starting                                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented-GoDeeper                                                                      :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                  :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / ppp inner                                                                                :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / termIndent p                                                                         :2_3:GoDeeper:
******************* / term p/1a:label ends directly above next line                                      :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / someSL                                                                         :2_3:GoDeeper:
********************** / pNumAsText                                                                   :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************* / term p/1b:label ends to the left of line below, with EOL                           :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / someSL                                                                         :2_3:GoDeeper:
********************** / pNumAsText                                                                   :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************* / term p/1c:label ends to the right of line below                                    :2_3:GoDeeper:
******************** > |<|                                                                              :2_3:GoDeeper:
******************** > |<* starting                                                                     :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / someSL                                                                         :2_3:GoDeeper:
********************** / pNumAsText                                                                   :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented-GoDeeper                                                          :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented-GoDeeper has returned GoDeeper                                     :2_3:Other "it i:
********************** / manyIndentation/leaf?                                                         :2_3:Other "it i:
*********************** / ppp inner                                                                   :2_3:Other "it i:
************************ / expression                                                                :2_3:Other "it i:
************************* / termIndent p                                                            :2_3:Other "it i:
************************** / term p/1a:label ends directly above next line                         :2_3:Other "it i:
*************************** / $*|                                                                 :2_3:Other "it i:
**************************** / someSL                                                            :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

**************************** \ someSL has returned (["it is","an NDB"],1)                       :3_2:UnDeeper:
**************************** / pNumAsText                                                       :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (CERR): "it is" ( "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or other text or number

*************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1a:label ends directly above next line> MATCH (CERR): "it is" ( "an NDB"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL              :2_3:Other "it i:
*************************** / $*|                                                                 :2_3:Other "it i:
**************************** / someSL                                                            :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

**************************** \ someSL has returned (["it is","an NDB"],1)                       :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

*************************** \ $*| has returned (["it is","an NDB"],1)                            :3_2:UnDeeper:
*************************** / matching EOL                                                       :3_2:UnDeeper:
matching EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected )
matching EOL> expecting EOL

*************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL       :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "it is" ( "an NDB"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                       :2_3:Other "it i:
*************************** > |<|                                                                 :2_3:Other "it i:
*************************** > |<* starting                                                        :2_3:Other "it i:
*************************** / $*|                                                                 :2_3:Other "it i:
**************************** / someSL                                                            :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

**************************** \ someSL has returned (["it is","an NDB"],1)                       :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

*************************** \ $*| has returned (["it is","an NDB"],1)                            :3_2:UnDeeper:
*************************** / |<*/parent                                                         :3_2:UnDeeper:
**************************** > |<*/recurse                                                      :3_2:UnDeeper:
**************************** / ppp inner                                                     :3_1:Unless:
***************************** / expression                                                  :3_1:Unless:
****************************** / termIndent p                                              :3_1:Unless:
******************************* / term p/1a:label ends directly above next line           :3_1:Unless:
******************************** / $*|                                                   :3_1:Unless:
********************************* / someSL                                              :3_1:Unless:
********************************** / pNumAsText                                        :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1a:label ends directly above next line> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=13:
term p/1a:label ends directly above next line> unexpected UNLESS
term p/1a:label ends directly above next line> expecting other text or number

******************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
******************************* / term p/1b:label ends to the left of line below, with EOL :3_1:Unless:
******************************** / $*|                                                   :3_1:Unless:
********************************* / someSL                                              :3_1:Unless:
********************************** / pNumAsText                                        :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1b:label ends to the left of line below, with EOL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=13:
term p/1b:label ends to the left of line below, with EOL> unexpected UNLESS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
******************************* / term p/1c:label ends to the right of line below         :3_1:Unless:
******************************** > |<|                                                   :3_1:Unless:
******************************** > |<* starting                                          :3_1:Unless:
******************************** / $*|                                                   :3_1:Unless:
********************************* / someSL                                              :3_1:Unless:
********************************** / pNumAsText                                        :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1c:label ends to the right of line below> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting other text or number

******************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
******************************* / term p/notLabelTerm                                     :3_1:Unless:
******************************** / term p/2:someIndentation expr p                       :3_1:Unless:
********************************* / someIndentation                                     :3_1:Unless:
********************************** / myindented-GoDeeper                               :3_1:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: ( :3_1:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

********************************* \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: ( :3_1:Unless:
term p/2:someIndentation expr p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected UNLESS
term p/2:someIndentation expr p> expecting (

******************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected UNLESS Expecting: ( :3_1:Unless:
******************************** / term p/3:plain p                                      :3_1:Unless:
********************************* / pRelPred                                            :3_1:Unless:
********************************** / slRelPred                                         :3_1:Unless:
*********************************** / nested simpleHorn                               :3_1:Unless:
************************************ > |^|                                           :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slMultiTerm                                 :3_1:Unless:
************************************** / someSL                                    :3_1:Unless:
*************************************** / pNumAsText                              :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

*********************************** \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
*********************************** / RPConstraint                                    :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slMultiTerm                                 :3_1:Unless:
************************************** / someSL                                    :3_1:Unless:
*************************************** / pNumAsText                              :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

*********************************** \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
*********************************** / RPBoolStructR                                   :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slMultiTerm                                 :3_1:Unless:
************************************** / someSL                                    :3_1:Unless:
*************************************** / pNumAsText                              :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

*********************************** \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
*********************************** / RPMT                                            :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slAKA                                       :3_1:Unless:
************************************** / $*|                                       :3_1:Unless:
*************************************** / slAKA base                              :3_1:Unless:
**************************************** / slMultiTerm                           :3_1:Unless:
***************************************** / someSL                              :3_1:Unless:
****************************************** / pNumAsText                        :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

************************************* \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

*********************************** \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

********************************** \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

********************************* \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/3:plain p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected UNLESS
term p/3:plain p> expecting other text or number

******************************** \ !Unconsumed Error: term p/3:plain p: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/notLabelTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=13:
term p/notLabelTerm> unexpected UNLESS
term p/notLabelTerm> expecting ( or term

******************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected UNLESS Expecting: ( term :3_1:Unless:
termIndent p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=13:
termIndent p> unexpected UNLESS
termIndent p> expecting (, other text or number, or term

****************************** \ !Unconsumed Error: termIndent p: Unexpected UNLESS Expecting: ( other text or number term :3_1:Unless:
expression> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=13:
expression> unexpected UNLESS
expression> expecting expression

***************************** \ !Unconsumed Error: expression: Unexpected UNLESS Expecting: expression :3_1:Unless:
ppp inner> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> unexpected UNLESS
ppp inner> expecting expression

**************************** \ !Unconsumed Error: ppp inner: Unexpected UNLESS Expecting: expression :3_1:Unless:
**************************** / withPrePost                                                   :3_1:Unless:
***************************** > |<* starting                                                :3_1:Unless:
***************************** / $*|                                                         :3_1:Unless:
****************************** / pre part                                                  :3_1:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
withPrePost> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=13:
withPrePost> unexpected UNLESS
withPrePost> expecting ( or Other text

**************************** \ !Unconsumed Error: withPrePost: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
**************************** / $*|                                                           :3_1:Unless:
***************************** / pre part                                                    :3_1:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

***************************** \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

**************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
**************************** / |<*/base                                                         :3_2:UnDeeper:
***************************** / ppp inner                                                      :3_2:UnDeeper:
****************************** / expression                                                   :3_2:UnDeeper:
******************************* / termIndent p                                               :3_2:UnDeeper:
******************************** / term p/1a:label ends directly above next line            :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / someSL                                               :3_2:UnDeeper:
*********************************** / pNumAsText                                         :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
******************************** / term p/1b:label ends to the left of line below, with EOL :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / someSL                                               :3_2:UnDeeper:
*********************************** / pNumAsText                                         :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
******************************** / term p/1c:label ends to the right of line below          :3_2:UnDeeper:
********************************* > |<|                                                    :3_2:UnDeeper:
********************************* > |<* starting                                           :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / someSL                                               :3_2:UnDeeper:
*********************************** / pNumAsText                                         :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
******************************** / term p/notLabelTerm                                      :3_2:UnDeeper:
********************************* / term p/2:someIndentation expr p                        :3_2:UnDeeper:
********************************** / someIndentation                                      :3_2:UnDeeper:
*********************************** / myindented-GoDeeper                                :3_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=10:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected )
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
********************************* / term p/3:plain p                                       :3_2:UnDeeper:
********************************** / pRelPred                                             :3_2:UnDeeper:
*********************************** / slRelPred                                          :3_2:UnDeeper:
************************************ / nested simpleHorn                                :3_2:UnDeeper:
************************************* > |^|                                            :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slMultiTerm                                  :3_2:UnDeeper:
*************************************** / someSL                                     :3_2:UnDeeper:
**************************************** / pNumAsText                               :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************************ / RPConstraint                                     :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slMultiTerm                                  :3_2:UnDeeper:
*************************************** / someSL                                     :3_2:UnDeeper:
**************************************** / pNumAsText                               :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************************ / RPBoolStructR                                    :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slMultiTerm                                  :3_2:UnDeeper:
*************************************** / someSL                                     :3_2:UnDeeper:
**************************************** / pNumAsText                               :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************************ / RPMT                                             :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slAKA                                        :3_2:UnDeeper:
*************************************** / $*|                                        :3_2:UnDeeper:
**************************************** / slAKA base                               :3_2:UnDeeper:
***************************************** / slMultiTerm                            :3_2:UnDeeper:
****************************************** / someSL                               :3_2:UnDeeper:
******************************************* / pNumAsText                         :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected )
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected )
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected )
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected )
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected )
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=10:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=10:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=10:
expression> unexpected )
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :3_2:UnDeeper:
ppp inner> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=10:
ppp inner> unexpected )
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :3_2:UnDeeper:
***************************** / withPrePost                                                    :3_2:UnDeeper:
****************************** > |<* starting                                                 :3_2:UnDeeper:
****************************** / $*|                                                          :3_2:UnDeeper:
******************************* / pre part                                                   :3_2:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=10:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
withPrePost> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=10:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
***************************** / $*|                                                            :3_2:UnDeeper:
****************************** / pre part                                                     :3_2:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=10:
pre part> unexpected )
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text   :3_2:UnDeeper:
|<*/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=10:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

**************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=13:
|<*/parent> unexpected UNLESS
|<*/parent> expecting (, ), Other text, or expression

*************************** \ !Unconsumed Error: |<*/parent: Unexpected UNLESS Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "it is" ( "an NDB"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
************************** / term p/notLabelTerm                                                   :2_3:Other "it i:
*************************** / term p/2:someIndentation expr p                                     :2_3:Other "it i:
**************************** / someIndentation                                                   :2_3:Other "it i:
***************************** / myindented-GoDeeper                                             :2_3:Other "it i:
myindented-GoDeeper> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "it is"
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "it is" Expecting: ( :2_3:Other "it i:
someIndentation> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "it is"
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected "it is" Expecting: ( :2_3:Other "it i:
term p/2:someIndentation expr p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "it is"
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "it is" Expecting: ( :2_3:Other "it i:
*************************** / term p/3:plain p                                                    :2_3:Other "it i:
**************************** / pRelPred                                                          :2_3:Other "it i:
***************************** / slRelPred                                                       :2_3:Other "it i:
****************************** / nested simpleHorn                                             :2_3:Other "it i:
******************************* > |^|                                                         :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slMultiTerm                                               :2_3:Other "it i:
********************************* / someSL                                                  :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

********************************* \ someSL has returned (["it is","an NDB"],1)             :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slMultiTerm has returned (["it is","an NDB"],1)          :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
******************************* / |^| deeps                                                  :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************* \ |^| deeps has returned ([(),(),()],-3)                  :3_1:Unless:
nested simpleHorn> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
nested simpleHorn> MATCH (CERR): "it is" ( "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

****************************** \ !Consumed Error: nested simpleHorn: Unexpected UNLESS Expecting: MEANS ) :3_1:Unless:
****************************** / RPConstraint                                                  :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slMultiTerm                                               :2_3:Other "it i:
********************************* / someSL                                                  :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

********************************* \ someSL has returned (["it is","an NDB"],1)             :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slMultiTerm has returned (["it is","an NDB"],1)          :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
******************************* / |>| calling $>>                                            :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
******************************** / |>>/base                                                 :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPConstraint> MATCH (CERR): "it is" ( "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
****************************** / RPBoolStructR                                                 :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slMultiTerm                                               :2_3:Other "it i:
********************************* / someSL                                                  :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

********************************* \ someSL has returned (["it is","an NDB"],1)             :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slMultiTerm has returned (["it is","an NDB"],1)          :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
******************************* / |>| calling $>>                                            :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
******************************** / |>>/base                                                 :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPBoolStructR> MATCH (CERR): "it is" ( "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
****************************** / RPMT                                                          :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slAKA                                                     :2_3:Other "it i:
********************************* / $*|                                                     :2_3:Other "it i:
********************************** / slAKA base                                            :2_3:Other "it i:
*********************************** / slMultiTerm                                         :2_3:Other "it i:
************************************ / someSL                                            :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************************************ \ someSL has returned (["it is","an NDB"],1)       :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ slMultiTerm has returned (["it is","an NDB"],1)    :3_2:UnDeeper:
slAKA base> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA base> MATCH (COK): "it is" ( "an NDB"
slAKA base> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slAKA base has returned (["it is","an NDB"],1)       :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / slAKA optional akapart                               :3_2:UnDeeper:
*********************************** / |?| optional something                             :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
************************************ / |>>/base                                         :3_2:UnDeeper:
************************************* / PAKA/akapart                                   :3_2:UnDeeper:
************************************** / $>|                                          :3_2:UnDeeper:
*************************************** / Aka Token                                  :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :3_2:UnDeeper:
PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)    :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)      :3_2:UnDeeper:
********************************** > |>>/base got Nothing                                 :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / slAKA optional typically                             :3_2:UnDeeper:
*********************************** / |?| optional something                             :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
************************************ / |>>/base                                         :3_2:UnDeeper:
************************************* / typically                                      :3_2:UnDeeper:
************************************** / $>|                                          :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

************************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)    :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)    :3_2:UnDeeper:
********************************** > |>>/base got Nothing                                 :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                      :3_2:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
********************************* > pAKA: entityalias = Nothing                            :3_2:UnDeeper:
slAKA> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA> MATCH (COK): "it is" ( "an NDB"
slAKA> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slAKA has returned (["it is","an NDB"],1)                :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
RPMT> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPMT> MATCH (COK): "it is" ( "an NDB"
RPMT> VALUE: ((RPMT ["it is","an NDB"],1),[])

****************************** \ RPMT has returned (RPMT ["it is","an NDB"],1)                :3_2:UnDeeper:
slRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slRelPred> MATCH (COK): "it is" ( "an NDB"
slRelPred> VALUE: ((RPMT ["it is","an NDB"],1),[])

***************************** \ slRelPred has returned (RPMT ["it is","an NDB"],1)             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                             :3_3:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                        :3_3:UnDeeper:
pRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
pRelPred> MATCH (COK): "it is" ( "an NDB" )
pRelPred> VALUE: (RPMT ["it is","an NDB"],[])

**************************** \ pRelPred has returned RPMT ["it is","an NDB"]                      :3_3:UnDeeper:
term p/3:plain p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/3:plain p> MATCH (COK): "it is" ( "an NDB" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])       :3_3:UnDeeper:
term p/notLabelTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/notLabelTerm> MATCH (COK): "it is" ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])      :3_3:UnDeeper:
termIndent p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
termIndent p> MATCH (COK): "it is" ( "an NDB" )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************* \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])               :3_3:UnDeeper:
************************* / binary(Or)                                                               :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                :3_3:UnDeeper:
************************* / binary(And)                                                              :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

************************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND              :3_3:UnDeeper:
************************* / binary(SetLess)                                                          :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS         :3_3:UnDeeper:
************************* / binary(SetPlus)                                                          :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS         :3_3:UnDeeper:
expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************ \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                   :3_3:UnDeeper:
ppp inner> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
ppp inner> MATCH (COK): "it is" ( "an NDB" )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********************** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                      :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])            :3_3:UnDeeper:
********************** / myindented-UnDeeper                                                            :3_3:UnDeeper:
myindented-UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented-UnDeeper has returned UnDeeper                                        :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                      :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])        :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                      :3_4:UnDeeper:
termIndent p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
termIndent p> MATCH (COK): ( "it is" ( "an NDB" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

****************** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_4:UnDeeper:
****************** / binary(Or)                                                                               :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                :3_4:UnDeeper:
****************** / binary(And)                                                                              :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

****************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                              :3_4:UnDeeper:
****************** / binary(SetLess)                                                                          :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                         :3_4:UnDeeper:
****************** / binary(SetPlus)                                                                          :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

****************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                         :3_4:UnDeeper:
expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

***************** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_4:UnDeeper:
ppp inner> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
ppp inner> MATCH (COK): ( "it is" ( "an NDB" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

**************** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                      :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
*************** / myindented-UnDeeper                                                                            :3_4:UnDeeper:
myindented-UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                               :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                             :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])               :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                             :3_1:Unless:
termIndent p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
termIndent p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                                      :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

*********** \ !Unconsumed Error: binary(Or): Unexpected UNLESS Expecting: OR                                  :3_1:Unless:
*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

*********** \ !Unconsumed Error: binary(And): Unexpected UNLESS Expecting: AND                                :3_1:Unless:
*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

*********** \ !Unconsumed Error: binary(SetLess): Unexpected UNLESS Expecting: LESS                           :3_1:Unless:
*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

*********** \ !Unconsumed Error: binary(SetPlus): Unexpected UNLESS Expecting: PLUS                           :3_1:Unless:
expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                          :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                             :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [When,If]> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected UNLESS
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected UNLESS Expecting: IF WHEN                  :3_1:Unless:
******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected UNLESS
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected UNLESS Expecting: WHERE                                            :3_1:Unless:
******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: HAVING                                           :3_1:Unless:
preambleParamText:[Having]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected UNLESS
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected UNLESS Expecting: HAVING                      :3_1:Unless:
******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: GIVEN                                            :3_1:Unless:
preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UNLESS Expecting: GIVEN                        :3_1:Unless:
******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: UPON                                             :3_1:Unless:
preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected UNLESS Expecting: UPON                          :3_1:Unless:
******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / termIndent p                                                                                     :3_2:GoDeeper:
************ / term p/1a:label ends directly above next line                                                  :3_2:GoDeeper:
************* / $*|                                                                                          :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :3_2:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :3_2:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :3_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************ / term p/1b:label ends to the left of line below, with EOL                                       :3_2:GoDeeper:
************* / $*|                                                                                          :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :3_2:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :3_2:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :3_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************ / term p/1c:label ends to the right of line below                                                :3_2:GoDeeper:
************* > |<|                                                                                          :3_2:GoDeeper:
************* > |<* starting                                                                                 :3_2:GoDeeper:
************* / $*|                                                                                          :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :3_2:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :3_2:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :3_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=14:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented-GoDeeper                                                                      :3_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                  :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / ppp inner                                                                                :3_3:GoDeeper:
***************** / expression                                                                             :3_3:GoDeeper:
****************** / termIndent p                                                                         :3_3:GoDeeper:
******************* / term p/1a:label ends directly above next line                                      :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :3_3:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :3_3:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=15:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************* / term p/1b:label ends to the left of line below, with EOL                           :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :3_3:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :3_3:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=15:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************* / term p/1c:label ends to the right of line below                                    :3_3:GoDeeper:
******************** > |<|                                                                              :3_3:GoDeeper:
******************** > |<* starting                                                                     :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :3_3:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :3_3:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented-GoDeeper                                                          :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented-GoDeeper has returned GoDeeper                                     :3_3:Other "you:
********************** / manyIndentation/leaf?                                                         :3_3:Other "you:
*********************** / ppp inner                                                                   :3_3:Other "you:
************************ / expression                                                                :3_3:Other "you:
************************* / termIndent p                                                            :3_3:Other "you:
************************** / term p/1a:label ends directly above next line                         :3_3:Other "you:
*************************** / $*|                                                                 :3_3:Other "you:
**************************** / someSL                                                            :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

**************************** \ someSL has returned (["you are a Public Agency"],0)              :4_2:UnDeeper:
**************************** / pNumAsText                                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (CERR): "you are a Public Agency"
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or other text or number

*************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/1a:label ends directly above next line> MATCH (CERR): "you are a Public Agency"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL              :3_3:Other "you:
*************************** / $*|                                                                 :3_3:Other "you:
**************************** / someSL                                                            :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

**************************** \ someSL has returned (["you are a Public Agency"],0)              :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

*************************** \ $*| has returned (["you are a Public Agency"],0)                   :4_2:UnDeeper:
*************************** / matching EOL                                                       :4_2:UnDeeper:
matching EOL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected )
matching EOL> expecting EOL

*************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL       :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "you are a Public Agency"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                       :3_3:Other "you:
*************************** > |<|                                                                 :3_3:Other "you:
*************************** > |<* starting                                                        :3_3:Other "you:
*************************** / $*|                                                                 :3_3:Other "you:
**************************** / someSL                                                            :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

**************************** \ someSL has returned (["you are a Public Agency"],0)              :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

*************************** \ $*| has returned (["you are a Public Agency"],0)                   :4_2:UnDeeper:
*************************** / |<*/parent                                                         :4_2:UnDeeper:
**************************** > |<*/recurse                                                      :4_2:UnDeeper:
**************************** / ppp inner                                                     :4_1:Party:
***************************** / expression                                                  :4_1:Party:
****************************** / termIndent p                                              :4_1:Party:
******************************* / term p/1a:label ends directly above next line           :4_1:Party:
******************************** / $*|                                                   :4_1:Party:
********************************* / someSL                                              :4_1:Party:
********************************** / pNumAsText                                        :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/1a:label ends directly above next line> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected PARTY
term p/1a:label ends directly above next line> expecting other text or number

******************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected PARTY Expecting: other text or number :4_1:Party:
******************************* / term p/1b:label ends to the left of line below, with EOL :4_1:Party:
******************************** / $*|                                                   :4_1:Party:
********************************* / someSL                                              :4_1:Party:
********************************** / pNumAsText                                        :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/1b:label ends to the left of line below, with EOL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected PARTY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected PARTY Expecting: other text or number :4_1:Party:
******************************* / term p/1c:label ends to the right of line below         :4_1:Party:
******************************** > |<|                                                   :4_1:Party:
******************************** > |<* starting                                          :4_1:Party:
******************************** / $*|                                                   :4_1:Party:
********************************* / someSL                                              :4_1:Party:
********************************** / pNumAsText                                        :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/1c:label ends to the right of line below> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected PARTY
term p/1c:label ends to the right of line below> expecting other text or number

******************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected PARTY Expecting: other text or number :4_1:Party:
******************************* / term p/notLabelTerm                                     :4_1:Party:
******************************** / term p/2:someIndentation expr p                       :4_1:Party:
********************************* / someIndentation                                     :4_1:Party:
********************************** / myindented-GoDeeper                               :4_1:Party:
myindented-GoDeeper> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=19:
myindented-GoDeeper> unexpected PARTY
myindented-GoDeeper> expecting (

********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected PARTY Expecting: ( :4_1:Party:
someIndentation> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=19:
someIndentation> unexpected PARTY
someIndentation> expecting (

********************************* \ !Unconsumed Error: someIndentation: Unexpected PARTY Expecting: ( :4_1:Party:
term p/2:someIndentation expr p> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=19:
term p/2:someIndentation expr p> unexpected PARTY
term p/2:someIndentation expr p> expecting (

******************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected PARTY Expecting: ( :4_1:Party:
******************************** / term p/3:plain p                                      :4_1:Party:
********************************* / pRelPred                                            :4_1:Party:
********************************** / slRelPred                                         :4_1:Party:
*********************************** / nested simpleHorn                               :4_1:Party:
************************************ > |^|                                           :4_1:Party:
************************************ / $*|                                           :4_1:Party:
************************************* / slMultiTerm                                 :4_1:Party:
************************************** / someSL                                    :4_1:Party:
*************************************** / pNumAsText                              :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
slMultiTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected PARTY
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
nested simpleHorn> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected PARTY
nested simpleHorn> expecting other text or number

*********************************** \ !Unconsumed Error: nested simpleHorn: Unexpected PARTY Expecting: other text or number :4_1:Party:
*********************************** / RPConstraint                                    :4_1:Party:
************************************ / $*|                                           :4_1:Party:
************************************* / slMultiTerm                                 :4_1:Party:
************************************** / someSL                                    :4_1:Party:
*************************************** / pNumAsText                              :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
slMultiTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected PARTY
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
RPConstraint> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=19:
RPConstraint> unexpected PARTY
RPConstraint> expecting other text or number

*********************************** \ !Unconsumed Error: RPConstraint: Unexpected PARTY Expecting: other text or number :4_1:Party:
*********************************** / RPBoolStructR                                   :4_1:Party:
************************************ / $*|                                           :4_1:Party:
************************************* / slMultiTerm                                 :4_1:Party:
************************************** / someSL                                    :4_1:Party:
*************************************** / pNumAsText                              :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
slMultiTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected PARTY
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
RPBoolStructR> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=19:
RPBoolStructR> unexpected PARTY
RPBoolStructR> expecting other text or number

*********************************** \ !Unconsumed Error: RPBoolStructR: Unexpected PARTY Expecting: other text or number :4_1:Party:
*********************************** / RPMT                                            :4_1:Party:
************************************ / $*|                                           :4_1:Party:
************************************* / slAKA                                       :4_1:Party:
************************************** / $*|                                       :4_1:Party:
*************************************** / slAKA base                              :4_1:Party:
**************************************** / slMultiTerm                           :4_1:Party:
***************************************** / someSL                              :4_1:Party:
****************************************** / pNumAsText                        :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
slMultiTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected PARTY
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected PARTY Expecting: other text or number :4_1:Party:
slAKA base> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=19:
slAKA base> unexpected PARTY
slAKA base> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA base: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
slAKA> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=19:
slAKA> unexpected PARTY
slAKA> expecting other text or number

************************************* \ !Unconsumed Error: slAKA: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
RPMT> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=19:
RPMT> unexpected PARTY
RPMT> expecting other text or number

*********************************** \ !Unconsumed Error: RPMT: Unexpected PARTY Expecting: other text or number :4_1:Party:
slRelPred> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=19:
slRelPred> unexpected PARTY
slRelPred> expecting other text or number

********************************** \ !Unconsumed Error: slRelPred: Unexpected PARTY Expecting: other text or number :4_1:Party:
pRelPred> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=19:
pRelPred> unexpected PARTY
pRelPred> expecting other text or number

********************************* \ !Unconsumed Error: pRelPred: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/3:plain p> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=19:
term p/3:plain p> unexpected PARTY
term p/3:plain p> expecting other text or number

******************************** \ !Unconsumed Error: term p/3:plain p: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/notLabelTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=19:
term p/notLabelTerm> unexpected PARTY
term p/notLabelTerm> expecting ( or term

******************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected PARTY Expecting: ( term :4_1:Party:
termIndent p> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=19:
termIndent p> unexpected PARTY
termIndent p> expecting (, other text or number, or term

****************************** \ !Unconsumed Error: termIndent p: Unexpected PARTY Expecting: ( other text or number term :4_1:Party:
expression> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=19:
expression> unexpected PARTY
expression> expecting expression

***************************** \ !Unconsumed Error: expression: Unexpected PARTY Expecting: expression :4_1:Party:
ppp inner> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=19:
ppp inner> unexpected PARTY
ppp inner> expecting expression

**************************** \ !Unconsumed Error: ppp inner: Unexpected PARTY Expecting: expression :4_1:Party:
**************************** / withPrePost                                                   :4_1:Party:
***************************** > |<* starting                                                :4_1:Party:
***************************** / $*|                                                         :4_1:Party:
****************************** / pre part                                                  :4_1:Party:
pre part> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=19:
pre part> unexpected PARTY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected PARTY Expecting: ( Other text :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: ( Other text :4_1:Party:
withPrePost> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=19:
withPrePost> unexpected PARTY
withPrePost> expecting ( or Other text

**************************** \ !Unconsumed Error: withPrePost: Unexpected PARTY Expecting: ( Other text :4_1:Party:
**************************** / $*|                                                           :4_1:Party:
***************************** / pre part                                                    :4_1:Party:
pre part> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=19:
pre part> unexpected PARTY
pre part> expecting ( or Other text

***************************** \ !Unconsumed Error: pre part: Unexpected PARTY Expecting: ( Other text :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting ( or Other text

**************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: ( Other text :4_1:Party:
**************************** / |<*/base                                                         :4_2:UnDeeper:
***************************** / ppp inner                                                      :4_2:UnDeeper:
****************************** / expression                                                   :4_2:UnDeeper:
******************************* / termIndent p                                               :4_2:UnDeeper:
******************************** / term p/1a:label ends directly above next line            :4_2:UnDeeper:
********************************* / $*|                                                    :4_2:UnDeeper:
********************************** / someSL                                               :4_2:UnDeeper:
*********************************** / pNumAsText                                         :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************* / $*|                                                    :4_2:UnDeeper:
********************************** / someSL                                               :4_2:UnDeeper:
*********************************** / pNumAsText                                         :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
******************************** / term p/1c:label ends to the right of line below          :4_2:UnDeeper:
********************************* > |<|                                                    :4_2:UnDeeper:
********************************* > |<* starting                                           :4_2:UnDeeper:
********************************* / $*|                                                    :4_2:UnDeeper:
********************************** / someSL                                               :4_2:UnDeeper:
*********************************** / pNumAsText                                         :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=17:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
******************************** / term p/notLabelTerm                                      :4_2:UnDeeper:
********************************* / term p/2:someIndentation expr p                        :4_2:UnDeeper:
********************************** / someIndentation                                      :4_2:UnDeeper:
*********************************** / myindented-GoDeeper                                :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected )
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / term p/3:plain p                                       :4_2:UnDeeper:
********************************** / pRelPred                                             :4_2:UnDeeper:
*********************************** / slRelPred                                          :4_2:UnDeeper:
************************************ / nested simpleHorn                                :4_2:UnDeeper:
************************************* > |^|                                            :4_2:UnDeeper:
************************************* / $*|                                            :4_2:UnDeeper:
************************************** / slMultiTerm                                  :4_2:UnDeeper:
*************************************** / someSL                                     :4_2:UnDeeper:
**************************************** / pNumAsText                               :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=17:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************ / RPConstraint                                     :4_2:UnDeeper:
************************************* / $*|                                            :4_2:UnDeeper:
************************************** / slMultiTerm                                  :4_2:UnDeeper:
*************************************** / someSL                                     :4_2:UnDeeper:
**************************************** / pNumAsText                               :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************ / RPBoolStructR                                    :4_2:UnDeeper:
************************************* / $*|                                            :4_2:UnDeeper:
************************************** / slMultiTerm                                  :4_2:UnDeeper:
*************************************** / someSL                                     :4_2:UnDeeper:
**************************************** / pNumAsText                               :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************ / RPMT                                             :4_2:UnDeeper:
************************************* / $*|                                            :4_2:UnDeeper:
************************************** / slAKA                                        :4_2:UnDeeper:
*************************************** / $*|                                        :4_2:UnDeeper:
**************************************** / slAKA base                               :4_2:UnDeeper:
***************************************** / slMultiTerm                            :4_2:UnDeeper:
****************************************** / someSL                               :4_2:UnDeeper:
******************************************* / pNumAsText                         :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=17:
slAKA base> unexpected )
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=17:
slAKA> unexpected )
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=17:
RPMT> unexpected )
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=17:
slRelPred> unexpected )
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=17:
pRelPred> unexpected )
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=17:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=17:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=17:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=17:
expression> unexpected )
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=17:
ppp inner> unexpected )
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
***************************** / withPrePost                                                    :4_2:UnDeeper:
****************************** > |<* starting                                                 :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=17:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
***************************** / $*|                                                            :4_2:UnDeeper:
****************************** / pre part                                                     :4_2:UnDeeper:
pre part> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected )
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text   :4_2:UnDeeper:
|<*/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=17:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

**************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=19:
|<*/parent> unexpected PARTY
|<*/parent> expecting (, ), Other text, or expression

*************************** \ !Unconsumed Error: |<*/parent: Unexpected PARTY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "you are a Public Agency"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected PARTY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected PARTY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
************************** / term p/notLabelTerm                                                   :3_3:Other "you:
*************************** / term p/2:someIndentation expr p                                     :3_3:Other "you:
**************************** / someIndentation                                                   :3_3:Other "you:
***************************** / myindented-GoDeeper                                             :3_3:Other "you:
myindented-GoDeeper> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=16:
myindented-GoDeeper> unexpected "you are a Public Agency"
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "you are a Public Agency" Expecting: ( :3_3:Other "you:
someIndentation> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "you are a Public Agency"
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected "you are a Public Agency" Expecting: ( :3_3:Other "you:
term p/2:someIndentation expr p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "you are a Public Agency"
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "you are a Public Agency" Expecting: ( :3_3:Other "you:
*************************** / term p/3:plain p                                                    :3_3:Other "you:
**************************** / pRelPred                                                          :3_3:Other "you:
***************************** / slRelPred                                                       :3_3:Other "you:
****************************** / nested simpleHorn                                             :3_3:Other "you:
******************************* > |^|                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slMultiTerm                                               :3_3:Other "you:
********************************* / someSL                                                  :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)    :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |^| deeps                                                  :4_2:UnDeeper:
|^| deeps> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

******************************* \ |^| deeps has returned ([(),()],-2)                     :4_1:Party:
nested simpleHorn> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
nested simpleHorn> MATCH (CERR): "you are a Public Agency" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected PARTY
nested simpleHorn> expecting ) or MEANS

****************************** \ !Consumed Error: nested simpleHorn: Unexpected PARTY Expecting: MEANS ) :4_1:Party:
****************************** / RPConstraint                                                  :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slMultiTerm                                               :3_3:Other "you:
********************************* / someSL                                                  :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)    :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>| calling $>>                                            :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPConstraint> MATCH (CERR): "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
****************************** / RPBoolStructR                                                 :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slMultiTerm                                               :3_3:Other "you:
********************************* / someSL                                                  :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)    :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>| calling $>>                                            :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPBoolStructR> MATCH (CERR): "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
****************************** / RPMT                                                          :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA                                                     :3_3:Other "you:
********************************* / $*|                                                     :3_3:Other "you:
********************************** / slAKA base                                            :3_3:Other "you:
*********************************** / slMultiTerm                                         :3_3:Other "you:
************************************ / someSL                                            :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

************************************ \ someSL has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA base> MATCH (COK): "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slAKA base has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)       :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / slAKA optional akapart                               :4_2:UnDeeper:
*********************************** / |?| optional something                             :4_2:UnDeeper:
************************************ / |>>/recurse                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************ / |>>/base                                         :4_2:UnDeeper:
************************************* / PAKA/akapart                                   :4_2:UnDeeper:
************************************** / $>|                                          :4_2:UnDeeper:
*************************************** / Aka Token                                  :4_2:UnDeeper:
Aka Token> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)    :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)      :4_2:UnDeeper:
********************************** > |>>/base got Nothing                                 :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / slAKA optional typically                             :4_2:UnDeeper:
*********************************** / |?| optional something                             :4_2:UnDeeper:
************************************ / |>>/recurse                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************ / |>>/base                                         :4_2:UnDeeper:
************************************* / typically                                      :4_2:UnDeeper:
************************************** / $>|                                          :4_2:UnDeeper:
$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

************************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)    :4_2:UnDeeper:
slAKA optional typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)    :4_2:UnDeeper:
********************************** > |>>/base got Nothing                                 :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                      :4_2:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************* > pAKA: entityalias = Nothing                            :4_2:UnDeeper:
slAKA> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA> MATCH (COK): "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA has returned (["you are a Public Agency"],0)       :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
RPMT> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPMT> MATCH (COK): "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

****************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)       :4_2:UnDeeper:
slRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slRelPred> MATCH (COK): "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

***************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)    :4_2:UnDeeper:
***************************** / undeepers                                                      :4_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
****************************** > sameLine: success!                                           :4_2:UnDeeper:
undeepers> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :4_2:UnDeeper:
pRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
pRelPred> MATCH (COK): "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

**************************** \ pRelPred has returned RPMT ["you are a Public Agency"]           :4_2:UnDeeper:
term p/3:plain p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/3:plain p> MATCH (COK): "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/notLabelTerm> MATCH (COK): "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
termIndent p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
termIndent p> MATCH (COK): "you are a Public Agency"
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])    :4_2:UnDeeper:
************************* / binary(Or)                                                             :4_2:UnDeeper:
binary(Or)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_2:UnDeeper:
************************* / binary(And)                                                            :4_2:UnDeeper:
binary(And)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_2:UnDeeper:
************************* / binary(SetLess)                                                        :4_2:UnDeeper:
binary(SetLess)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_2:UnDeeper:
************************* / binary(SetPlus)                                                        :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_2:UnDeeper:
expression> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
expression> MATCH (COK): "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])        :4_2:UnDeeper:
ppp inner> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
ppp inner> MATCH (COK): "you are a Public Agency"
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])           :4_2:UnDeeper:
manyIndentation/leaf?> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
manyIndentation/leaf?> MATCH (COK): "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
********************** / myindented-UnDeeper                                                          :4_2:UnDeeper:
myindented-UnDeeper> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_3:UnDeeper:
someIndentation> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someIndentation> MATCH (COK): ( "you are a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])           :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "you are a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/notLabelTerm> MATCH (COK): ( "you are a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])           :4_3:UnDeeper:
termIndent p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
termIndent p> MATCH (COK): ( "you are a Public Agency" )
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_3:UnDeeper:
****************** / binary(Or)                                                                             :4_3:UnDeeper:
binary(Or)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_3:UnDeeper:
****************** / binary(And)                                                                            :4_3:UnDeeper:
binary(And)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

****************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_3:UnDeeper:
****************** / binary(SetLess)                                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_3:UnDeeper:
****************** / binary(SetPlus)                                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

****************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_3:UnDeeper:
expression> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
expression> MATCH (COK): ( "you are a Public Agency" )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                        :4_3:UnDeeper:
ppp inner> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
ppp inner> MATCH (COK): ( "you are a Public Agency" )
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])                           :4_3:UnDeeper:
manyIndentation/leaf?> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
manyIndentation/leaf?> MATCH (COK): ( "you are a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented-UnDeeper                                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                               :4_1:Party:
someIndentation> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someIndentation> MATCH (COK): ( ( "you are a Public Agency" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/notLabelTerm> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
termIndent p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
termIndent p> MATCH (COK): ( ( "you are a Public Agency" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])                             :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected PARTY
binary(Or)> expecting OR

*********** \ !Unconsumed Error: binary(Or): Unexpected PARTY Expecting: OR                                   :4_1:Party:
*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected PARTY
binary(And)> expecting AND

*********** \ !Unconsumed Error: binary(And): Unexpected PARTY Expecting: AND                                 :4_1:Party:
*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected PARTY
binary(SetLess)> expecting LESS

*********** \ !Unconsumed Error: binary(SetLess): Unexpected PARTY Expecting: LESS                            :4_1:Party:
*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected PARTY
binary(SetPlus)> expecting PLUS

*********** \ !Unconsumed Error: binary(SetPlus): Unexpected PARTY Expecting: PLUS                            :4_1:Party:
expression> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
expression> MATCH (COK): ( ( "you are a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
ppp inner> MATCH (COK): ( ( "you are a Public Agency" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])                                    :4_1:Party:
pBSR> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pBSR> MATCH (COK): ( ( "you are a Public Agency" ) )
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [Unless]> MATCH (COK): UNLESS ( ( "you are a Public Agency" ) )
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS                     :4_1:Party:
******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                                             :4_1:Party:
******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                                            :4_1:Party:
preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING                       :4_1:Party:
******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                                             :4_1:Party:
preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN                         :4_1:Party:
******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                                              :4_1:Party:
preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON                           :4_1:Party:
******* / pDT                                                                                                     :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting MAY, MUST, or SHANT

******** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: MUST MAY SHANT                                    :4_1:Party:
pDT> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pDT> MATCH (EERR): <EMPTY>
pDT> ERROR:
pDT> offset=19:
pDT> unexpected PARTY
pDT> expecting MAY, MUST, or SHANT

******* \ !Unconsumed Error: pDT: Unexpected PARTY Expecting: MUST MAY SHANT                                      :4_1:Party:
******* / pActor [REvery,RParty,RTokAll]                                                                          :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :4_2:GoDeeper:
myindented-GoDeeper> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :5_2:UnDeeper:
************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :5_2:UnDeeper:
**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :5_2:UnDeeper:
$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :5_2:UnDeeper:
PAKA/akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :5_2:UnDeeper:
|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :5_2:UnDeeper:
************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :5_2:UnDeeper:
**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :5_2:UnDeeper:
typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :5_2:UnDeeper:
|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :5_2:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :5_1:Must:
someIndentation> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "You" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("You" :| [],Nothing) :| []))                 :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

******** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MUST Expecting: WHO WHICH WHOSE  :5_1:Must:
manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: WHO WHICH WHOSE                    :5_1:Must:
******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented-GoDeeper                                                                                 :5_1:Must:
myindented-GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

********* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (                                :5_1:Must:
someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected MUST
someIndentation> expecting (

******** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                                      :5_1:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: (        :5_1:Must:
******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :5_1:Must:
******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :5_1:Must:
preambleParamText:[Having]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :5_1:Must:
******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :5_1:Must:
preambleParamText:[Given]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :5_1:Must:
******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :5_1:Must:
preambleParamText:[Upon]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :5_1:Must:
******* / pDT                                                                                                     :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (COK): MUST
$>|> VALUE: (DMust,[])

******** \ $>| has returned DMust                                                                                 :5_2:GoDeeper:
******** / |>| calling $>>                                                                                        :5_2:GoDeeper:
********* / |>>/recurse                                                                                          :5_2:GoDeeper:
********** / |>>/recurse                                                                                          :5_3:GoDeeper:
*********** / |>>/recurse                                                                                         :5_3:Before:
|>>/recurse> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=26:
|>>/recurse> unexpected BEFORE
|>>/recurse> expecting (

*********** \ !Unconsumed Error: |>>/recurse: Unexpected BEFORE Expecting: (                                      :5_3:Before:
*********** / |>>/base                                                                                            :5_3:Before:
************ / pTemporal/eventually                                                                              :5_3:Before:
pTemporal/eventually> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=26:
pTemporal/eventually> unexpected BEFORE
pTemporal/eventually> expecting EVENTUALLY

************ \ !Unconsumed Error: pTemporal/eventually: Unexpected BEFORE Expecting: EVENTUALLY                  :5_3:Before:
************ / pTemporal/specifically                                                                            :5_3:Before:
************* / $>|                                                                                             :5_3:Before:
$>|> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
$>|> MATCH (COK): BEFORE
$>|> VALUE: (Before,[])

************* \ $>| has returned Before                                                                          :5_4:GoDeeper:
************* / |>>/recurse                                                                                      :5_4:GoDeeper:
************** / |>>/recurse                                                                                     :5_4:TNumber 3:
|>>/recurse> IN: 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "ea <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=28:
|>>/recurse> unexpected 3
|>>/recurse> expecting (

************** \ !Unconsumed Error: |>>/recurse: Unexpected 3 Expecting: (                                       :5_4:TNumber 3:
************** / |>>/base                                                                                        :5_4:TNumber 3:
*************** > |>>/base got Just 3                                                                            :5_5:GoDeeper:
|>>/base> IN: 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "ea <…>
|>>/base> MATCH (COK): 3
|>>/base> VALUE: ((Just 3,0),[])

************** \ |>>/base has returned (Just 3,0)                                                                 :5_5:GoDeeper:
|>>/recurse> IN: ( 3 ( "days" ) ) ) ) DO ( ( "NOTIFY" ( " <…>
|>>/recurse> MATCH (COK): ( 3
|>>/recurse> VALUE: ((Just 3,1),[])

************* \ |>>/recurse has returned (Just 3,1)                                                                :5_5:GoDeeper:
************* / |>| calling $>>                                                                                    :5_5:GoDeeper:
************** / |>>/recurse                                                                                      :5_5:GoDeeper:
*************** / |>>/recurse                                                                                     :5_5:Other "days:
|>>/recurse> IN: "days" ) ) ) ) DO ( ( "NOTIFY" ( "each o <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=30:
|>>/recurse> unexpected "days"
|>>/recurse> expecting (

*************** \ !Unconsumed Error: |>>/recurse: Unexpected "days" Expecting: (                                  :5_5:Other "days:
*************** / |>>/base                                                                                        :5_5:Other "days:
**************** > |>>/base got "days"                                                                      :6_2:UnDeeper:
|>>/base> IN: "days" ) ) ) ) DO ( ( "NOTIFY" ( "each o <…>
|>>/base> MATCH (COK): "days"
|>>/base> VALUE: (("days",0),[])

*************** \ |>>/base has returned ("days",0)                                                           :6_2:UnDeeper:
|>>/recurse> IN: ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "each <…>
|>>/recurse> MATCH (COK): ( "days"
|>>/recurse> VALUE: (("days",1),[])

************** \ |>>/recurse has returned ("days",1)                                                          :6_2:UnDeeper:
|>| calling $>>> IN: ( "days" ) ) ) ) DO ( ( "NOTIFY" ( "each <…>
|>| calling $>>> MATCH (COK): ( "days"
|>| calling $>>> VALUE: (("days",1),[])

************* \ |>| calling $>> has returned ("days",1)                                                        :6_2:UnDeeper:
************* / undeepers                                                                                      :6_2:UnDeeper:
************** > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                       :6_2:UnDeeper:
************** > sameLine: success!                                                                               :6_4:UnDeeper:
undeepers> IN: ) ) ) ) DO ( ( "NOTIFY" ( "each of the N <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

************* \ undeepers has returned ()                                                                          :6_4:UnDeeper:
pTemporal/specifically> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
pTemporal/specifically> MATCH (COK): BEFORE ( 3 ( "days" ) )
pTemporal/specifically> VALUE: (Just (TemporalConstraint TBefore (Just 3) "days"),[])

************ \ pTemporal/specifically has returned Just (TemporalConstraint TBefore (Just 3) "days")                :6_4:UnDeeper:
************ > |>>/base got Just (Just (TemporalConstraint TBefore (Just 3) "days"))                                :6_4:UnDeeper:
|>>/base> IN: BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NOTI <…>
|>>/base> MATCH (COK): BEFORE ( 3 ( "days" ) )
|>>/base> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),0),[])

*********** \ |>>/base has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),0)                     :6_4:UnDeeper:
|>>/recurse> IN: ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( "NO <…>
|>>/recurse> MATCH (COK): ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),1),[])

********** \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),1)                    :6_4:UnDeeper:
|>>/recurse> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
|>>/recurse> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>>/recurse> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

********* \ |>>/recurse has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                      :6_4:UnDeeper:
|>| calling $>>> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
|>| calling $>>> MATCH (COK): ( ( BEFORE ( 3 ( "days" ) )
|>| calling $>>> VALUE: ((Just (Just (TemporalConstraint TBefore (Just 3) "days")),2),[])

******** \ |>| calling $>> has returned (Just (Just (TemporalConstraint TBefore (Just 3) "days")),2)                    :6_4:UnDeeper:
******** / undeepers                                                                                                    :6_4:UnDeeper:
********* > sameLine/undeepers: reached end of line; now need to clear 2 UnDeepers                                     :6_4:UnDeeper:
********* > sameLine: success!                                                                                  :6_1:Do:
undeepers> IN: ) ) DO ( ( "NOTIFY" ( "each of the Notif <…>
undeepers> MATCH (COK): ) )
undeepers> VALUE: ((),[])

******** \ undeepers has returned ()                                                                             :6_1:Do:
pDT> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pDT> MATCH (COK): MUST ( ( BEFORE ( 3 ( "days" ) ) ) )
pDT> VALUE: ((DMust,Just (TemporalConstraint TBefore (Just 3) "days")),[])

******* \ pDT has returned (DMust,Just (TemporalConstraint TBefore (Just 3) "days"))                              :6_1:Do:
******* / WHERE                                                                                                   :6_1:Do:
WHERE> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=35:
WHERE> unexpected DO
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected DO Expecting: WHERE                                                :6_1:Do:
******* / preambleParamText:[Having]                                                                              :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: HAVING                                               :6_1:Do:
preambleParamText:[Having]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=35:
preambleParamText:[Having]> unexpected DO
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected DO Expecting: HAVING                          :6_1:Do:
******* / preambleParamText:[Given]                                                                               :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: GIVEN                                                :6_1:Do:
preambleParamText:[Given]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=35:
preambleParamText:[Given]> unexpected DO
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected DO Expecting: GIVEN                            :6_1:Do:
******* / preambleParamText:[Upon]                                                                                :6_1:Do:
******** / $>|                                                                                                   :6_1:Do:
$>|> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=35:
$>|> unexpected DO
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected DO Expecting: UPON                                                 :6_1:Do:
preambleParamText:[Upon]> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=35:
preambleParamText:[Upon]> unexpected DO
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected DO Expecting: UPON                              :6_1:Do:
******* / pDoAction/Do                                                                                            :6_1:Do:
pDoAction/Do> IN: DO ( ( "NOTIFY" ( "each of the Notifiabl <…>
pDoAction/Do> MATCH (COK): DO
pDoAction/Do> VALUE: (Do,[])

******* \ pDoAction/Do has returned Do                                                                             :6_2:GoDeeper:
******* / pDoAction/pAction                                                                                        :6_2:GoDeeper:
******** / pAction calling pParamText                                                                             :6_2:GoDeeper:
********* / pParamText                                                                                           :6_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :6_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :6_2:GoDeeper:
************ / slAKA                                                                                          :6_2:GoDeeper:
************* / $*|                                                                                          :6_2:GoDeeper:
************** / slAKA base                                                                                 :6_2:GoDeeper:
*************** / slKeyValues                                                                              :6_2:GoDeeper:
**************** / $*|                                                                                    :6_2:GoDeeper:
***************** / someSL                                                                               :6_2:GoDeeper:
****************** / pNumAsText                                                                         :6_2:GoDeeper:
pNumAsText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=36:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :6_2:GoDeeper:
someSL> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=36:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :6_2:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :6_2:GoDeeper:
slKeyValues> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=36:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :6_2:GoDeeper:
slAKA base> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=36:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :6_2:GoDeeper:
$*|> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=36:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
slAKA> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=36:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :6_2:GoDeeper:
pKeyValuesAka> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=36:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :6_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=36:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
pParamText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=36:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :6_2:GoDeeper:
pAction calling pParamText> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=36:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :6_2:GoDeeper:
pDoAction/pAction> IN: ( ( "NOTIFY" ( "each of the Notifiable I <…>
pDoAction/pAction> MATCH (EERR): <EMPTY>
pDoAction/pAction> ERROR:
pDoAction/pAction> offset=36:
pDoAction/pAction> unexpected (
pDoAction/pAction> expecting other text or number

******* \ !Unconsumed Error: pDoAction/pAction: Unexpected ( Expecting: other text or number                       :6_2:GoDeeper:
regulative permutation with deontic-temporal> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-temporal> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-temporal> ERROR:
regulative permutation with deontic-temporal> offset=36:
regulative permutation with deontic-temporal> unexpected (
regulative permutation with deontic-temporal> expecting other text or number

****** \ !Consumed Error: regulative permutation with deontic-temporal: Unexpected ( Expecting: other text or number :6_2:GoDeeper:
****** / regulative permutation with deontic-action                                                                :2_1:If:
******* / WHERE                                                                                                   :2_1:If:
WHERE> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=4:
WHERE> unexpected IF
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected IF Expecting: WHERE                                                :2_1:If:
******* / preambleParamText:[Having]                                                                              :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected IF Expecting: HAVING                                               :2_1:If:
preambleParamText:[Having]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=4:
preambleParamText:[Having]> unexpected IF
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected IF Expecting: HAVING                          :2_1:If:
******* / preambleParamText:[Given]                                                                               :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected IF Expecting: GIVEN                                                :2_1:If:
preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected IF Expecting: GIVEN                            :2_1:If:
******* / preambleParamText:[Upon]                                                                                :2_1:If:
******** / $>|                                                                                                   :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected IF Expecting: UPON                                                 :2_1:If:
preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected IF Expecting: UPON                              :2_1:If:
******* / preambleBoolStructR [Unless]                                                                            :2_1:If:
preambleBoolStructR [Unless]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=4:
preambleBoolStructR [Unless]> unexpected IF
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected IF Expecting: UNLESS                        :2_1:If:
******* / preambleBoolStructR [When,If]                                                                           :2_1:If:
******** / pBSR                                                                                                   :2_2:GoDeeper:
********* / ppp inner                                                                                            :2_2:GoDeeper:
********** / expression                                                                                         :2_2:GoDeeper:
*********** / termIndent p                                                                                     :2_2:GoDeeper:
************ / term p/1a:label ends directly above next line                                                  :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************ / term p/1b:label ends to the left of line below, with EOL                                       :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************ / term p/1c:label ends to the right of line below                                                :2_2:GoDeeper:
************* > |<|                                                                                          :2_2:GoDeeper:
************* > |<* starting                                                                                 :2_2:GoDeeper:
************* / $*|                                                                                          :2_2:GoDeeper:
************** / someSL                                                                                     :2_2:GoDeeper:
*************** / pNumAsText                                                                               :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :2_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :2_2:GoDeeper:
************** / someIndentation                                                                            :2_2:GoDeeper:
*************** / myindented-GoDeeper                                                                      :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                  :2_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :2_3:GoDeeper:
**************** / ppp inner                                                                                :2_3:GoDeeper:
***************** / expression                                                                             :2_3:GoDeeper:
****************** / termIndent p                                                                         :2_3:GoDeeper:
******************* / term p/1a:label ends directly above next line                                      :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / someSL                                                                         :2_3:GoDeeper:
********************** / pNumAsText                                                                   :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************* / term p/1b:label ends to the left of line below, with EOL                           :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / someSL                                                                         :2_3:GoDeeper:
********************** / pNumAsText                                                                   :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************* / term p/1c:label ends to the right of line below                                    :2_3:GoDeeper:
******************** > |<|                                                                              :2_3:GoDeeper:
******************** > |<* starting                                                                     :2_3:GoDeeper:
******************** / $*|                                                                              :2_3:GoDeeper:
********************* / someSL                                                                         :2_3:GoDeeper:
********************** / pNumAsText                                                                   :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :2_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :2_3:GoDeeper:
********************* / someIndentation                                                                :2_3:GoDeeper:
********************** / myindented-GoDeeper                                                          :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented-GoDeeper has returned GoDeeper                                     :2_3:Other "it i:
********************** / manyIndentation/leaf?                                                         :2_3:Other "it i:
*********************** / ppp inner                                                                   :2_3:Other "it i:
************************ / expression                                                                :2_3:Other "it i:
************************* / termIndent p                                                            :2_3:Other "it i:
************************** / term p/1a:label ends directly above next line                         :2_3:Other "it i:
*************************** / $*|                                                                 :2_3:Other "it i:
**************************** / someSL                                                            :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

**************************** \ someSL has returned (["it is","an NDB"],1)                       :3_2:UnDeeper:
**************************** / pNumAsText                                                       :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (CERR): "it is" ( "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or other text or number

*************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1a:label ends directly above next line> MATCH (CERR): "it is" ( "an NDB"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL              :2_3:Other "it i:
*************************** / $*|                                                                 :2_3:Other "it i:
**************************** / someSL                                                            :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

**************************** \ someSL has returned (["it is","an NDB"],1)                       :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

*************************** \ $*| has returned (["it is","an NDB"],1)                            :3_2:UnDeeper:
*************************** / matching EOL                                                       :3_2:UnDeeper:
matching EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected )
matching EOL> expecting EOL

*************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL       :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "it is" ( "an NDB"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                       :2_3:Other "it i:
*************************** > |<|                                                                 :2_3:Other "it i:
*************************** > |<* starting                                                        :2_3:Other "it i:
*************************** / $*|                                                                 :2_3:Other "it i:
**************************** / someSL                                                            :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

**************************** \ someSL has returned (["it is","an NDB"],1)                       :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

*************************** \ $*| has returned (["it is","an NDB"],1)                            :3_2:UnDeeper:
*************************** / |<*/parent                                                         :3_2:UnDeeper:
**************************** > |<*/recurse                                                      :3_2:UnDeeper:
**************************** / ppp inner                                                     :3_1:Unless:
***************************** / expression                                                  :3_1:Unless:
****************************** / termIndent p                                              :3_1:Unless:
******************************* / term p/1a:label ends directly above next line           :3_1:Unless:
******************************** / $*|                                                   :3_1:Unless:
********************************* / someSL                                              :3_1:Unless:
********************************** / pNumAsText                                        :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1a:label ends directly above next line> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=13:
term p/1a:label ends directly above next line> unexpected UNLESS
term p/1a:label ends directly above next line> expecting other text or number

******************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
******************************* / term p/1b:label ends to the left of line below, with EOL :3_1:Unless:
******************************** / $*|                                                   :3_1:Unless:
********************************* / someSL                                              :3_1:Unless:
********************************** / pNumAsText                                        :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1b:label ends to the left of line below, with EOL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=13:
term p/1b:label ends to the left of line below, with EOL> unexpected UNLESS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
******************************* / term p/1c:label ends to the right of line below         :3_1:Unless:
******************************** > |<|                                                   :3_1:Unless:
******************************** > |<* starting                                          :3_1:Unless:
******************************** / $*|                                                   :3_1:Unless:
********************************* / someSL                                              :3_1:Unless:
********************************** / pNumAsText                                        :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1c:label ends to the right of line below> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting other text or number

******************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
******************************* / term p/notLabelTerm                                     :3_1:Unless:
******************************** / term p/2:someIndentation expr p                       :3_1:Unless:
********************************* / someIndentation                                     :3_1:Unless:
********************************** / myindented-GoDeeper                               :3_1:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: ( :3_1:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

********************************* \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: ( :3_1:Unless:
term p/2:someIndentation expr p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected UNLESS
term p/2:someIndentation expr p> expecting (

******************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected UNLESS Expecting: ( :3_1:Unless:
******************************** / term p/3:plain p                                      :3_1:Unless:
********************************* / pRelPred                                            :3_1:Unless:
********************************** / slRelPred                                         :3_1:Unless:
*********************************** / nested simpleHorn                               :3_1:Unless:
************************************ > |^|                                           :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slMultiTerm                                 :3_1:Unless:
************************************** / someSL                                    :3_1:Unless:
*************************************** / pNumAsText                              :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

*********************************** \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
*********************************** / RPConstraint                                    :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slMultiTerm                                 :3_1:Unless:
************************************** / someSL                                    :3_1:Unless:
*************************************** / pNumAsText                              :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

*********************************** \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
*********************************** / RPBoolStructR                                   :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slMultiTerm                                 :3_1:Unless:
************************************** / someSL                                    :3_1:Unless:
*************************************** / pNumAsText                              :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

*********************************** \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
*********************************** / RPMT                                            :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slAKA                                       :3_1:Unless:
************************************** / $*|                                       :3_1:Unless:
*************************************** / slAKA base                              :3_1:Unless:
**************************************** / slMultiTerm                           :3_1:Unless:
***************************************** / someSL                              :3_1:Unless:
****************************************** / pNumAsText                        :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

************************************* \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

*********************************** \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

********************************** \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

********************************* \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/3:plain p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected UNLESS
term p/3:plain p> expecting other text or number

******************************** \ !Unconsumed Error: term p/3:plain p: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/notLabelTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=13:
term p/notLabelTerm> unexpected UNLESS
term p/notLabelTerm> expecting ( or term

******************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected UNLESS Expecting: ( term :3_1:Unless:
termIndent p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=13:
termIndent p> unexpected UNLESS
termIndent p> expecting (, other text or number, or term

****************************** \ !Unconsumed Error: termIndent p: Unexpected UNLESS Expecting: ( other text or number term :3_1:Unless:
expression> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=13:
expression> unexpected UNLESS
expression> expecting expression

***************************** \ !Unconsumed Error: expression: Unexpected UNLESS Expecting: expression :3_1:Unless:
ppp inner> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> unexpected UNLESS
ppp inner> expecting expression

**************************** \ !Unconsumed Error: ppp inner: Unexpected UNLESS Expecting: expression :3_1:Unless:
**************************** / withPrePost                                                   :3_1:Unless:
***************************** > |<* starting                                                :3_1:Unless:
***************************** / $*|                                                         :3_1:Unless:
****************************** / pre part                                                  :3_1:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
withPrePost> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=13:
withPrePost> unexpected UNLESS
withPrePost> expecting ( or Other text

**************************** \ !Unconsumed Error: withPrePost: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
**************************** / $*|                                                           :3_1:Unless:
***************************** / pre part                                                    :3_1:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

***************************** \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

**************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
**************************** / |<*/base                                                         :3_2:UnDeeper:
***************************** / ppp inner                                                      :3_2:UnDeeper:
****************************** / expression                                                   :3_2:UnDeeper:
******************************* / termIndent p                                               :3_2:UnDeeper:
******************************** / term p/1a:label ends directly above next line            :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / someSL                                               :3_2:UnDeeper:
*********************************** / pNumAsText                                         :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
******************************** / term p/1b:label ends to the left of line below, with EOL :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / someSL                                               :3_2:UnDeeper:
*********************************** / pNumAsText                                         :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
******************************** / term p/1c:label ends to the right of line below          :3_2:UnDeeper:
********************************* > |<|                                                    :3_2:UnDeeper:
********************************* > |<* starting                                           :3_2:UnDeeper:
********************************* / $*|                                                    :3_2:UnDeeper:
********************************** / someSL                                               :3_2:UnDeeper:
*********************************** / pNumAsText                                         :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
******************************** / term p/notLabelTerm                                      :3_2:UnDeeper:
********************************* / term p/2:someIndentation expr p                        :3_2:UnDeeper:
********************************** / someIndentation                                      :3_2:UnDeeper:
*********************************** / myindented-GoDeeper                                :3_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=10:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected )
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
********************************* / term p/3:plain p                                       :3_2:UnDeeper:
********************************** / pRelPred                                             :3_2:UnDeeper:
*********************************** / slRelPred                                          :3_2:UnDeeper:
************************************ / nested simpleHorn                                :3_2:UnDeeper:
************************************* > |^|                                            :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slMultiTerm                                  :3_2:UnDeeper:
*************************************** / someSL                                     :3_2:UnDeeper:
**************************************** / pNumAsText                               :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************************ / RPConstraint                                     :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slMultiTerm                                  :3_2:UnDeeper:
*************************************** / someSL                                     :3_2:UnDeeper:
**************************************** / pNumAsText                               :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************************ / RPBoolStructR                                    :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slMultiTerm                                  :3_2:UnDeeper:
*************************************** / someSL                                     :3_2:UnDeeper:
**************************************** / pNumAsText                               :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
************************************ / RPMT                                             :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slAKA                                        :3_2:UnDeeper:
*************************************** / $*|                                        :3_2:UnDeeper:
**************************************** / slAKA base                               :3_2:UnDeeper:
***************************************** / slMultiTerm                            :3_2:UnDeeper:
****************************************** / someSL                               :3_2:UnDeeper:
******************************************* / pNumAsText                         :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected )
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected )
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected )
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected )
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected )
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=10:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=10:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=10:
expression> unexpected )
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :3_2:UnDeeper:
ppp inner> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=10:
ppp inner> unexpected )
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :3_2:UnDeeper:
***************************** / withPrePost                                                    :3_2:UnDeeper:
****************************** > |<* starting                                                 :3_2:UnDeeper:
****************************** / $*|                                                          :3_2:UnDeeper:
******************************* / pre part                                                   :3_2:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=10:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
withPrePost> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=10:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
***************************** / $*|                                                            :3_2:UnDeeper:
****************************** / pre part                                                     :3_2:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=10:
pre part> unexpected )
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text   :3_2:UnDeeper:
|<*/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=10:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

**************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=13:
|<*/parent> unexpected UNLESS
|<*/parent> expecting (, ), Other text, or expression

*************************** \ !Unconsumed Error: |<*/parent: Unexpected UNLESS Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "it is" ( "an NDB"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
************************** / term p/notLabelTerm                                                   :2_3:Other "it i:
*************************** / term p/2:someIndentation expr p                                     :2_3:Other "it i:
**************************** / someIndentation                                                   :2_3:Other "it i:
***************************** / myindented-GoDeeper                                             :2_3:Other "it i:
myindented-GoDeeper> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "it is"
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "it is" Expecting: ( :2_3:Other "it i:
someIndentation> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "it is"
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected "it is" Expecting: ( :2_3:Other "it i:
term p/2:someIndentation expr p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "it is"
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "it is" Expecting: ( :2_3:Other "it i:
*************************** / term p/3:plain p                                                    :2_3:Other "it i:
**************************** / pRelPred                                                          :2_3:Other "it i:
***************************** / slRelPred                                                       :2_3:Other "it i:
****************************** / nested simpleHorn                                             :2_3:Other "it i:
******************************* > |^|                                                         :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slMultiTerm                                               :2_3:Other "it i:
********************************* / someSL                                                  :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

********************************* \ someSL has returned (["it is","an NDB"],1)             :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slMultiTerm has returned (["it is","an NDB"],1)          :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
******************************* / |^| deeps                                                  :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

******************************* \ |^| deeps has returned ([(),(),()],-3)                  :3_1:Unless:
nested simpleHorn> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
nested simpleHorn> MATCH (CERR): "it is" ( "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

****************************** \ !Consumed Error: nested simpleHorn: Unexpected UNLESS Expecting: MEANS ) :3_1:Unless:
****************************** / RPConstraint                                                  :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slMultiTerm                                               :2_3:Other "it i:
********************************* / someSL                                                  :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

********************************* \ someSL has returned (["it is","an NDB"],1)             :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slMultiTerm has returned (["it is","an NDB"],1)          :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
******************************* / |>| calling $>>                                            :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
******************************** / |>>/base                                                 :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPConstraint> MATCH (CERR): "it is" ( "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
****************************** / RPBoolStructR                                                 :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slMultiTerm                                               :2_3:Other "it i:
********************************* / someSL                                                  :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

********************************* \ someSL has returned (["it is","an NDB"],1)             :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slMultiTerm has returned (["it is","an NDB"],1)          :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
******************************* / |>| calling $>>                                            :3_2:UnDeeper:
******************************** / |>>/recurse                                              :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
******************************** / |>>/base                                                 :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPBoolStructR> MATCH (CERR): "it is" ( "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
****************************** / RPMT                                                          :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slAKA                                                     :2_3:Other "it i:
********************************* / $*|                                                     :2_3:Other "it i:
********************************** / slAKA base                                            :2_3:Other "it i:
*********************************** / slMultiTerm                                         :2_3:Other "it i:
************************************ / someSL                                            :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************************************ \ someSL has returned (["it is","an NDB"],1)       :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

*********************************** \ slMultiTerm has returned (["it is","an NDB"],1)    :3_2:UnDeeper:
slAKA base> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA base> MATCH (COK): "it is" ( "an NDB"
slAKA base> VALUE: ((["it is","an NDB"],1),[])

********************************** \ slAKA base has returned (["it is","an NDB"],1)       :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

********************************* \ $*| has returned (["it is","an NDB"],1)                :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / slAKA optional akapart                               :3_2:UnDeeper:
*********************************** / |?| optional something                             :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
************************************ / |>>/base                                         :3_2:UnDeeper:
************************************* / PAKA/akapart                                   :3_2:UnDeeper:
************************************** / $>|                                          :3_2:UnDeeper:
*************************************** / Aka Token                                  :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :3_2:UnDeeper:
PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)    :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)      :3_2:UnDeeper:
********************************** > |>>/base got Nothing                                 :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                      :3_2:UnDeeper:
********************************* / |>>/recurse                                            :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
********************************* / |>>/base                                               :3_2:UnDeeper:
********************************** / slAKA optional typically                             :3_2:UnDeeper:
*********************************** / |?| optional something                             :3_2:UnDeeper:
************************************ / |>>/recurse                                      :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
************************************ / |>>/base                                         :3_2:UnDeeper:
************************************* / typically                                      :3_2:UnDeeper:
************************************** / $>|                                          :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

************************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)    :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)    :3_2:UnDeeper:
********************************** > |>>/base got Nothing                                 :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                      :3_2:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
********************************* > pAKA: entityalias = Nothing                            :3_2:UnDeeper:
slAKA> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA> MATCH (COK): "it is" ( "an NDB"
slAKA> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slAKA has returned (["it is","an NDB"],1)                :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
RPMT> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPMT> MATCH (COK): "it is" ( "an NDB"
RPMT> VALUE: ((RPMT ["it is","an NDB"],1),[])

****************************** \ RPMT has returned (RPMT ["it is","an NDB"],1)                :3_2:UnDeeper:
slRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slRelPred> MATCH (COK): "it is" ( "an NDB"
slRelPred> VALUE: ((RPMT ["it is","an NDB"],1),[])

***************************** \ slRelPred has returned (RPMT ["it is","an NDB"],1)             :3_2:UnDeeper:
***************************** / undeepers                                                      :3_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :3_2:UnDeeper:
****************************** > sameLine: success!                                             :3_3:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                        :3_3:UnDeeper:
pRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
pRelPred> MATCH (COK): "it is" ( "an NDB" )
pRelPred> VALUE: (RPMT ["it is","an NDB"],[])

**************************** \ pRelPred has returned RPMT ["it is","an NDB"]                      :3_3:UnDeeper:
term p/3:plain p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/3:plain p> MATCH (COK): "it is" ( "an NDB" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************************** \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])       :3_3:UnDeeper:
term p/notLabelTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/notLabelTerm> MATCH (COK): "it is" ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])      :3_3:UnDeeper:
termIndent p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
termIndent p> MATCH (COK): "it is" ( "an NDB" )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************* \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])               :3_3:UnDeeper:
************************* / binary(Or)                                                               :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                :3_3:UnDeeper:
************************* / binary(And)                                                              :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

************************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND              :3_3:UnDeeper:
************************* / binary(SetLess)                                                          :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS         :3_3:UnDeeper:
************************* / binary(SetPlus)                                                          :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS         :3_3:UnDeeper:
expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************ \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                   :3_3:UnDeeper:
ppp inner> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
ppp inner> MATCH (COK): "it is" ( "an NDB" )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********************** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                      :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])            :3_3:UnDeeper:
********************** / myindented-UnDeeper                                                            :3_3:UnDeeper:
myindented-UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented-UnDeeper has returned UnDeeper                                        :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                      :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])        :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                      :3_4:UnDeeper:
termIndent p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
termIndent p> MATCH (COK): ( "it is" ( "an NDB" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

****************** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                               :3_4:UnDeeper:
****************** / binary(Or)                                                                               :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                :3_4:UnDeeper:
****************** / binary(And)                                                                              :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

****************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                              :3_4:UnDeeper:
****************** / binary(SetLess)                                                                          :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                         :3_4:UnDeeper:
****************** / binary(SetPlus)                                                                          :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

****************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                         :3_4:UnDeeper:
expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

***************** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_4:UnDeeper:
ppp inner> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
ppp inner> MATCH (COK): ( "it is" ( "an NDB" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

**************** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                      :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                            :3_4:UnDeeper:
*************** / myindented-UnDeeper                                                                            :3_4:UnDeeper:
myindented-UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                               :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                             :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])               :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                             :3_1:Unless:
termIndent p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
termIndent p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                                      :3_1:Unless:
*********** / binary(Or)                                                                                      :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

*********** \ !Unconsumed Error: binary(Or): Unexpected UNLESS Expecting: OR                                  :3_1:Unless:
*********** / binary(And)                                                                                     :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

*********** \ !Unconsumed Error: binary(And): Unexpected UNLESS Expecting: AND                                :3_1:Unless:
*********** / binary(SetLess)                                                                                 :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

*********** \ !Unconsumed Error: binary(SetLess): Unexpected UNLESS Expecting: LESS                           :3_1:Unless:
*********** / binary(SetPlus)                                                                                 :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

*********** \ !Unconsumed Error: binary(SetPlus): Unexpected UNLESS Expecting: PLUS                           :3_1:Unless:
expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                          :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********* \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                             :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

******** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                      :3_1:Unless:
preambleBoolStructR [When,If]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleBoolStructR [When,If]> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
preambleBoolStructR [When,If]> VALUE: ((If,Leaf (RPMT ["it is","an NDB"])),[])

******* \ preambleBoolStructR [When,If] has returned (If,Leaf (RPMT ["it is","an NDB"]))                          :3_1:Unless:
******* / preambleBoolStructR [When,If]                                                                           :3_1:Unless:
preambleBoolStructR [When,If]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [When,If]> MATCH (EERR): <EMPTY>
preambleBoolStructR [When,If]> ERROR:
preambleBoolStructR [When,If]> offset=13:
preambleBoolStructR [When,If]> unexpected UNLESS
preambleBoolStructR [When,If]> expecting IF or WHEN

******* \ !Unconsumed Error: preambleBoolStructR [When,If]: Unexpected UNLESS Expecting: IF WHEN                  :3_1:Unless:
******* / WHERE                                                                                                   :3_1:Unless:
WHERE> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=13:
WHERE> unexpected UNLESS
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected UNLESS Expecting: WHERE                                            :3_1:Unless:
******* / preambleParamText:[Having]                                                                              :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: HAVING                                           :3_1:Unless:
preambleParamText:[Having]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=13:
preambleParamText:[Having]> unexpected UNLESS
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected UNLESS Expecting: HAVING                      :3_1:Unless:
******* / preambleParamText:[Given]                                                                               :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: GIVEN                                            :3_1:Unless:
preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UNLESS Expecting: GIVEN                        :3_1:Unless:
******* / preambleParamText:[Upon]                                                                                :3_1:Unless:
******** / $>|                                                                                                   :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: UPON                                             :3_1:Unless:
preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected UNLESS Expecting: UPON                          :3_1:Unless:
******* / preambleBoolStructR [Unless]                                                                            :3_1:Unless:
******** / pBSR                                                                                                   :3_2:GoDeeper:
********* / ppp inner                                                                                            :3_2:GoDeeper:
********** / expression                                                                                         :3_2:GoDeeper:
*********** / termIndent p                                                                                     :3_2:GoDeeper:
************ / term p/1a:label ends directly above next line                                                  :3_2:GoDeeper:
************* / $*|                                                                                          :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :3_2:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :3_2:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :3_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=14:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

************ \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************ / term p/1b:label ends to the left of line below, with EOL                                       :3_2:GoDeeper:
************* / $*|                                                                                          :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :3_2:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :3_2:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :3_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=14:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

************ \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************ / term p/1c:label ends to the right of line below                                                :3_2:GoDeeper:
************* > |<|                                                                                          :3_2:GoDeeper:
************* > |<* starting                                                                                 :3_2:GoDeeper:
************* / $*|                                                                                          :3_2:GoDeeper:
************** / someSL                                                                                     :3_2:GoDeeper:
*************** / pNumAsText                                                                               :3_2:GoDeeper:
pNumAsText> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=14:
pNumAsText> unexpected (
pNumAsText> expecting number

*************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                            :3_2:GoDeeper:
someSL> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=14:
someSL> unexpected (
someSL> expecting other text or number

************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                    :3_2:GoDeeper:
$*|> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=14:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :3_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=14:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

************ \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_2:GoDeeper:
************ / term p/notLabelTerm                                                                            :3_2:GoDeeper:
************* / term p/2:someIndentation expr p                                                              :3_2:GoDeeper:
************** / someIndentation                                                                            :3_2:GoDeeper:
*************** / myindented-GoDeeper                                                                      :3_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

*************** \ myindented-GoDeeper has returned GoDeeper                                                  :3_3:GoDeeper:
*************** / manyIndentation/leaf?                                                                      :3_3:GoDeeper:
**************** / ppp inner                                                                                :3_3:GoDeeper:
***************** / expression                                                                             :3_3:GoDeeper:
****************** / termIndent p                                                                         :3_3:GoDeeper:
******************* / term p/1a:label ends directly above next line                                      :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :3_3:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :3_3:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :3_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=15:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

******************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************* / term p/1b:label ends to the left of line below, with EOL                           :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :3_3:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :3_3:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :3_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=15:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************* / term p/1c:label ends to the right of line below                                    :3_3:GoDeeper:
******************** > |<|                                                                              :3_3:GoDeeper:
******************** > |<* starting                                                                     :3_3:GoDeeper:
******************** / $*|                                                                              :3_3:GoDeeper:
********************* / someSL                                                                         :3_3:GoDeeper:
********************** / pNumAsText                                                                   :3_3:GoDeeper:
pNumAsText> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=15:
pNumAsText> unexpected (
pNumAsText> expecting number

********************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                :3_3:GoDeeper:
someSL> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=15:
someSL> unexpected (
someSL> expecting other text or number

********************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number        :3_3:GoDeeper:
$*|> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=15:
$*|> unexpected (
$*|> expecting other text or number

******************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number             :3_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=15:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

******************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :3_3:GoDeeper:
******************* / term p/notLabelTerm                                                                :3_3:GoDeeper:
******************** / term p/2:someIndentation expr p                                                  :3_3:GoDeeper:
********************* / someIndentation                                                                :3_3:GoDeeper:
********************** / myindented-GoDeeper                                                          :3_3:GoDeeper:
myindented-GoDeeper> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********************** \ myindented-GoDeeper has returned GoDeeper                                     :3_3:Other "you:
********************** / manyIndentation/leaf?                                                         :3_3:Other "you:
*********************** / ppp inner                                                                   :3_3:Other "you:
************************ / expression                                                                :3_3:Other "you:
************************* / termIndent p                                                            :3_3:Other "you:
************************** / term p/1a:label ends directly above next line                         :3_3:Other "you:
*************************** / $*|                                                                 :3_3:Other "you:
**************************** / someSL                                                            :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

**************************** \ someSL has returned (["you are a Public Agency"],0)              :4_2:UnDeeper:
**************************** / pNumAsText                                                       :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number    :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (CERR): "you are a Public Agency"
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or other text or number

*************************** \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/1a:label ends directly above next line> MATCH (CERR): "you are a Public Agency"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************** \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :4_2:UnDeeper:
************************** / term p/1b:label ends to the left of line below, with EOL              :3_3:Other "you:
*************************** / $*|                                                                 :3_3:Other "you:
**************************** / someSL                                                            :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

**************************** \ someSL has returned (["you are a Public Agency"],0)              :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

*************************** \ $*| has returned (["you are a Public Agency"],0)                   :4_2:UnDeeper:
*************************** / matching EOL                                                       :4_2:UnDeeper:
matching EOL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=17:
matching EOL> unexpected )
matching EOL> expecting EOL

*************************** \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL       :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "you are a Public Agency"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************** \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :4_2:UnDeeper:
************************** / term p/1c:label ends to the right of line below                       :3_3:Other "you:
*************************** > |<|                                                                 :3_3:Other "you:
*************************** > |<* starting                                                        :3_3:Other "you:
*************************** / $*|                                                                 :3_3:Other "you:
**************************** / someSL                                                            :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

**************************** \ someSL has returned (["you are a Public Agency"],0)              :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

*************************** \ $*| has returned (["you are a Public Agency"],0)                   :4_2:UnDeeper:
*************************** / |<*/parent                                                         :4_2:UnDeeper:
**************************** > |<*/recurse                                                      :4_2:UnDeeper:
**************************** / ppp inner                                                     :4_1:Party:
***************************** / expression                                                  :4_1:Party:
****************************** / termIndent p                                              :4_1:Party:
******************************* / term p/1a:label ends directly above next line           :4_1:Party:
******************************** / $*|                                                   :4_1:Party:
********************************* / someSL                                              :4_1:Party:
********************************** / pNumAsText                                        :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/1a:label ends directly above next line> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=19:
term p/1a:label ends directly above next line> unexpected PARTY
term p/1a:label ends directly above next line> expecting other text or number

******************************* \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected PARTY Expecting: other text or number :4_1:Party:
******************************* / term p/1b:label ends to the left of line below, with EOL :4_1:Party:
******************************** / $*|                                                   :4_1:Party:
********************************* / someSL                                              :4_1:Party:
********************************** / pNumAsText                                        :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/1b:label ends to the left of line below, with EOL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=19:
term p/1b:label ends to the left of line below, with EOL> unexpected PARTY
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************* \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected PARTY Expecting: other text or number :4_1:Party:
******************************* / term p/1c:label ends to the right of line below         :4_1:Party:
******************************** > |<|                                                   :4_1:Party:
******************************** > |<* starting                                          :4_1:Party:
******************************** / $*|                                                   :4_1:Party:
********************************* / someSL                                              :4_1:Party:
********************************** / pNumAsText                                        :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

********************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

********************************* \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

******************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/1c:label ends to the right of line below> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected PARTY
term p/1c:label ends to the right of line below> expecting other text or number

******************************* \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected PARTY Expecting: other text or number :4_1:Party:
******************************* / term p/notLabelTerm                                     :4_1:Party:
******************************** / term p/2:someIndentation expr p                       :4_1:Party:
********************************* / someIndentation                                     :4_1:Party:
********************************** / myindented-GoDeeper                               :4_1:Party:
myindented-GoDeeper> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=19:
myindented-GoDeeper> unexpected PARTY
myindented-GoDeeper> expecting (

********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected PARTY Expecting: ( :4_1:Party:
someIndentation> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=19:
someIndentation> unexpected PARTY
someIndentation> expecting (

********************************* \ !Unconsumed Error: someIndentation: Unexpected PARTY Expecting: ( :4_1:Party:
term p/2:someIndentation expr p> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=19:
term p/2:someIndentation expr p> unexpected PARTY
term p/2:someIndentation expr p> expecting (

******************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected PARTY Expecting: ( :4_1:Party:
******************************** / term p/3:plain p                                      :4_1:Party:
********************************* / pRelPred                                            :4_1:Party:
********************************** / slRelPred                                         :4_1:Party:
*********************************** / nested simpleHorn                               :4_1:Party:
************************************ > |^|                                           :4_1:Party:
************************************ / $*|                                           :4_1:Party:
************************************* / slMultiTerm                                 :4_1:Party:
************************************** / someSL                                    :4_1:Party:
*************************************** / pNumAsText                              :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
slMultiTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected PARTY
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
nested simpleHorn> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected PARTY
nested simpleHorn> expecting other text or number

*********************************** \ !Unconsumed Error: nested simpleHorn: Unexpected PARTY Expecting: other text or number :4_1:Party:
*********************************** / RPConstraint                                    :4_1:Party:
************************************ / $*|                                           :4_1:Party:
************************************* / slMultiTerm                                 :4_1:Party:
************************************** / someSL                                    :4_1:Party:
*************************************** / pNumAsText                              :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
slMultiTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected PARTY
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
RPConstraint> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=19:
RPConstraint> unexpected PARTY
RPConstraint> expecting other text or number

*********************************** \ !Unconsumed Error: RPConstraint: Unexpected PARTY Expecting: other text or number :4_1:Party:
*********************************** / RPBoolStructR                                   :4_1:Party:
************************************ / $*|                                           :4_1:Party:
************************************* / slMultiTerm                                 :4_1:Party:
************************************** / someSL                                    :4_1:Party:
*************************************** / pNumAsText                              :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

*************************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

************************************** \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
slMultiTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected PARTY
slMultiTerm> expecting other text or number

************************************* \ !Unconsumed Error: slMultiTerm: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
RPBoolStructR> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=19:
RPBoolStructR> unexpected PARTY
RPBoolStructR> expecting other text or number

*********************************** \ !Unconsumed Error: RPBoolStructR: Unexpected PARTY Expecting: other text or number :4_1:Party:
*********************************** / RPMT                                            :4_1:Party:
************************************ / $*|                                           :4_1:Party:
************************************* / slAKA                                       :4_1:Party:
************************************** / $*|                                       :4_1:Party:
*************************************** / slAKA base                              :4_1:Party:
**************************************** / slMultiTerm                           :4_1:Party:
***************************************** / someSL                              :4_1:Party:
****************************************** / pNumAsText                        :4_1:Party:
pNumAsText> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=19:
pNumAsText> unexpected PARTY
pNumAsText> expecting number

****************************************** \ !Unconsumed Error: pNumAsText: Unexpected PARTY Expecting: number :4_1:Party:
someSL> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=19:
someSL> unexpected PARTY
someSL> expecting other text or number

***************************************** \ !Unconsumed Error: someSL: Unexpected PARTY Expecting: other text or number :4_1:Party:
slMultiTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=19:
slMultiTerm> unexpected PARTY
slMultiTerm> expecting other text or number

**************************************** \ !Unconsumed Error: slMultiTerm: Unexpected PARTY Expecting: other text or number :4_1:Party:
slAKA base> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=19:
slAKA base> unexpected PARTY
slAKA base> expecting other text or number

*************************************** \ !Unconsumed Error: slAKA base: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
slAKA> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=19:
slAKA> unexpected PARTY
slAKA> expecting other text or number

************************************* \ !Unconsumed Error: slAKA: Unexpected PARTY Expecting: other text or number :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: other text or number :4_1:Party:
RPMT> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=19:
RPMT> unexpected PARTY
RPMT> expecting other text or number

*********************************** \ !Unconsumed Error: RPMT: Unexpected PARTY Expecting: other text or number :4_1:Party:
slRelPred> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=19:
slRelPred> unexpected PARTY
slRelPred> expecting other text or number

********************************** \ !Unconsumed Error: slRelPred: Unexpected PARTY Expecting: other text or number :4_1:Party:
pRelPred> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=19:
pRelPred> unexpected PARTY
pRelPred> expecting other text or number

********************************* \ !Unconsumed Error: pRelPred: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/3:plain p> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=19:
term p/3:plain p> unexpected PARTY
term p/3:plain p> expecting other text or number

******************************** \ !Unconsumed Error: term p/3:plain p: Unexpected PARTY Expecting: other text or number :4_1:Party:
term p/notLabelTerm> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=19:
term p/notLabelTerm> unexpected PARTY
term p/notLabelTerm> expecting ( or term

******************************* \ !Unconsumed Error: term p/notLabelTerm: Unexpected PARTY Expecting: ( term :4_1:Party:
termIndent p> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=19:
termIndent p> unexpected PARTY
termIndent p> expecting (, other text or number, or term

****************************** \ !Unconsumed Error: termIndent p: Unexpected PARTY Expecting: ( other text or number term :4_1:Party:
expression> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=19:
expression> unexpected PARTY
expression> expecting expression

***************************** \ !Unconsumed Error: expression: Unexpected PARTY Expecting: expression :4_1:Party:
ppp inner> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=19:
ppp inner> unexpected PARTY
ppp inner> expecting expression

**************************** \ !Unconsumed Error: ppp inner: Unexpected PARTY Expecting: expression :4_1:Party:
**************************** / withPrePost                                                   :4_1:Party:
***************************** > |<* starting                                                :4_1:Party:
***************************** / $*|                                                         :4_1:Party:
****************************** / pre part                                                  :4_1:Party:
pre part> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=19:
pre part> unexpected PARTY
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected PARTY Expecting: ( Other text :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: ( Other text :4_1:Party:
withPrePost> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=19:
withPrePost> unexpected PARTY
withPrePost> expecting ( or Other text

**************************** \ !Unconsumed Error: withPrePost: Unexpected PARTY Expecting: ( Other text :4_1:Party:
**************************** / $*|                                                           :4_1:Party:
***************************** / pre part                                                    :4_1:Party:
pre part> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=19:
pre part> unexpected PARTY
pre part> expecting ( or Other text

***************************** \ !Unconsumed Error: pre part: Unexpected PARTY Expecting: ( Other text :4_1:Party:
$*|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=19:
$*|> unexpected PARTY
$*|> expecting ( or Other text

**************************** \ !Unconsumed Error: $*|: Unexpected PARTY Expecting: ( Other text :4_1:Party:
**************************** / |<*/base                                                         :4_2:UnDeeper:
***************************** / ppp inner                                                      :4_2:UnDeeper:
****************************** / expression                                                   :4_2:UnDeeper:
******************************* / termIndent p                                               :4_2:UnDeeper:
******************************** / term p/1a:label ends directly above next line            :4_2:UnDeeper:
********************************* / $*|                                                    :4_2:UnDeeper:
********************************** / someSL                                               :4_2:UnDeeper:
*********************************** / pNumAsText                                         :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=17:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

******************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
******************************** / term p/1b:label ends to the left of line below, with EOL :4_2:UnDeeper:
********************************* / $*|                                                    :4_2:UnDeeper:
********************************** / someSL                                               :4_2:UnDeeper:
*********************************** / pNumAsText                                         :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=17:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

******************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
******************************** / term p/1c:label ends to the right of line below          :4_2:UnDeeper:
********************************* > |<|                                                    :4_2:UnDeeper:
********************************* > |<* starting                                           :4_2:UnDeeper:
********************************* / $*|                                                    :4_2:UnDeeper:
********************************** / someSL                                               :4_2:UnDeeper:
*********************************** / pNumAsText                                         :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

*********************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

********************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

********************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=17:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

******************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
******************************** / term p/notLabelTerm                                      :4_2:UnDeeper:
********************************* / term p/2:someIndentation expr p                        :4_2:UnDeeper:
********************************** / someIndentation                                      :4_2:UnDeeper:
*********************************** / myindented-GoDeeper                                :4_2:UnDeeper:
myindented-GoDeeper> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=17:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

*********************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :4_2:UnDeeper:
someIndentation> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=17:
someIndentation> unexpected )
someIndentation> expecting (

********************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :4_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=17:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

********************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / term p/3:plain p                                       :4_2:UnDeeper:
********************************** / pRelPred                                             :4_2:UnDeeper:
*********************************** / slRelPred                                          :4_2:UnDeeper:
************************************ / nested simpleHorn                                :4_2:UnDeeper:
************************************* > |^|                                            :4_2:UnDeeper:
************************************* / $*|                                            :4_2:UnDeeper:
************************************** / slMultiTerm                                  :4_2:UnDeeper:
*************************************** / someSL                                     :4_2:UnDeeper:
**************************************** / pNumAsText                               :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
nested simpleHorn> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=17:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

************************************ \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************ / RPConstraint                                     :4_2:UnDeeper:
************************************* / $*|                                            :4_2:UnDeeper:
************************************** / slMultiTerm                                  :4_2:UnDeeper:
*************************************** / someSL                                     :4_2:UnDeeper:
**************************************** / pNumAsText                               :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPConstraint> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

************************************ \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************ / RPBoolStructR                                    :4_2:UnDeeper:
************************************* / $*|                                            :4_2:UnDeeper:
************************************** / slMultiTerm                                  :4_2:UnDeeper:
*************************************** / someSL                                     :4_2:UnDeeper:
**************************************** / pNumAsText                               :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPBoolStructR> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

************************************ \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
************************************ / RPMT                                             :4_2:UnDeeper:
************************************* / $*|                                            :4_2:UnDeeper:
************************************** / slAKA                                        :4_2:UnDeeper:
*************************************** / $*|                                        :4_2:UnDeeper:
**************************************** / slAKA base                               :4_2:UnDeeper:
***************************************** / slMultiTerm                            :4_2:UnDeeper:
****************************************** / someSL                               :4_2:UnDeeper:
******************************************* / pNumAsText                         :4_2:UnDeeper:
pNumAsText> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=17:
pNumAsText> unexpected )
pNumAsText> expecting number

******************************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :4_2:UnDeeper:
someSL> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=17:
someSL> unexpected )
someSL> expecting other text or number

****************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slMultiTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=17:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

***************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=17:
slAKA base> unexpected )
slAKA base> expecting other text or number

**************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

*************************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slAKA> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=17:
slAKA> unexpected )
slAKA> expecting other text or number

************************************** \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
RPMT> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=17:
RPMT> unexpected )
RPMT> expecting other text or number

************************************ \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
slRelPred> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=17:
slRelPred> unexpected )
slRelPred> expecting other text or number

*********************************** \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
pRelPred> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=17:
pRelPred> unexpected )
pRelPred> expecting other text or number

********************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/3:plain p> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=17:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

********************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :4_2:UnDeeper:
term p/notLabelTerm> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=17:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

******************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :4_2:UnDeeper:
termIndent p> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=17:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

******************************* \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :4_2:UnDeeper:
expression> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=17:
expression> unexpected )
expression> expecting expression

****************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :4_2:UnDeeper:
ppp inner> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=17:
ppp inner> unexpected )
ppp inner> expecting expression

***************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression :4_2:UnDeeper:
***************************** / withPrePost                                                    :4_2:UnDeeper:
****************************** > |<* starting                                                 :4_2:UnDeeper:
****************************** / $*|                                                          :4_2:UnDeeper:
******************************* / pre part                                                   :4_2:UnDeeper:
pre part> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected )
pre part> expecting ( or Other text

******************************* \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or Other text

****************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
withPrePost> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=17:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

***************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
***************************** / $*|                                                            :4_2:UnDeeper:
****************************** / pre part                                                     :4_2:UnDeeper:
pre part> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=17:
pre part> unexpected )
pre part> expecting ( or Other text

****************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :4_2:UnDeeper:
$*|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=17:
$*|> unexpected )
$*|> expecting ( or Other text

***************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text   :4_2:UnDeeper:
|<*/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=17:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

**************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :4_2:UnDeeper:
|<*/parent> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=19:
|<*/parent> unexpected PARTY
|<*/parent> expecting (, ), Other text, or expression

*************************** \ !Unconsumed Error: |<*/parent: Unexpected PARTY Expecting: ( ( ) Other text expression :4_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "you are a Public Agency"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=19:
term p/1c:label ends to the right of line below> unexpected PARTY
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************** \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected PARTY Expecting: ( ( ( ) Other text expression :4_2:UnDeeper:
************************** / term p/notLabelTerm                                                   :3_3:Other "you:
*************************** / term p/2:someIndentation expr p                                     :3_3:Other "you:
**************************** / someIndentation                                                   :3_3:Other "you:
***************************** / myindented-GoDeeper                                             :3_3:Other "you:
myindented-GoDeeper> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=16:
myindented-GoDeeper> unexpected "you are a Public Agency"
myindented-GoDeeper> expecting (

***************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "you are a Public Agency" Expecting: ( :3_3:Other "you:
someIndentation> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=16:
someIndentation> unexpected "you are a Public Agency"
someIndentation> expecting (

**************************** \ !Unconsumed Error: someIndentation: Unexpected "you are a Public Agency" Expecting: ( :3_3:Other "you:
term p/2:someIndentation expr p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=16:
term p/2:someIndentation expr p> unexpected "you are a Public Agency"
term p/2:someIndentation expr p> expecting (

*************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "you are a Public Agency" Expecting: ( :3_3:Other "you:
*************************** / term p/3:plain p                                                    :3_3:Other "you:
**************************** / pRelPred                                                          :3_3:Other "you:
***************************** / slRelPred                                                       :3_3:Other "you:
****************************** / nested simpleHorn                                             :3_3:Other "you:
******************************* > |^|                                                         :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slMultiTerm                                               :3_3:Other "you:
********************************* / someSL                                                  :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)    :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |^| deeps                                                  :4_2:UnDeeper:
|^| deeps> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|^| deeps> MATCH (COK): ) )
|^| deeps> VALUE: (([(),()],-2),[])

******************************* \ |^| deeps has returned ([(),()],-2)                     :4_1:Party:
nested simpleHorn> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
nested simpleHorn> MATCH (CERR): "you are a Public Agency" ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=19:
nested simpleHorn> unexpected PARTY
nested simpleHorn> expecting ) or MEANS

****************************** \ !Consumed Error: nested simpleHorn: Unexpected PARTY Expecting: MEANS ) :4_1:Party:
****************************** / RPConstraint                                                  :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slMultiTerm                                               :3_3:Other "you:
********************************* / someSL                                                  :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)    :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>| calling $>>                                            :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPConstraint> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPConstraint> MATCH (CERR): "you are a Public Agency"
RPConstraint> ERROR:
RPConstraint> offset=17:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
****************************** / RPBoolStructR                                                 :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slMultiTerm                                               :3_3:Other "you:
********************************* / someSL                                                  :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ someSL has returned (["you are a Public Agency"],0)    :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
******************************* / |>| calling $>>                                            :4_2:UnDeeper:
******************************** / |>>/recurse                                              :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
******************************** / |>>/base                                                 :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

******************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :4_2:UnDeeper:
|>| calling $>>> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=17:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

******************************* \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
RPBoolStructR> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPBoolStructR> MATCH (CERR): "you are a Public Agency"
RPBoolStructR> ERROR:
RPBoolStructR> offset=17:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :4_2:UnDeeper:
****************************** / RPMT                                                          :3_3:Other "you:
******************************* / $*|                                                         :3_3:Other "you:
******************************** / slAKA                                                     :3_3:Other "you:
********************************* / $*|                                                     :3_3:Other "you:
********************************** / slAKA base                                            :3_3:Other "you:
*********************************** / slMultiTerm                                         :3_3:Other "you:
************************************ / someSL                                            :3_3:Other "you:
someSL> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
someSL> MATCH (COK): "you are a Public Agency"
someSL> VALUE: ((["you are a Public Agency"],0),[])

************************************ \ someSL has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slMultiTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slMultiTerm> MATCH (COK): "you are a Public Agency"
slMultiTerm> VALUE: ((["you are a Public Agency"],0),[])

*********************************** \ slMultiTerm has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
slAKA base> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA base> MATCH (COK): "you are a Public Agency"
slAKA base> VALUE: ((["you are a Public Agency"],0),[])

********************************** \ slAKA base has returned (["you are a Public Agency"],0) :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

********************************* \ $*| has returned (["you are a Public Agency"],0)       :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / slAKA optional akapart                               :4_2:UnDeeper:
*********************************** / |?| optional something                             :4_2:UnDeeper:
************************************ / |>>/recurse                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************ / |>>/base                                         :4_2:UnDeeper:
************************************* / PAKA/akapart                                   :4_2:UnDeeper:
************************************** / $>|                                          :4_2:UnDeeper:
*************************************** / Aka Token                                  :4_2:UnDeeper:
Aka Token> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=17:
Aka Token> unexpected )
Aka Token> expecting AKA

*************************************** \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :4_2:UnDeeper:
$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting AKA

************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :4_2:UnDeeper:
PAKA/akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=17:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

************************************* \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting AKA

************************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :4_2:UnDeeper:
|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)    :4_2:UnDeeper:
slAKA optional akapart> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional akapart has returned (Nothing,0)      :4_2:UnDeeper:
********************************** > |>>/base got Nothing                                 :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                      :4_2:UnDeeper:
********************************* / |>>/recurse                                            :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
********************************* / |>>/base                                               :4_2:UnDeeper:
********************************** / slAKA optional typically                             :4_2:UnDeeper:
*********************************** / |?| optional something                             :4_2:UnDeeper:
************************************ / |>>/recurse                                      :4_2:UnDeeper:
|>>/recurse> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=17:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************************************ \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :4_2:UnDeeper:
************************************ / |>>/base                                         :4_2:UnDeeper:
************************************* / typically                                      :4_2:UnDeeper:
************************************** / $>|                                          :4_2:UnDeeper:
$>|> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=17:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=17:
typically> unexpected )
typically> expecting TYPICALLY

************************************* \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=17:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

************************************ \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :4_2:UnDeeper:
|?| optional something> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*********************************** \ |?| optional something has returned (Nothing,0)    :4_2:UnDeeper:
slAKA optional typically> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

********************************** \ slAKA optional typically has returned (Nothing,0)    :4_2:UnDeeper:
********************************** > |>>/base got Nothing                                 :4_2:UnDeeper:
|>>/base> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

********************************* \ |>>/base has returned (Nothing,0)                      :4_2:UnDeeper:
********************************* > slAKA: proceeding after base and entityalias are retrieved ... :4_2:UnDeeper:
********************************* > pAKA: entityalias = Nothing                            :4_2:UnDeeper:
slAKA> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slAKA> MATCH (COK): "you are a Public Agency"
slAKA> VALUE: ((["you are a Public Agency"],0),[])

******************************** \ slAKA has returned (["you are a Public Agency"],0)       :4_2:UnDeeper:
$*|> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
$*|> MATCH (COK): "you are a Public Agency"
$*|> VALUE: ((["you are a Public Agency"],0),[])

******************************* \ $*| has returned (["you are a Public Agency"],0)           :4_2:UnDeeper:
RPMT> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
RPMT> MATCH (COK): "you are a Public Agency"
RPMT> VALUE: ((RPMT ["you are a Public Agency"],0),[])

****************************** \ RPMT has returned (RPMT ["you are a Public Agency"],0)       :4_2:UnDeeper:
slRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
slRelPred> MATCH (COK): "you are a Public Agency"
slRelPred> VALUE: ((RPMT ["you are a Public Agency"],0),[])

***************************** \ slRelPred has returned (RPMT ["you are a Public Agency"],0)    :4_2:UnDeeper:
***************************** / undeepers                                                      :4_2:UnDeeper:
****************************** > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers :4_2:UnDeeper:
****************************** > sameLine: success!                                           :4_2:UnDeeper:
undeepers> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

***************************** \ undeepers has returned ()                                      :4_2:UnDeeper:
pRelPred> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
pRelPred> MATCH (COK): "you are a Public Agency"
pRelPred> VALUE: (RPMT ["you are a Public Agency"],[])

**************************** \ pRelPred has returned RPMT ["you are a Public Agency"]           :4_2:UnDeeper:
term p/3:plain p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/3:plain p> MATCH (COK): "you are a Public Agency"
term p/3:plain p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************************** \ term p/3:plain p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
term p/notLabelTerm> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
term p/notLabelTerm> MATCH (COK): "you are a Public Agency"
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
termIndent p> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
termIndent p> MATCH (COK): "you are a Public Agency"
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************* \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])    :4_2:UnDeeper:
************************* / binary(Or)                                                             :4_2:UnDeeper:
binary(Or)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=17:
binary(Or)> unexpected )
binary(Or)> expecting OR

************************* \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR              :4_2:UnDeeper:
************************* / binary(And)                                                            :4_2:UnDeeper:
binary(And)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=17:
binary(And)> unexpected )
binary(And)> expecting AND

************************* \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND            :4_2:UnDeeper:
************************* / binary(SetLess)                                                        :4_2:UnDeeper:
binary(SetLess)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=17:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

************************* \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS       :4_2:UnDeeper:
************************* / binary(SetPlus)                                                        :4_2:UnDeeper:
binary(SetPlus)> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=17:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

************************* \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS       :4_2:UnDeeper:
expression> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
expression> MATCH (COK): "you are a Public Agency"
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************************ \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])        :4_2:UnDeeper:
ppp inner> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
ppp inner> MATCH (COK): "you are a Public Agency"
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********************** \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])           :4_2:UnDeeper:
manyIndentation/leaf?> IN: "you are a Public Agency" ) ) PARTY ( "Y <…>
manyIndentation/leaf?> MATCH (COK): "you are a Public Agency"
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_2:UnDeeper:
********************** / myindented-UnDeeper                                                          :4_2:UnDeeper:
myindented-UnDeeper> IN: ) ) PARTY ( "You" ) MUST ( ( BEFORE ( 3  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********************** \ myindented-UnDeeper has returned UnDeeper                                      :4_3:UnDeeper:
someIndentation> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
someIndentation> MATCH (COK): ( "you are a Public Agency" )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********************* \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])           :4_3:UnDeeper:
term p/2:someIndentation expr p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( "you are a Public Agency" )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"]) :4_3:UnDeeper:
term p/notLabelTerm> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
term p/notLabelTerm> MATCH (COK): ( "you are a Public Agency" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

******************* \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])           :4_3:UnDeeper:
termIndent p> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
termIndent p> MATCH (COK): ( "you are a Public Agency" )
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

****************** \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_3:UnDeeper:
****************** / binary(Or)                                                                             :4_3:UnDeeper:
binary(Or)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=18:
binary(Or)> unexpected )
binary(Or)> expecting OR

****************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                              :4_3:UnDeeper:
****************** / binary(And)                                                                            :4_3:UnDeeper:
binary(And)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=18:
binary(And)> unexpected )
binary(And)> expecting AND

****************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                            :4_3:UnDeeper:
****************** / binary(SetLess)                                                                        :4_3:UnDeeper:
binary(SetLess)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=18:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

****************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                       :4_3:UnDeeper:
****************** / binary(SetPlus)                                                                        :4_3:UnDeeper:
binary(SetPlus)> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=18:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

****************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                       :4_3:UnDeeper:
expression> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
expression> MATCH (COK): ( "you are a Public Agency" )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

***************** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                        :4_3:UnDeeper:
ppp inner> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
ppp inner> MATCH (COK): ( "you are a Public Agency" )
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

**************** \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])                           :4_3:UnDeeper:
manyIndentation/leaf?> IN: ( "you are a Public Agency" ) ) PARTY (  <…>
manyIndentation/leaf?> MATCH (COK): ( "you are a Public Agency" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["you are a Public Agency"])                 :4_3:UnDeeper:
*************** / myindented-UnDeeper                                                                          :4_3:UnDeeper:
myindented-UnDeeper> IN: ) PARTY ( "You" ) MUST ( ( BEFORE ( 3 (  <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

*************** \ myindented-UnDeeper has returned UnDeeper                                               :4_1:Party:
someIndentation> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
someIndentation> MATCH (COK): ( ( "you are a Public Agency" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************** \ someIndentation has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
term p/2:someIndentation expr p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************* \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["you are a Public Agency"])      :4_1:Party:
term p/notLabelTerm> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
term p/notLabelTerm> MATCH (COK): ( ( "you are a Public Agency" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["you are a Public Agency"])                    :4_1:Party:
termIndent p> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
termIndent p> MATCH (COK): ( ( "you are a Public Agency" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

*********** \ termIndent p has returned MyLeaf (RPMT ["you are a Public Agency"])                             :4_1:Party:
*********** / binary(Or)                                                                                      :4_1:Party:
binary(Or)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=19:
binary(Or)> unexpected PARTY
binary(Or)> expecting OR

*********** \ !Unconsumed Error: binary(Or): Unexpected PARTY Expecting: OR                                   :4_1:Party:
*********** / binary(And)                                                                                     :4_1:Party:
binary(And)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=19:
binary(And)> unexpected PARTY
binary(And)> expecting AND

*********** \ !Unconsumed Error: binary(And): Unexpected PARTY Expecting: AND                                 :4_1:Party:
*********** / binary(SetLess)                                                                                 :4_1:Party:
binary(SetLess)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=19:
binary(SetLess)> unexpected PARTY
binary(SetLess)> expecting LESS

*********** \ !Unconsumed Error: binary(SetLess): Unexpected PARTY Expecting: LESS                            :4_1:Party:
*********** / binary(SetPlus)                                                                                 :4_1:Party:
binary(SetPlus)> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=19:
binary(SetPlus)> unexpected PARTY
binary(SetPlus)> expecting PLUS

*********** \ !Unconsumed Error: binary(SetPlus): Unexpected PARTY Expecting: PLUS                            :4_1:Party:
expression> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
expression> MATCH (COK): ( ( "you are a Public Agency" ) )
expression> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********** \ expression has returned MyLeaf (RPMT ["you are a Public Agency"])                                 :4_1:Party:
ppp inner> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
ppp inner> MATCH (COK): ( ( "you are a Public Agency" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["you are a Public Agency"]),[])

********* \ ppp inner has returned MyLeaf (RPMT ["you are a Public Agency"])                                    :4_1:Party:
pBSR> IN: ( ( "you are a Public Agency" ) ) PARTY  <…>
pBSR> MATCH (COK): ( ( "you are a Public Agency" ) )
pBSR> VALUE: (Leaf (RPMT ["you are a Public Agency"]),[])

******** \ pBSR has returned Leaf (RPMT ["you are a Public Agency"])                                             :4_1:Party:
preambleBoolStructR [Unless]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleBoolStructR [Unless]> MATCH (COK): UNLESS ( ( "you are a Public Agency" ) )
preambleBoolStructR [Unless]> VALUE: ((Unless,Leaf (RPMT ["you are a Public Agency"])),[])

******* \ preambleBoolStructR [Unless] has returned (Unless,Leaf (RPMT ["you are a Public Agency"]))              :4_1:Party:
******* / preambleBoolStructR [Unless]                                                                            :4_1:Party:
preambleBoolStructR [Unless]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleBoolStructR [Unless]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Unless]> ERROR:
preambleBoolStructR [Unless]> offset=19:
preambleBoolStructR [Unless]> unexpected PARTY
preambleBoolStructR [Unless]> expecting UNLESS

******* \ !Unconsumed Error: preambleBoolStructR [Unless]: Unexpected PARTY Expecting: UNLESS                     :4_1:Party:
******* / WHERE                                                                                                   :4_1:Party:
WHERE> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=19:
WHERE> unexpected PARTY
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected PARTY Expecting: WHERE                                             :4_1:Party:
******* / preambleParamText:[Having]                                                                              :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: HAVING                                            :4_1:Party:
preambleParamText:[Having]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=19:
preambleParamText:[Having]> unexpected PARTY
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected PARTY Expecting: HAVING                       :4_1:Party:
******* / preambleParamText:[Given]                                                                               :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: GIVEN                                             :4_1:Party:
preambleParamText:[Given]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=19:
preambleParamText:[Given]> unexpected PARTY
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected PARTY Expecting: GIVEN                         :4_1:Party:
******* / preambleParamText:[Upon]                                                                                :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: UPON                                              :4_1:Party:
preambleParamText:[Upon]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=19:
preambleParamText:[Upon]> unexpected PARTY
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected PARTY Expecting: UPON                           :4_1:Party:
******* / pTemporal/eventually                                                                                    :4_1:Party:
pTemporal/eventually> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=19:
pTemporal/eventually> unexpected PARTY
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected PARTY Expecting: EVENTUALLY                         :4_1:Party:
******* / pTemporal/specifically                                                                                  :4_1:Party:
******** / $>|                                                                                                   :4_1:Party:
$>|> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=19:
$>|> unexpected PARTY
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected PARTY Expecting: BEFORE AFTER BY ON                                :4_1:Party:
pTemporal/specifically> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=19:
pTemporal/specifically> unexpected PARTY
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected PARTY Expecting: BEFORE AFTER BY ON               :4_1:Party:
******* / pTemporal/vaguely                                                                                       :4_1:Party:
pTemporal/vaguely> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=19:
pTemporal/vaguely> unexpected PARTY
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected PARTY Expecting: Other text                            :4_1:Party:
******* / pActor [REvery,RParty,RTokAll]                                                                          :4_1:Party:
******** / someIndentation                                                                                        :4_2:GoDeeper:
********* / myindented-GoDeeper                                                                                  :4_2:GoDeeper:
myindented-GoDeeper> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

********* \ myindented-GoDeeper has returned GoDeeper                                                             :4_2:Other "You":
********* / manyIndentation/leaf?                                                                                 :4_2:Other "You":
********** / pMultiTermAka                                                                                       :4_2:Other "You":
*********** / pAKA                                                                                              :4_2:Other "You":
************ / slAKA                                                                                           :4_2:Other "You":
************* / $*|                                                                                           :4_2:Other "You":
************** / slAKA base                                                                                  :4_2:Other "You":
*************** / slMultiTerm                                                                               :4_2:Other "You":
**************** / someSL                                                                                  :4_2:Other "You":
someSL> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
someSL> MATCH (COK): "You"
someSL> VALUE: ((["You"],0),[])

**************** \ someSL has returned (["You"],0)                                                          :5_2:UnDeeper:
slMultiTerm> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slMultiTerm> MATCH (COK): "You"
slMultiTerm> VALUE: ((["You"],0),[])

*************** \ slMultiTerm has returned (["You"],0)                                                       :5_2:UnDeeper:
slAKA base> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA base> MATCH (COK): "You"
slAKA base> VALUE: ((["You"],0),[])

************** \ slAKA base has returned (["You"],0)                                                          :5_2:UnDeeper:
$*|> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
$*|> MATCH (COK): "You"
$*|> VALUE: ((["You"],0),[])

************* \ $*| has returned (["You"],0)                                                                   :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :5_2:UnDeeper:
************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional akapart                                                                       :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :5_2:UnDeeper:
**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / PAKA/akapart                                                                           :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
******************* / Aka Token                                                                          :5_2:UnDeeper:
Aka Token> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=22:
Aka Token> unexpected )
Aka Token> expecting AKA

******************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA                          :5_2:UnDeeper:
$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting AKA

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA                                  :5_2:UnDeeper:
PAKA/akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=22:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

***************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA                           :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting AKA

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA                                 :5_2:UnDeeper:
|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional akapart> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

************** \ slAKA optional akapart has returned (Nothing,0)                                              :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* / |>>/recurse                                                                                    :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                      :5_2:UnDeeper:
************* / |>>/base                                                                                       :5_2:UnDeeper:
************** / slAKA optional typically                                                                     :5_2:UnDeeper:
*************** / |?| optional something                                                                     :5_2:UnDeeper:
**************** / |>>/recurse                                                                              :5_2:UnDeeper:
|>>/recurse> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=22:
|>>/recurse> unexpected )
|>>/recurse> expecting (

**************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (                                :5_2:UnDeeper:
**************** / |>>/base                                                                                 :5_2:UnDeeper:
***************** / typically                                                                              :5_2:UnDeeper:
****************** / $>|                                                                                  :5_2:UnDeeper:
$>|> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=22:
$>|> unexpected )
$>|> expecting TYPICALLY

****************** \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY                            :5_2:UnDeeper:
typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=22:
typically> unexpected )
typically> expecting TYPICALLY

***************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY                        :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=22:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

**************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY                           :5_2:UnDeeper:
|?| optional something> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

*************** \ |?| optional something has returned (Nothing,0)                                            :5_2:UnDeeper:
slAKA optional typically> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

************** \ slAKA optional typically has returned (Nothing,0)                                            :5_2:UnDeeper:
************** > |>>/base got Nothing                                                                         :5_2:UnDeeper:
|>>/base> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

************* \ |>>/base has returned (Nothing,0)                                                              :5_2:UnDeeper:
************* > slAKA: proceeding after base and entityalias are retrieved ...                                 :5_2:UnDeeper:
************* > pAKA: entityalias = Nothing                                                                    :5_2:UnDeeper:
slAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
slAKA> MATCH (COK): "You"
slAKA> VALUE: ((["You"],0),[])

************ \ slAKA has returned (["You"],0)                                                                   :5_2:UnDeeper:
************ / undeepers                                                                                        :5_2:UnDeeper:
************* > sameLine/undeepers: reached end of line; now need to clear 0 UnDeepers                         :5_2:UnDeeper:
************* > sameLine: success!                                                                             :5_2:UnDeeper:
undeepers> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
undeepers> MATCH (EOK): <EMPTY>
undeepers> VALUE: ((),[])

************ \ undeepers has returned ()                                                                        :5_2:UnDeeper:
pAKA> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pAKA> MATCH (COK): "You"
pAKA> VALUE: (["You"],[])

*********** \ pAKA has returned ["You"]                                                                          :5_2:UnDeeper:
pMultiTermAka> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
pMultiTermAka> MATCH (COK): "You"
pMultiTermAka> VALUE: (["You"],[])

********** \ pMultiTermAka has returned ["You"]                                                                   :5_2:UnDeeper:
manyIndentation/leaf?> IN: "You" ) MUST ( ( BEFORE ( 3 ( "days" ) ) <…>
manyIndentation/leaf?> MATCH (COK): "You"
manyIndentation/leaf?> VALUE: (["You"],[])

********* \ manyIndentation/leaf? has returned ["You"]                                                             :5_2:UnDeeper:
********* / myindented-UnDeeper                                                                                    :5_2:UnDeeper:
myindented-UnDeeper> IN: ) MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) D <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

********* \ myindented-UnDeeper has returned UnDeeper                                                           :5_1:Must:
someIndentation> IN: ( "You" ) MUST ( ( BEFORE ( 3 ( "days" ) <…>
someIndentation> MATCH (COK): ( "You" )
someIndentation> VALUE: (["You"],[])

******** \ someIndentation has returned ["You"]                                                                  :5_1:Must:
pActor [REvery,RParty,RTokAll]> IN: PARTY ( "You" ) MUST ( ( BEFORE ( 3 ( "d <…>
pActor [REvery,RParty,RTokAll]> MATCH (COK): PARTY ( "You" )
pActor [REvery,RParty,RTokAll]> VALUE: ((RParty,Leaf (("You" :| [],Nothing) :| [])),[])

******* \ pActor [REvery,RParty,RTokAll] has returned (RParty,Leaf (("You" :| [],Nothing) :| []))                 :5_1:Must:
******* / manyIndentation/leaf?                                                                                   :5_1:Must:
******** / preambleBoolStructR [Who,Which,Whose]                                                                 :5_1:Must:
preambleBoolStructR [Who,Which,Whose]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleBoolStructR [Who,Which,Whose]> MATCH (EERR): <EMPTY>
preambleBoolStructR [Who,Which,Whose]> ERROR:
preambleBoolStructR [Who,Which,Whose]> offset=23:
preambleBoolStructR [Who,Which,Whose]> unexpected MUST
preambleBoolStructR [Who,Which,Whose]> expecting WHICH, WHO, or WHOSE

******** \ !Unconsumed Error: preambleBoolStructR [Who,Which,Whose]: Unexpected MUST Expecting: WHO WHICH WHOSE  :5_1:Must:
manyIndentation/leaf?> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=23:
manyIndentation/leaf?> unexpected MUST
manyIndentation/leaf?> expecting WHICH, WHO, or WHOSE

******* \ !Unconsumed Error: manyIndentation/leaf?: Unexpected MUST Expecting: WHO WHICH WHOSE                    :5_1:Must:
******* / manyIndentation/deeper; calling someIndentation                                                         :5_1:Must:
******** / someIndentation                                                                                       :5_1:Must:
********* / myindented-GoDeeper                                                                                 :5_1:Must:
myindented-GoDeeper> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=23:
myindented-GoDeeper> unexpected MUST
myindented-GoDeeper> expecting (

********* \ !Unconsumed Error: myindented-GoDeeper: Unexpected MUST Expecting: (                                :5_1:Must:
someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=23:
someIndentation> unexpected MUST
someIndentation> expecting (

******** \ !Unconsumed Error: someIndentation: Unexpected MUST Expecting: (                                      :5_1:Must:
manyIndentation/deeper; calling someIndentation> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=23:
manyIndentation/deeper; calling someIndentation> unexpected MUST
manyIndentation/deeper; calling someIndentation> expecting (

******* \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected MUST Expecting: (        :5_1:Must:
******* / WHERE                                                                                                   :5_1:Must:
WHERE> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
WHERE> MATCH (EERR): <EMPTY>
WHERE> ERROR:
WHERE> offset=23:
WHERE> unexpected MUST
WHERE> expecting WHERE

******* \ !Unconsumed Error: WHERE: Unexpected MUST Expecting: WHERE                                              :5_1:Must:
******* / preambleParamText:[Having]                                                                              :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting HAVING

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: HAVING                                             :5_1:Must:
preambleParamText:[Having]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Having]> MATCH (EERR): <EMPTY>
preambleParamText:[Having]> ERROR:
preambleParamText:[Having]> offset=23:
preambleParamText:[Having]> unexpected MUST
preambleParamText:[Having]> expecting HAVING

******* \ !Unconsumed Error: preambleParamText:[Having]: Unexpected MUST Expecting: HAVING                        :5_1:Must:
******* / preambleParamText:[Given]                                                                               :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting GIVEN

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: GIVEN                                              :5_1:Must:
preambleParamText:[Given]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=23:
preambleParamText:[Given]> unexpected MUST
preambleParamText:[Given]> expecting GIVEN

******* \ !Unconsumed Error: preambleParamText:[Given]: Unexpected MUST Expecting: GIVEN                          :5_1:Must:
******* / preambleParamText:[Upon]                                                                                :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting UPON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: UPON                                               :5_1:Must:
preambleParamText:[Upon]> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=23:
preambleParamText:[Upon]> unexpected MUST
preambleParamText:[Upon]> expecting UPON

******* \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected MUST Expecting: UPON                            :5_1:Must:
******* / pTemporal/eventually                                                                                    :5_1:Must:
pTemporal/eventually> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/eventually> MATCH (EERR): <EMPTY>
pTemporal/eventually> ERROR:
pTemporal/eventually> offset=23:
pTemporal/eventually> unexpected MUST
pTemporal/eventually> expecting EVENTUALLY

******* \ !Unconsumed Error: pTemporal/eventually: Unexpected MUST Expecting: EVENTUALLY                          :5_1:Must:
******* / pTemporal/specifically                                                                                  :5_1:Must:
******** / $>|                                                                                                   :5_1:Must:
$>|> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=23:
$>|> unexpected MUST
$>|> expecting AFTER, BEFORE, BY, or ON

******** \ !Unconsumed Error: $>|: Unexpected MUST Expecting: BEFORE AFTER BY ON                                 :5_1:Must:
pTemporal/specifically> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/specifically> MATCH (EERR): <EMPTY>
pTemporal/specifically> ERROR:
pTemporal/specifically> offset=23:
pTemporal/specifically> unexpected MUST
pTemporal/specifically> expecting AFTER, BEFORE, BY, or ON

******* \ !Unconsumed Error: pTemporal/specifically: Unexpected MUST Expecting: BEFORE AFTER BY ON                :5_1:Must:
******* / pTemporal/vaguely                                                                                       :5_1:Must:
pTemporal/vaguely> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pTemporal/vaguely> MATCH (EERR): <EMPTY>
pTemporal/vaguely> ERROR:
pTemporal/vaguely> offset=23:
pTemporal/vaguely> unexpected MUST
pTemporal/vaguely> expecting Other text

******* \ !Unconsumed Error: pTemporal/vaguely: Unexpected MUST Expecting: Other text                             :5_1:Must:
******* / pDA                                                                                                     :5_1:Must:
******** / pAction calling pParamText                                                                             :5_2:GoDeeper:
********* / pParamText                                                                                           :5_2:GoDeeper:
********** / pParamText(flat) first line: pKeyValues                                                            :5_2:GoDeeper:
*********** / pKeyValuesAka                                                                                    :5_2:GoDeeper:
************ / slAKA                                                                                          :5_2:GoDeeper:
************* / $*|                                                                                          :5_2:GoDeeper:
************** / slAKA base                                                                                 :5_2:GoDeeper:
*************** / slKeyValues                                                                              :5_2:GoDeeper:
**************** / $*|                                                                                    :5_2:GoDeeper:
***************** / someSL                                                                               :5_2:GoDeeper:
****************** / pNumAsText                                                                         :5_2:GoDeeper:
pNumAsText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=24:
pNumAsText> unexpected (
pNumAsText> expecting number

****************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                      :5_2:GoDeeper:
someSL> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=24:
someSL> unexpected (
someSL> expecting other text or number

***************** \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number              :5_2:GoDeeper:
$*|> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected (
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                   :5_2:GoDeeper:
slKeyValues> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slKeyValues> MATCH (EERR): <EMPTY>
slKeyValues> ERROR:
slKeyValues> offset=24:
slKeyValues> unexpected (
slKeyValues> expecting other text or number

*************** \ !Unconsumed Error: slKeyValues: Unexpected ( Expecting: other text or number             :5_2:GoDeeper:
slAKA base> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=24:
slAKA base> unexpected (
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected ( Expecting: other text or number                :5_2:GoDeeper:
$*|> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=24:
$*|> unexpected (
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                         :5_2:GoDeeper:
slAKA> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=24:
slAKA> unexpected (
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected ( Expecting: other text or number                         :5_2:GoDeeper:
pKeyValuesAka> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pKeyValuesAka> MATCH (EERR): <EMPTY>
pKeyValuesAka> ERROR:
pKeyValuesAka> offset=24:
pKeyValuesAka> unexpected (
pKeyValuesAka> expecting other text or number

*********** \ !Unconsumed Error: pKeyValuesAka: Unexpected ( Expecting: other text or number                   :5_2:GoDeeper:
pParamText(flat) first line: pKeyValues> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pParamText(flat) first line: pKeyValues> MATCH (EERR): <EMPTY>
pParamText(flat) first line: pKeyValues> ERROR:
pParamText(flat) first line: pKeyValues> offset=24:
pParamText(flat) first line: pKeyValues> unexpected (
pParamText(flat) first line: pKeyValues> expecting other text or number

********** \ !Unconsumed Error: pParamText(flat) first line: pKeyValues: Unexpected ( Expecting: other text or number :5_2:GoDeeper:
pParamText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pParamText> MATCH (EERR): <EMPTY>
pParamText> ERROR:
pParamText> offset=24:
pParamText> unexpected (
pParamText> expecting other text or number

********* \ !Unconsumed Error: pParamText: Unexpected ( Expecting: other text or number                          :5_2:GoDeeper:
pAction calling pParamText> IN: ( ( BEFORE ( 3 ( "days" ) ) ) ) DO ( ( " <…>
pAction calling pParamText> MATCH (EERR): <EMPTY>
pAction calling pParamText> ERROR:
pAction calling pParamText> offset=24:
pAction calling pParamText> unexpected (
pAction calling pParamText> expecting other text or number

******** \ !Unconsumed Error: pAction calling pParamText: Unexpected ( Expecting: other text or number            :5_2:GoDeeper:
pDA> IN: MUST ( ( BEFORE ( 3 ( "days" ) ) ) ) DO  <…>
pDA> MATCH (CERR): MUST
pDA> ERROR:
pDA> offset=24:
pDA> unexpected (
pDA> expecting other text or number

******* \ !Consumed Error: pDA: Unexpected ( Expecting: other text or number                                       :5_2:GoDeeper:
regulative permutation with deontic-action> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-action> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
regulative permutation with deontic-action> ERROR:
regulative permutation with deontic-action> offset=24:
regulative permutation with deontic-action> unexpected (
regulative permutation with deontic-action> expecting (, WHICH, WHO, WHOSE, or other text or number

****** \ !Consumed Error: regulative permutation with deontic-action: Unexpected ( Expecting: ( WHO WHICH WHOSE other text or number :5_1:Must:
permutationsReg> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
permutationsReg> MATCH (EERR): <EMPTY>
permutationsReg> ERROR:
permutationsReg> offset=36:
permutationsReg> unexpected (
permutationsReg> expecting other text or number

***** \ !Unconsumed Error: permutationsReg: Unexpected ( Expecting: other text or number                            :2_1:If:
pRegRuleNormal> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pRegRuleNormal> MATCH (EERR): <EMPTY>
pRegRuleNormal> ERROR:
pRegRuleNormal> offset=36:
pRegRuleNormal> unexpected (
pRegRuleNormal> expecting other text or number

**** \ !Unconsumed Error: pRegRuleNormal: Unexpected ( Expecting: other text or number                               :2_1:If:
pRegRule> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRegRule> MATCH (EERR): §§ ( "Notify Individuals" )
pRegRule> ERROR:
pRegRule> offset=36:
pRegRule> unexpected (
pRegRule> expecting end of input or other text or number

*** \ !Unconsumed Error: pRegRule: Unexpected ( Expecting: other text or number end of input                          :2_1:If:
*** / pTypeDefinition                                                                                                 :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Notify Individuals" Expecting: (                                :1_2:Other "Noti:
****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* / |.| manyLike                                                                                              :1_2:Other "Noti:
******** / someSL                                                                                                  :1_2:Other "Noti:
someSL> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
someSL> MATCH (COK): "Notify Individuals"
someSL> VALUE: ((["Notify Individuals"],0),[])

******** \ someSL has returned (["Notify Individuals"],0)                                                           :2_2:UnDeeper:
|.| manyLike> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|.| manyLike> MATCH (COK): "Notify Individuals"
|.| manyLike> VALUE: ((["Notify Individuals"],0),[])

******* \ |.| manyLike has returned (["Notify Individuals"],0)                                                       :2_2:UnDeeper:
******* > |>>/base got "Notify Individuals"                                                                          :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

****** \ |>>/base has returned ("Notify Individuals",0)                                                               :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

***** \ |>>/recurse has returned ("Notify Individuals",1)                                                              :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:If:
upToNUndeepers/done> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:If:
upToNUndeepers/undeeper> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / pHornlike/uponLimb                                                                                            :2_1:If:
***** / preambleParamText:[Upon]                                                                                    :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting UPON

****** \ !Unconsumed Error: $>|: Unexpected IF Expecting: UPON                                                     :2_1:If:
preambleParamText:[Upon]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=4:
preambleParamText:[Upon]> unexpected IF
preambleParamText:[Upon]> expecting UPON

***** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected IF Expecting: UPON                                  :2_1:If:
pHornlike/uponLimb> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=4:
pHornlike/uponLimb> unexpected IF
pHornlike/uponLimb> expecting UPON

**** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected IF Expecting: UPON                                          :2_1:If:
**** / pHornlike/givenLimb                                                                                           :2_1:If:
***** / preambleParamText:[Given]                                                                                   :2_1:If:
****** / $>|                                                                                                       :2_1:If:
$>|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=4:
$>|> unexpected IF
$>|> expecting GIVEN

****** \ !Unconsumed Error: $>|: Unexpected IF Expecting: GIVEN                                                    :2_1:If:
preambleParamText:[Given]> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=4:
preambleParamText:[Given]> unexpected IF
preambleParamText:[Given]> expecting GIVEN

***** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected IF Expecting: GIVEN                                :2_1:If:
pHornlike/givenLimb> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=4:
pHornlike/givenLimb> unexpected IF
pHornlike/givenLimb> expecting GIVEN

**** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected IF Expecting: GIVEN                                        :2_1:If:
pTypeDefinition> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pTypeDefinition> MATCH (EERR): §§ ( "Notify Individuals" )
pTypeDefinition> ERROR:
pTypeDefinition> offset=4:
pTypeDefinition> unexpected IF
pTypeDefinition> expecting DEFINE, GIVEN, UPON, or end of input

*** \ !Unconsumed Error: pTypeDefinition: Unexpected IF Expecting: GIVEN UPON DEFINE end of input                     :2_1:If:
*** / pConstitutiveRule                                                                                               :1_1:RuleMarker:
**** / pRuleLabel                                                                                                    :1_1:RuleMarker:
***** / $>|                                                                                                         :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

***** \ $>| has returned RuleMarker 2 "\167"                                                                         :1_2:GoDeeper:
***** / |>>/recurse                                                                                                  :1_2:GoDeeper:
****** / |>>/recurse                                                                                                 :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

****** \ !Unconsumed Error: |>>/recurse: Unexpected "Notify Individuals" Expecting: (                                :1_2:Other "Noti:
****** / |>>/base                                                                                                    :1_2:Other "Noti:
******* / |.| manyLike                                                                                              :1_2:Other "Noti:
******** / someSL                                                                                                  :1_2:Other "Noti:
someSL> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
someSL> MATCH (COK): "Notify Individuals"
someSL> VALUE: ((["Notify Individuals"],0),[])

******** \ someSL has returned (["Notify Individuals"],0)                                                           :2_2:UnDeeper:
|.| manyLike> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|.| manyLike> MATCH (COK): "Notify Individuals"
|.| manyLike> VALUE: ((["Notify Individuals"],0),[])

******* \ |.| manyLike has returned (["Notify Individuals"],0)                                                       :2_2:UnDeeper:
******* > |>>/base got "Notify Individuals"                                                                          :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

****** \ |>>/base has returned ("Notify Individuals",0)                                                               :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

***** \ |>>/recurse has returned ("Notify Individuals",1)                                                              :2_2:UnDeeper:
***** / upToNUndeepers/undeeper                                                                                        :2_2:UnDeeper:
****** / upToNUndeepers/done                                                                                       :2_1:If:
upToNUndeepers/done> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

****** \ upToNUndeepers/done has returned ((),0)                                                                   :2_1:If:
upToNUndeepers/undeeper> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

***** \ upToNUndeepers/undeeper has returned ((),-1)                                                                :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

**** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                       :2_1:If:
**** / calling myindented pNameParens                                                                                :2_1:If:
***** / manyIndentation/leaf?                                                                                       :2_1:If:
****** / pMultiTermAka                                                                                             :2_1:If:
******* / pAKA                                                                                                    :2_1:If:
******** / slAKA                                                                                                 :2_1:If:
********* / $*|                                                                                                 :2_1:If:
********** / slAKA base                                                                                        :2_1:If:
*********** / slMultiTerm                                                                                     :2_1:If:
************ / someSL                                                                                        :2_1:If:
************* / pNumAsText                                                                                  :2_1:If:
pNumAsText> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=4:
pNumAsText> unexpected IF
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected IF Expecting: number                              :2_1:If:
someSL> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=4:
someSL> unexpected IF
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected IF Expecting: other text or number                      :2_1:If:
slMultiTerm> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=4:
slMultiTerm> unexpected IF
slMultiTerm> expecting other text or number

*********** \ !Unconsumed Error: slMultiTerm: Unexpected IF Expecting: other text or number                   :2_1:If:
slAKA base> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=4:
slAKA base> unexpected IF
slAKA base> expecting other text or number

********** \ !Unconsumed Error: slAKA base: Unexpected IF Expecting: other text or number                      :2_1:If:
$*|> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=4:
$*|> unexpected IF
$*|> expecting other text or number

********* \ !Unconsumed Error: $*|: Unexpected IF Expecting: other text or number                               :2_1:If:
slAKA> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=4:
slAKA> unexpected IF
slAKA> expecting other text or number

******** \ !Unconsumed Error: slAKA: Unexpected IF Expecting: other text or number                               :2_1:If:
pAKA> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pAKA> MATCH (EERR): <EMPTY>
pAKA> ERROR:
pAKA> offset=4:
pAKA> unexpected IF
pAKA> expecting other text or number

******* \ !Unconsumed Error: pAKA: Unexpected IF Expecting: other text or number                                  :2_1:If:
pMultiTermAka> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pMultiTermAka> MATCH (EERR): <EMPTY>
pMultiTermAka> ERROR:
pMultiTermAka> offset=4:
pMultiTermAka> unexpected IF
pMultiTermAka> expecting other text or number

****** \ !Unconsumed Error: pMultiTermAka: Unexpected IF Expecting: other text or number                           :2_1:If:
manyIndentation/leaf?> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=4:
manyIndentation/leaf?> unexpected IF
manyIndentation/leaf?> expecting other text or number

***** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected IF Expecting: other text or number                     :2_1:If:
***** / manyIndentation/deeper; calling someIndentation                                                             :2_1:If:
****** / someIndentation                                                                                           :2_1:If:
******* / myindented-GoDeeper                                                                                     :2_1:If:
myindented-GoDeeper> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=4:
myindented-GoDeeper> unexpected IF
myindented-GoDeeper> expecting (

******* \ !Unconsumed Error: myindented-GoDeeper: Unexpected IF Expecting: (                                      :2_1:If:
someIndentation> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=4:
someIndentation> unexpected IF
someIndentation> expecting (

****** \ !Unconsumed Error: someIndentation: Unexpected IF Expecting: (                                            :2_1:If:
manyIndentation/deeper; calling someIndentation> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=4:
manyIndentation/deeper; calling someIndentation> unexpected IF
manyIndentation/deeper; calling someIndentation> expecting (

***** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected IF Expecting: (              :2_1:If:
calling myindented pNameParens> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
calling myindented pNameParens> MATCH (EERR): <EMPTY>
calling myindented pNameParens> ERROR:
calling myindented pNameParens> offset=4:
calling myindented pNameParens> unexpected IF
calling myindented pNameParens> expecting ( or other text or number

**** \ !Unconsumed Error: calling myindented pNameParens: Unexpected IF Expecting: ( other text or number            :2_1:If:
pConstitutiveRule> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pConstitutiveRule> MATCH (EERR): §§ ( "Notify Individuals" )
pConstitutiveRule> ERROR:
pConstitutiveRule> offset=4:
pConstitutiveRule> unexpected IF
pConstitutiveRule> expecting (, end of input, or other text or number

*** \ !Unconsumed Error: pConstitutiveRule: Unexpected IF Expecting: ( other text or number end of input              :2_1:If:
*** / pScenarioRule                                                                                                   :1_1:RuleMarker:
pScenarioRule> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pScenarioRule> MATCH (EERR): <EMPTY>
pScenarioRule> ERROR:
pScenarioRule> offset=0:
pScenarioRule> unexpected §§
pScenarioRule> expecting SCENARIO

*** \ !Unconsumed Error: pScenarioRule: Unexpected §§ Expecting: SCENARIO                                           :1_1:RuleMarker:
*** / pHornlike                                                                                                       :1_1:RuleMarker:
**** / pSrcRef                                                                                                       :1_1:RuleMarker:
***** / pRuleLabel                                                                                                  :1_1:RuleMarker:
****** / $>|                                                                                                       :1_1:RuleMarker:
$>|> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
$>|> MATCH (COK): §§
$>|> VALUE: (RuleMarker 2 "\167",[])

****** \ $>| has returned RuleMarker 2 "\167"                                                                       :1_2:GoDeeper:
****** / |>>/recurse                                                                                                :1_2:GoDeeper:
******* / |>>/recurse                                                                                               :1_2:Other "Noti:
|>>/recurse> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=2:
|>>/recurse> unexpected "Notify Individuals"
|>>/recurse> expecting (

******* \ !Unconsumed Error: |>>/recurse: Unexpected "Notify Individuals" Expecting: (                              :1_2:Other "Noti:
******* / |>>/base                                                                                                  :1_2:Other "Noti:
******** / |.| manyLike                                                                                            :1_2:Other "Noti:
********* / someSL                                                                                                :1_2:Other "Noti:
someSL> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
someSL> MATCH (COK): "Notify Individuals"
someSL> VALUE: ((["Notify Individuals"],0),[])

********* \ someSL has returned (["Notify Individuals"],0)                                                         :2_2:UnDeeper:
|.| manyLike> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|.| manyLike> MATCH (COK): "Notify Individuals"
|.| manyLike> VALUE: ((["Notify Individuals"],0),[])

******** \ |.| manyLike has returned (["Notify Individuals"],0)                                                     :2_2:UnDeeper:
******** > |>>/base got "Notify Individuals"                                                                        :2_2:UnDeeper:
|>>/base> IN: "Notify Individuals" ) IF ( ( "it is" (  <…>
|>>/base> MATCH (COK): "Notify Individuals"
|>>/base> VALUE: (("Notify Individuals",0),[])

******* \ |>>/base has returned ("Notify Individuals",0)                                                             :2_2:UnDeeper:
|>>/recurse> IN: ( "Notify Individuals" ) IF ( ( "it is"  <…>
|>>/recurse> MATCH (COK): ( "Notify Individuals"
|>>/recurse> VALUE: (("Notify Individuals",1),[])

****** \ |>>/recurse has returned ("Notify Individuals",1)                                                            :2_2:UnDeeper:
****** / upToNUndeepers/undeeper                                                                                      :2_2:UnDeeper:
******* / upToNUndeepers/done                                                                                     :2_1:If:
upToNUndeepers/done> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
upToNUndeepers/done> MATCH (EOK): <EMPTY>
upToNUndeepers/done> VALUE: (((),0),[])

******* \ upToNUndeepers/done has returned ((),0)                                                                 :2_1:If:
upToNUndeepers/undeeper> IN: ) IF ( ( "it is" ( "an NDB" ) ) ) UNLESS <…>
upToNUndeepers/undeeper> MATCH (COK): )
upToNUndeepers/undeeper> VALUE: (((),-1),[])

****** \ upToNUndeepers/undeeper has returned ((),-1)                                                              :2_1:If:
pRuleLabel> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRuleLabel> MATCH (EOK): §§ ( "Notify Individuals" )
pRuleLabel> VALUE: (("\167",2,"Notify Individuals"),[])

***** \ pRuleLabel has returned ("\167",2,"Notify Individuals")                                                     :2_1:If:
pSrcRef> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pSrcRef> MATCH (EOK): §§ ( "Notify Individuals" )
pSrcRef> VALUE: ((Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})),[])

**** \ pSrcRef has returned (Just ("\167",2,"Notify Individuals"),Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 2, version = Nothing})) :2_1:If:
**** / pHornlike / permute                                                                                           :2_1:If:
***** / whenCase                                                                                                    :2_1:If:
****** / whenMeansIf                                                                                               :2_1:If:
whenMeansIf> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
whenMeansIf> MATCH (COK): IF
whenMeansIf> VALUE: (If,[])

****** \ whenMeansIf has returned If                                                                                :2_2:GoDeeper:
****** / pBSR                                                                                                       :2_2:GoDeeper:
******* / ppp inner                                                                                                :2_2:GoDeeper:
******** / expression                                                                                             :2_2:GoDeeper:
********* / termIndent p                                                                                         :2_2:GoDeeper:
********** / term p/1a:label ends directly above next line                                                      :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :2_2:GoDeeper:
term p/1a:label ends directly above next line> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=5:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

********** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
********** / term p/1b:label ends to the left of line below, with EOL                                           :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :2_2:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=5:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

********** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
********** / term p/1c:label ends to the right of line below                                                    :2_2:GoDeeper:
*********** > |<|                                                                                              :2_2:GoDeeper:
*********** > |<* starting                                                                                     :2_2:GoDeeper:
*********** / $*|                                                                                              :2_2:GoDeeper:
************ / someSL                                                                                         :2_2:GoDeeper:
************* / pNumAsText                                                                                   :2_2:GoDeeper:
pNumAsText> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=5:
pNumAsText> unexpected (
pNumAsText> expecting number

************* \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                                :2_2:GoDeeper:
someSL> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=5:
someSL> unexpected (
someSL> expecting other text or number

************ \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number                        :2_2:GoDeeper:
$*|> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=5:
$*|> unexpected (
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                             :2_2:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=5:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

********** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_2:GoDeeper:
********** / term p/notLabelTerm                                                                                :2_2:GoDeeper:
*********** / term p/2:someIndentation expr p                                                                  :2_2:GoDeeper:
************ / someIndentation                                                                                :2_2:GoDeeper:
************* / myindented-GoDeeper                                                                          :2_2:GoDeeper:
myindented-GoDeeper> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

************* \ myindented-GoDeeper has returned GoDeeper                                                      :2_3:GoDeeper:
************* / manyIndentation/leaf?                                                                          :2_3:GoDeeper:
************** / ppp inner                                                                                    :2_3:GoDeeper:
*************** / expression                                                                                 :2_3:GoDeeper:
**************** / termIndent p                                                                             :2_3:GoDeeper:
***************** / term p/1a:label ends directly above next line                                          :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                    :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number            :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                 :2_3:GoDeeper:
term p/1a:label ends directly above next line> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=6:
term p/1a:label ends directly above next line> unexpected (
term p/1a:label ends directly above next line> expecting other text or number

***************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
***************** / term p/1b:label ends to the left of line below, with EOL                               :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                    :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number            :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                 :2_3:GoDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=6:
term p/1b:label ends to the left of line below, with EOL> unexpected (
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
***************** / term p/1c:label ends to the right of line below                                        :2_3:GoDeeper:
****************** > |<|                                                                                  :2_3:GoDeeper:
****************** > |<* starting                                                                         :2_3:GoDeeper:
****************** / $*|                                                                                  :2_3:GoDeeper:
******************* / someSL                                                                             :2_3:GoDeeper:
******************** / pNumAsText                                                                       :2_3:GoDeeper:
pNumAsText> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=6:
pNumAsText> unexpected (
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected ( Expecting: number                    :2_3:GoDeeper:
someSL> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=6:
someSL> unexpected (
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected ( Expecting: other text or number            :2_3:GoDeeper:
$*|> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=6:
$*|> unexpected (
$*|> expecting other text or number

****************** \ !Unconsumed Error: $*|: Unexpected ( Expecting: other text or number                 :2_3:GoDeeper:
term p/1c:label ends to the right of line below> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=6:
term p/1c:label ends to the right of line below> unexpected (
term p/1c:label ends to the right of line below> expecting other text or number

***************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ( Expecting: other text or number :2_3:GoDeeper:
***************** / term p/notLabelTerm                                                                    :2_3:GoDeeper:
****************** / term p/2:someIndentation expr p                                                      :2_3:GoDeeper:
******************* / someIndentation                                                                    :2_3:GoDeeper:
******************** / myindented-GoDeeper                                                              :2_3:GoDeeper:
myindented-GoDeeper> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
myindented-GoDeeper> MATCH (COK): (
myindented-GoDeeper> VALUE: (GoDeeper,[])

******************** \ myindented-GoDeeper has returned GoDeeper                                         :2_3:Other "it i:
******************** / manyIndentation/leaf?                                                             :2_3:Other "it i:
********************* / ppp inner                                                                       :2_3:Other "it i:
********************** / expression                                                                    :2_3:Other "it i:
*********************** / termIndent p                                                                :2_3:Other "it i:
************************ / term p/1a:label ends directly above next line                             :2_3:Other "it i:
************************* / $*|                                                                     :2_3:Other "it i:
************************** / someSL                                                                :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************************** \ someSL has returned (["it is","an NDB"],1)                           :3_2:UnDeeper:
************************** / pNumAsText                                                           :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number        :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (CERR): "it is" ( "an NDB"
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or other text or number

************************* \ !Consumed Error: $*|: Unexpected ) Expecting: ( other text or number   :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1a:label ends directly above next line> MATCH (CERR): "it is" ( "an NDB"
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting ( or other text or number

************************ \ !Consumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: ( other text or number :3_2:UnDeeper:
************************ / term p/1b:label ends to the left of line below, with EOL                  :2_3:Other "it i:
************************* / $*|                                                                     :2_3:Other "it i:
************************** / someSL                                                                :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************************** \ someSL has returned (["it is","an NDB"],1)                           :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

************************* \ $*| has returned (["it is","an NDB"],1)                                :3_2:UnDeeper:
************************* / matching EOL                                                           :3_2:UnDeeper:
matching EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
matching EOL> MATCH (EERR): <EMPTY>
matching EOL> ERROR:
matching EOL> offset=10:
matching EOL> unexpected )
matching EOL> expecting EOL

************************* \ !Unconsumed Error: matching EOL: Unexpected ) Expecting: EOL           :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (CERR): "it is" ( "an NDB"
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting ( or EOL

************************ \ !Consumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: EOL ( :3_2:UnDeeper:
************************ / term p/1c:label ends to the right of line below                           :2_3:Other "it i:
************************* > |<|                                                                     :2_3:Other "it i:
************************* > |<* starting                                                            :2_3:Other "it i:
************************* / $*|                                                                     :2_3:Other "it i:
************************** / someSL                                                                :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

************************** \ someSL has returned (["it is","an NDB"],1)                           :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

************************* \ $*| has returned (["it is","an NDB"],1)                                :3_2:UnDeeper:
************************* / |<*/parent                                                             :3_2:UnDeeper:
************************** > |<*/recurse                                                          :3_2:UnDeeper:
************************** / ppp inner                                                         :3_1:Unless:
*************************** / expression                                                      :3_1:Unless:
**************************** / termIndent p                                                  :3_1:Unless:
***************************** / term p/1a:label ends directly above next line               :3_1:Unless:
****************************** / $*|                                                       :3_1:Unless:
******************************* / someSL                                                  :3_1:Unless:
******************************** / pNumAsText                                            :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1a:label ends directly above next line> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=13:
term p/1a:label ends directly above next line> unexpected UNLESS
term p/1a:label ends directly above next line> expecting other text or number

***************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
***************************** / term p/1b:label ends to the left of line below, with EOL    :3_1:Unless:
****************************** / $*|                                                       :3_1:Unless:
******************************* / someSL                                                  :3_1:Unless:
******************************** / pNumAsText                                            :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1b:label ends to the left of line below, with EOL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=13:
term p/1b:label ends to the left of line below, with EOL> unexpected UNLESS
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

***************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
***************************** / term p/1c:label ends to the right of line below             :3_1:Unless:
****************************** > |<|                                                       :3_1:Unless:
****************************** > |<* starting                                              :3_1:Unless:
****************************** / $*|                                                       :3_1:Unless:
******************************* / someSL                                                  :3_1:Unless:
******************************** / pNumAsText                                            :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

****************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/1c:label ends to the right of line below> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting other text or number

***************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
***************************** / term p/notLabelTerm                                         :3_1:Unless:
****************************** / term p/2:someIndentation expr p                           :3_1:Unless:
******************************* / someIndentation                                         :3_1:Unless:
******************************** / myindented-GoDeeper                                   :3_1:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

******************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: ( :3_1:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

******************************* \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: ( :3_1:Unless:
term p/2:someIndentation expr p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=13:
term p/2:someIndentation expr p> unexpected UNLESS
term p/2:someIndentation expr p> expecting (

****************************** \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected UNLESS Expecting: ( :3_1:Unless:
****************************** / term p/3:plain p                                          :3_1:Unless:
******************************* / pRelPred                                                :3_1:Unless:
******************************** / slRelPred                                             :3_1:Unless:
********************************* / nested simpleHorn                                   :3_1:Unless:
********************************** > |^|                                               :3_1:Unless:
********************************** / $*|                                               :3_1:Unless:
*********************************** / slMultiTerm                                     :3_1:Unless:
************************************ / someSL                                        :3_1:Unless:
************************************* / pNumAsText                                  :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********************************* \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
********************************* / RPConstraint                                        :3_1:Unless:
********************************** / $*|                                               :3_1:Unless:
*********************************** / slMultiTerm                                     :3_1:Unless:
************************************ / someSL                                        :3_1:Unless:
************************************* / pNumAsText                                  :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********************************* \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
********************************* / RPBoolStructR                                       :3_1:Unless:
********************************** / $*|                                               :3_1:Unless:
*********************************** / slMultiTerm                                     :3_1:Unless:
************************************ / someSL                                        :3_1:Unless:
************************************* / pNumAsText                                  :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************************************* \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************************************ \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*********************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********************************* \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
********************************* / RPMT                                                :3_1:Unless:
********************************** / $*|                                               :3_1:Unless:
*********************************** / slAKA                                           :3_1:Unless:
************************************ / $*|                                           :3_1:Unless:
************************************* / slAKA base                                  :3_1:Unless:
************************************** / slMultiTerm                               :3_1:Unless:
*************************************** / someSL                                  :3_1:Unless:
**************************************** / pNumAsText                            :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

**************************************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

*************************************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************************************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

************************************* \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************************************ \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

*********************************** \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

********************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

********************************* \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

******************************** \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

******************************* \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/3:plain p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=13:
term p/3:plain p> unexpected UNLESS
term p/3:plain p> expecting other text or number

****************************** \ !Unconsumed Error: term p/3:plain p: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
term p/notLabelTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=13:
term p/notLabelTerm> unexpected UNLESS
term p/notLabelTerm> expecting ( or term

***************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected UNLESS Expecting: ( term :3_1:Unless:
termIndent p> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=13:
termIndent p> unexpected UNLESS
termIndent p> expecting (, other text or number, or term

**************************** \ !Unconsumed Error: termIndent p: Unexpected UNLESS Expecting: ( other text or number term :3_1:Unless:
expression> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=13:
expression> unexpected UNLESS
expression> expecting expression

*************************** \ !Unconsumed Error: expression: Unexpected UNLESS Expecting: expression :3_1:Unless:
ppp inner> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=13:
ppp inner> unexpected UNLESS
ppp inner> expecting expression

************************** \ !Unconsumed Error: ppp inner: Unexpected UNLESS Expecting: expression :3_1:Unless:
************************** / withPrePost                                                       :3_1:Unless:
*************************** > |<* starting                                                    :3_1:Unless:
*************************** / $*|                                                             :3_1:Unless:
**************************** / pre part                                                      :3_1:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

**************************** \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

*************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
withPrePost> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=13:
withPrePost> unexpected UNLESS
withPrePost> expecting ( or Other text

************************** \ !Unconsumed Error: withPrePost: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
************************** / $*|                                                               :3_1:Unless:
*************************** / pre part                                                        :3_1:Unless:
pre part> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=13:
pre part> unexpected UNLESS
pre part> expecting ( or Other text

*************************** \ !Unconsumed Error: pre part: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting ( or Other text

************************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: ( Other text :3_1:Unless:
************************** / |<*/base                                                             :3_2:UnDeeper:
*************************** / ppp inner                                                          :3_2:UnDeeper:
**************************** / expression                                                       :3_2:UnDeeper:
***************************** / termIndent p                                                   :3_2:UnDeeper:
****************************** / term p/1a:label ends directly above next line                :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / someSL                                                   :3_2:UnDeeper:
********************************* / pNumAsText                                             :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1a:label ends directly above next line> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1a:label ends directly above next line> MATCH (EERR): <EMPTY>
term p/1a:label ends directly above next line> ERROR:
term p/1a:label ends directly above next line> offset=10:
term p/1a:label ends directly above next line> unexpected )
term p/1a:label ends directly above next line> expecting other text or number

****************************** \ !Unconsumed Error: term p/1a:label ends directly above next line: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / term p/1b:label ends to the left of line below, with EOL     :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / someSL                                                   :3_2:UnDeeper:
********************************* / pNumAsText                                             :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1b:label ends to the left of line below, with EOL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1b:label ends to the left of line below, with EOL> MATCH (EERR): <EMPTY>
term p/1b:label ends to the left of line below, with EOL> ERROR:
term p/1b:label ends to the left of line below, with EOL> offset=10:
term p/1b:label ends to the left of line below, with EOL> unexpected )
term p/1b:label ends to the left of line below, with EOL> expecting other text or number

****************************** \ !Unconsumed Error: term p/1b:label ends to the left of line below, with EOL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / term p/1c:label ends to the right of line below              :3_2:UnDeeper:
******************************* > |<|                                                        :3_2:UnDeeper:
******************************* > |<* starting                                               :3_2:UnDeeper:
******************************* / $*|                                                        :3_2:UnDeeper:
******************************** / someSL                                                   :3_2:UnDeeper:
********************************* / pNumAsText                                             :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

********************************* \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

******************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

******************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/1c:label ends to the right of line below> MATCH (EERR): <EMPTY>
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=10:
term p/1c:label ends to the right of line below> unexpected )
term p/1c:label ends to the right of line below> expecting other text or number

****************************** \ !Unconsumed Error: term p/1c:label ends to the right of line below: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
****************************** / term p/notLabelTerm                                          :3_2:UnDeeper:
******************************* / term p/2:someIndentation expr p                            :3_2:UnDeeper:
******************************** / someIndentation                                          :3_2:UnDeeper:
********************************* / myindented-GoDeeper                                    :3_2:UnDeeper:
myindented-GoDeeper> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=10:
myindented-GoDeeper> unexpected )
myindented-GoDeeper> expecting (

********************************* \ !Unconsumed Error: myindented-GoDeeper: Unexpected ) Expecting: ( :3_2:UnDeeper:
someIndentation> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=10:
someIndentation> unexpected )
someIndentation> expecting (

******************************** \ !Unconsumed Error: someIndentation: Unexpected ) Expecting: ( :3_2:UnDeeper:
term p/2:someIndentation expr p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=10:
term p/2:someIndentation expr p> unexpected )
term p/2:someIndentation expr p> expecting (

******************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected ) Expecting: ( :3_2:UnDeeper:
******************************* / term p/3:plain p                                           :3_2:UnDeeper:
******************************** / pRelPred                                                 :3_2:UnDeeper:
********************************* / slRelPred                                              :3_2:UnDeeper:
********************************** / nested simpleHorn                                    :3_2:UnDeeper:
*********************************** > |^|                                                :3_2:UnDeeper:
*********************************** / $*|                                                :3_2:UnDeeper:
************************************ / slMultiTerm                                      :3_2:UnDeeper:
************************************* / someSL                                         :3_2:UnDeeper:
************************************** / pNumAsText                                   :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
nested simpleHorn> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=10:
nested simpleHorn> unexpected )
nested simpleHorn> expecting other text or number

********************************** \ !Unconsumed Error: nested simpleHorn: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
********************************** / RPConstraint                                         :3_2:UnDeeper:
*********************************** / $*|                                                :3_2:UnDeeper:
************************************ / slMultiTerm                                      :3_2:UnDeeper:
************************************* / someSL                                         :3_2:UnDeeper:
************************************** / pNumAsText                                   :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPConstraint> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting other text or number

********************************** \ !Unconsumed Error: RPConstraint: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
********************************** / RPBoolStructR                                        :3_2:UnDeeper:
*********************************** / $*|                                                :3_2:UnDeeper:
************************************ / slMultiTerm                                      :3_2:UnDeeper:
************************************* / someSL                                         :3_2:UnDeeper:
************************************** / pNumAsText                                   :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

************************************* \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

************************************ \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPBoolStructR> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting other text or number

********************************** \ !Unconsumed Error: RPBoolStructR: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
********************************** / RPMT                                                 :3_2:UnDeeper:
*********************************** / $*|                                                :3_2:UnDeeper:
************************************ / slAKA                                            :3_2:UnDeeper:
************************************* / $*|                                            :3_2:UnDeeper:
************************************** / slAKA base                                   :3_2:UnDeeper:
*************************************** / slMultiTerm                                :3_2:UnDeeper:
**************************************** / someSL                                   :3_2:UnDeeper:
***************************************** / pNumAsText                             :3_2:UnDeeper:
pNumAsText> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=10:
pNumAsText> unexpected )
pNumAsText> expecting number

***************************************** \ !Unconsumed Error: pNumAsText: Unexpected ) Expecting: number :3_2:UnDeeper:
someSL> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=10:
someSL> unexpected )
someSL> expecting other text or number

**************************************** \ !Unconsumed Error: someSL: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slMultiTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=10:
slMultiTerm> unexpected )
slMultiTerm> expecting other text or number

*************************************** \ !Unconsumed Error: slMultiTerm: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=10:
slAKA base> unexpected )
slAKA base> expecting other text or number

************************************** \ !Unconsumed Error: slAKA base: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

************************************* \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slAKA> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=10:
slAKA> unexpected )
slAKA> expecting other text or number

************************************ \ !Unconsumed Error: slAKA: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting other text or number

*********************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
RPMT> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=10:
RPMT> unexpected )
RPMT> expecting other text or number

********************************** \ !Unconsumed Error: RPMT: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
slRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=10:
slRelPred> unexpected )
slRelPred> expecting other text or number

********************************* \ !Unconsumed Error: slRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
pRelPred> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=10:
pRelPred> unexpected )
pRelPred> expecting other text or number

******************************** \ !Unconsumed Error: pRelPred: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/3:plain p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/3:plain p> MATCH (EERR): <EMPTY>
term p/3:plain p> ERROR:
term p/3:plain p> offset=10:
term p/3:plain p> unexpected )
term p/3:plain p> expecting other text or number

******************************* \ !Unconsumed Error: term p/3:plain p: Unexpected ) Expecting: other text or number :3_2:UnDeeper:
term p/notLabelTerm> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
term p/notLabelTerm> MATCH (EERR): <EMPTY>
term p/notLabelTerm> ERROR:
term p/notLabelTerm> offset=10:
term p/notLabelTerm> unexpected )
term p/notLabelTerm> expecting ( or term

****************************** \ !Unconsumed Error: term p/notLabelTerm: Unexpected ) Expecting: ( term :3_2:UnDeeper:
termIndent p> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
termIndent p> MATCH (EERR): <EMPTY>
termIndent p> ERROR:
termIndent p> offset=10:
termIndent p> unexpected )
termIndent p> expecting (, other text or number, or term

***************************** \ !Unconsumed Error: termIndent p: Unexpected ) Expecting: ( other text or number term :3_2:UnDeeper:
expression> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
expression> MATCH (EERR): <EMPTY>
expression> ERROR:
expression> offset=10:
expression> unexpected )
expression> expecting expression

**************************** \ !Unconsumed Error: expression: Unexpected ) Expecting: expression :3_2:UnDeeper:
ppp inner> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
ppp inner> MATCH (EERR): <EMPTY>
ppp inner> ERROR:
ppp inner> offset=10:
ppp inner> unexpected )
ppp inner> expecting expression

*************************** \ !Unconsumed Error: ppp inner: Unexpected ) Expecting: expression   :3_2:UnDeeper:
*************************** / withPrePost                                                        :3_2:UnDeeper:
**************************** > |<* starting                                                     :3_2:UnDeeper:
**************************** / $*|                                                              :3_2:UnDeeper:
***************************** / pre part                                                       :3_2:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=10:
pre part> unexpected )
pre part> expecting ( or Other text

***************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or Other text

**************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text     :3_2:UnDeeper:
withPrePost> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
withPrePost> MATCH (EERR): <EMPTY>
withPrePost> ERROR:
withPrePost> offset=10:
withPrePost> unexpected )
withPrePost> expecting ( or Other text

*************************** \ !Unconsumed Error: withPrePost: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
*************************** / $*|                                                                :3_2:UnDeeper:
**************************** / pre part                                                         :3_2:UnDeeper:
pre part> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
pre part> MATCH (EERR): <EMPTY>
pre part> ERROR:
pre part> offset=10:
pre part> unexpected )
pre part> expecting ( or Other text

**************************** \ !Unconsumed Error: pre part: Unexpected ) Expecting: ( Other text :3_2:UnDeeper:
$*|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=10:
$*|> unexpected )
$*|> expecting ( or Other text

*************************** \ !Unconsumed Error: $*|: Unexpected ) Expecting: ( Other text       :3_2:UnDeeper:
|<*/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/base> MATCH (EERR): <EMPTY>
|<*/base> ERROR:
|<*/base> offset=10:
|<*/base> unexpected )
|<*/base> expecting (, Other text, or expression

************************** \ !Unconsumed Error: |<*/base: Unexpected ) Expecting: ( ( Other text expression :3_2:UnDeeper:
|<*/parent> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|<*/parent> MATCH (EERR): <EMPTY>
|<*/parent> ERROR:
|<*/parent> offset=13:
|<*/parent> unexpected UNLESS
|<*/parent> expecting (, ), Other text, or expression

************************* \ !Unconsumed Error: |<*/parent: Unexpected UNLESS Expecting: ( ( ) Other text expression :3_2:UnDeeper:
term p/1c:label ends to the right of line below> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/1c:label ends to the right of line below> MATCH (CERR): "it is" ( "an NDB"
term p/1c:label ends to the right of line below> ERROR:
term p/1c:label ends to the right of line below> offset=13:
term p/1c:label ends to the right of line below> unexpected UNLESS
term p/1c:label ends to the right of line below> expecting (, ), Other text, or expression

************************ \ !Consumed Error: term p/1c:label ends to the right of line below: Unexpected UNLESS Expecting: ( ( ( ) Other text expression :3_2:UnDeeper:
************************ / term p/notLabelTerm                                                       :2_3:Other "it i:
************************* / term p/2:someIndentation expr p                                         :2_3:Other "it i:
************************** / someIndentation                                                       :2_3:Other "it i:
*************************** / myindented-GoDeeper                                                 :2_3:Other "it i:
myindented-GoDeeper> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=7:
myindented-GoDeeper> unexpected "it is"
myindented-GoDeeper> expecting (

*************************** \ !Unconsumed Error: myindented-GoDeeper: Unexpected "it is" Expecting: ( :2_3:Other "it i:
someIndentation> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=7:
someIndentation> unexpected "it is"
someIndentation> expecting (

************************** \ !Unconsumed Error: someIndentation: Unexpected "it is" Expecting: (   :2_3:Other "it i:
term p/2:someIndentation expr p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/2:someIndentation expr p> MATCH (EERR): <EMPTY>
term p/2:someIndentation expr p> ERROR:
term p/2:someIndentation expr p> offset=7:
term p/2:someIndentation expr p> unexpected "it is"
term p/2:someIndentation expr p> expecting (

************************* \ !Unconsumed Error: term p/2:someIndentation expr p: Unexpected "it is" Expecting: ( :2_3:Other "it i:
************************* / term p/3:plain p                                                        :2_3:Other "it i:
************************** / pRelPred                                                              :2_3:Other "it i:
*************************** / slRelPred                                                           :2_3:Other "it i:
**************************** / nested simpleHorn                                                 :2_3:Other "it i:
***************************** > |^|                                                             :2_3:Other "it i:
***************************** / $*|                                                             :2_3:Other "it i:
****************************** / slMultiTerm                                                   :2_3:Other "it i:
******************************* / someSL                                                      :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

******************************* \ someSL has returned (["it is","an NDB"],1)                 :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

****************************** \ slMultiTerm has returned (["it is","an NDB"],1)              :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

***************************** \ $*| has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
***************************** / |^| deeps                                                      :3_2:UnDeeper:
|^| deeps> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|^| deeps> MATCH (COK): ) ) )
|^| deeps> VALUE: (([(),(),()],-3),[])

***************************** \ |^| deeps has returned ([(),(),()],-3)                      :3_1:Unless:
nested simpleHorn> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
nested simpleHorn> MATCH (CERR): "it is" ( "an NDB" ) ) )
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting ) or MEANS

**************************** \ !Consumed Error: nested simpleHorn: Unexpected UNLESS Expecting: MEANS ) :3_1:Unless:
**************************** / RPConstraint                                                      :2_3:Other "it i:
***************************** / $*|                                                             :2_3:Other "it i:
****************************** / slMultiTerm                                                   :2_3:Other "it i:
******************************* / someSL                                                      :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

******************************* \ someSL has returned (["it is","an NDB"],1)                 :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

****************************** \ slMultiTerm has returned (["it is","an NDB"],1)              :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

***************************** \ $*| has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
***************************** / |>| calling $>>                                                :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPConstraint> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPConstraint> MATCH (CERR): "it is" ( "an NDB"
RPConstraint> ERROR:
RPConstraint> offset=10:
RPConstraint> unexpected )
RPConstraint> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Consumed Error: RPConstraint: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
**************************** / RPBoolStructR                                                     :2_3:Other "it i:
***************************** / $*|                                                             :2_3:Other "it i:
****************************** / slMultiTerm                                                   :2_3:Other "it i:
******************************* / someSL                                                      :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

******************************* \ someSL has returned (["it is","an NDB"],1)                 :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

****************************** \ slMultiTerm has returned (["it is","an NDB"],1)              :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

***************************** \ $*| has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
***************************** / |>| calling $>>                                                :3_2:UnDeeper:
****************************** / |>>/recurse                                                  :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

****************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (    :3_2:UnDeeper:
****************************** / |>>/base                                                     :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting <, <=, ==, >, >=, IN, IS, or NOT IN

****************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: IS < <= > >= IN NOT IN == :3_2:UnDeeper:
|>| calling $>>> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>| calling $>>> MATCH (EERR): <EMPTY>
|>| calling $>>> ERROR:
|>| calling $>>> offset=10:
|>| calling $>>> unexpected )
|>| calling $>>> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

***************************** \ !Unconsumed Error: |>| calling $>>: Unexpected ) Expecting: IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
RPBoolStructR> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPBoolStructR> MATCH (CERR): "it is" ( "an NDB"
RPBoolStructR> ERROR:
RPBoolStructR> offset=10:
RPBoolStructR> unexpected )
RPBoolStructR> expecting (, <, <=, ==, >, >=, IN, IS, or NOT IN

**************************** \ !Consumed Error: RPBoolStructR: Unexpected ) Expecting: ( IS < <= > >= IN NOT IN == ( :3_2:UnDeeper:
**************************** / RPMT                                                              :2_3:Other "it i:
***************************** / $*|                                                             :2_3:Other "it i:
****************************** / slAKA                                                         :2_3:Other "it i:
******************************* / $*|                                                         :2_3:Other "it i:
******************************** / slAKA base                                                :2_3:Other "it i:
********************************* / slMultiTerm                                             :2_3:Other "it i:
********************************** / someSL                                                :2_3:Other "it i:
someSL> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
someSL> MATCH (COK): "it is" ( "an NDB"
someSL> VALUE: ((["it is","an NDB"],1),[])

********************************** \ someSL has returned (["it is","an NDB"],1)           :3_2:UnDeeper:
slMultiTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slMultiTerm> MATCH (COK): "it is" ( "an NDB"
slMultiTerm> VALUE: ((["it is","an NDB"],1),[])

********************************* \ slMultiTerm has returned (["it is","an NDB"],1)        :3_2:UnDeeper:
slAKA base> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA base> MATCH (COK): "it is" ( "an NDB"
slAKA base> VALUE: ((["it is","an NDB"],1),[])

******************************** \ slAKA base has returned (["it is","an NDB"],1)           :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

******************************* \ $*| has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :3_2:UnDeeper:
******************************* / |>>/base                                                   :3_2:UnDeeper:
******************************** / slAKA optional akapart                                   :3_2:UnDeeper:
********************************* / |?| optional something                                 :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
********************************** / |>>/base                                             :3_2:UnDeeper:
*********************************** / PAKA/akapart                                       :3_2:UnDeeper:
************************************ / $>|                                              :3_2:UnDeeper:
************************************* / Aka Token                                      :3_2:UnDeeper:
Aka Token> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
Aka Token> MATCH (EERR): <EMPTY>
Aka Token> ERROR:
Aka Token> offset=10:
Aka Token> unexpected )
Aka Token> expecting AKA

************************************* \ !Unconsumed Error: Aka Token: Unexpected ) Expecting: AKA :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting AKA

************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: AKA :3_2:UnDeeper:
PAKA/akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
PAKA/akapart> MATCH (EERR): <EMPTY>
PAKA/akapart> ERROR:
PAKA/akapart> offset=10:
PAKA/akapart> unexpected )
PAKA/akapart> expecting AKA

*********************************** \ !Unconsumed Error: PAKA/akapart: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting AKA

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: AKA :3_2:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :3_2:UnDeeper:
slAKA optional akapart> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional akapart> MATCH (EOK): <EMPTY>
slAKA optional akapart> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional akapart has returned (Nothing,0)          :3_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :3_2:UnDeeper:
******************************* / |>>/recurse                                                :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

******************************* \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: (  :3_2:UnDeeper:
******************************* / |>>/base                                                   :3_2:UnDeeper:
******************************** / slAKA optional typically                                 :3_2:UnDeeper:
********************************* / |?| optional something                                 :3_2:UnDeeper:
********************************** / |>>/recurse                                          :3_2:UnDeeper:
|>>/recurse> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/recurse> MATCH (EERR): <EMPTY>
|>>/recurse> ERROR:
|>>/recurse> offset=10:
|>>/recurse> unexpected )
|>>/recurse> expecting (

********************************** \ !Unconsumed Error: |>>/recurse: Unexpected ) Expecting: ( :3_2:UnDeeper:
********************************** / |>>/base                                             :3_2:UnDeeper:
*********************************** / typically                                          :3_2:UnDeeper:
************************************ / $>|                                              :3_2:UnDeeper:
$>|> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=10:
$>|> unexpected )
$>|> expecting TYPICALLY

************************************ \ !Unconsumed Error: $>|: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
typically> MATCH (EERR): <EMPTY>
typically> ERROR:
typically> offset=10:
typically> unexpected )
typically> expecting TYPICALLY

*********************************** \ !Unconsumed Error: typically: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EERR): <EMPTY>
|>>/base> ERROR:
|>>/base> offset=10:
|>>/base> unexpected )
|>>/base> expecting TYPICALLY

********************************** \ !Unconsumed Error: |>>/base: Unexpected ) Expecting: TYPICALLY :3_2:UnDeeper:
|?| optional something> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|?| optional something> MATCH (EOK): <EMPTY>
|?| optional something> VALUE: ((Nothing,0),[])

********************************* \ |?| optional something has returned (Nothing,0)        :3_2:UnDeeper:
slAKA optional typically> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
slAKA optional typically> MATCH (EOK): <EMPTY>
slAKA optional typically> VALUE: ((Nothing,0),[])

******************************** \ slAKA optional typically has returned (Nothing,0)        :3_2:UnDeeper:
******************************** > |>>/base got Nothing                                     :3_2:UnDeeper:
|>>/base> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
|>>/base> MATCH (EOK): <EMPTY>
|>>/base> VALUE: ((Nothing,0),[])

******************************* \ |>>/base has returned (Nothing,0)                          :3_2:UnDeeper:
******************************* > slAKA: proceeding after base and entityalias are retrieved ... :3_2:UnDeeper:
******************************* > pAKA: entityalias = Nothing                                :3_2:UnDeeper:
slAKA> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slAKA> MATCH (COK): "it is" ( "an NDB"
slAKA> VALUE: ((["it is","an NDB"],1),[])

****************************** \ slAKA has returned (["it is","an NDB"],1)                    :3_2:UnDeeper:
$*|> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
$*|> MATCH (COK): "it is" ( "an NDB"
$*|> VALUE: ((["it is","an NDB"],1),[])

***************************** \ $*| has returned (["it is","an NDB"],1)                        :3_2:UnDeeper:
RPMT> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
RPMT> MATCH (COK): "it is" ( "an NDB"
RPMT> VALUE: ((RPMT ["it is","an NDB"],1),[])

**************************** \ RPMT has returned (RPMT ["it is","an NDB"],1)                    :3_2:UnDeeper:
slRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
slRelPred> MATCH (COK): "it is" ( "an NDB"
slRelPred> VALUE: ((RPMT ["it is","an NDB"],1),[])

*************************** \ slRelPred has returned (RPMT ["it is","an NDB"],1)                 :3_2:UnDeeper:
*************************** / undeepers                                                          :3_2:UnDeeper:
**************************** > sameLine/undeepers: reached end of line; now need to clear 1 UnDeepers :3_2:UnDeeper:
**************************** > sameLine: success!                                                 :3_3:UnDeeper:
undeepers> IN: ) ) ) UNLESS ( ( "you are a Public Agenc <…>
undeepers> MATCH (COK): )
undeepers> VALUE: ((),[])

*************************** \ undeepers has returned ()                                            :3_3:UnDeeper:
pRelPred> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
pRelPred> MATCH (COK): "it is" ( "an NDB" )
pRelPred> VALUE: (RPMT ["it is","an NDB"],[])

************************** \ pRelPred has returned RPMT ["it is","an NDB"]                          :3_3:UnDeeper:
term p/3:plain p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/3:plain p> MATCH (COK): "it is" ( "an NDB" )
term p/3:plain p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************* \ term p/3:plain p has returned MyLeaf (RPMT ["it is","an NDB"])           :3_3:UnDeeper:
term p/notLabelTerm> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
term p/notLabelTerm> MATCH (COK): "it is" ( "an NDB" )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************************ \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])          :3_3:UnDeeper:
termIndent p> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
termIndent p> MATCH (COK): "it is" ( "an NDB" )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********************** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                   :3_3:UnDeeper:
*********************** / binary(Or)                                                                   :3_3:UnDeeper:
binary(Or)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=11:
binary(Or)> unexpected )
binary(Or)> expecting OR

*********************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                    :3_3:UnDeeper:
*********************** / binary(And)                                                                  :3_3:UnDeeper:
binary(And)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=11:
binary(And)> unexpected )
binary(And)> expecting AND

*********************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                  :3_3:UnDeeper:
*********************** / binary(SetLess)                                                              :3_3:UnDeeper:
binary(SetLess)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=11:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

*********************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS             :3_3:UnDeeper:
*********************** / binary(SetPlus)                                                              :3_3:UnDeeper:
binary(SetPlus)> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=11:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

*********************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS             :3_3:UnDeeper:
expression> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
expression> MATCH (COK): "it is" ( "an NDB" )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                       :3_3:UnDeeper:
ppp inner> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
ppp inner> MATCH (COK): "it is" ( "an NDB" )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********************* \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                          :3_3:UnDeeper:
manyIndentation/leaf?> IN: "it is" ( "an NDB" ) ) ) UNLESS ( ( "you <…>
manyIndentation/leaf?> MATCH (COK): "it is" ( "an NDB" )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************** \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                :3_3:UnDeeper:
******************** / myindented-UnDeeper                                                                :3_3:UnDeeper:
myindented-UnDeeper> IN: ) ) UNLESS ( ( "you are a Public Agency" <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

******************** \ myindented-UnDeeper has returned UnDeeper                                            :3_4:UnDeeper:
someIndentation> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
someIndentation> MATCH (COK): ( "it is" ( "an NDB" ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******************* \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                          :3_4:UnDeeper:
term p/2:someIndentation expr p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/2:someIndentation expr p> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

****************** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])            :3_4:UnDeeper:
term p/notLabelTerm> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
term p/notLabelTerm> MATCH (COK): ( "it is" ( "an NDB" ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

***************** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                          :3_4:UnDeeper:
termIndent p> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
termIndent p> MATCH (COK): ( "it is" ( "an NDB" ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

**************** \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                                   :3_4:UnDeeper:
**************** / binary(Or)                                                                                   :3_4:UnDeeper:
binary(Or)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=12:
binary(Or)> unexpected )
binary(Or)> expecting OR

**************** \ !Unconsumed Error: binary(Or): Unexpected ) Expecting: OR                                    :3_4:UnDeeper:
**************** / binary(And)                                                                                  :3_4:UnDeeper:
binary(And)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=12:
binary(And)> unexpected )
binary(And)> expecting AND

**************** \ !Unconsumed Error: binary(And): Unexpected ) Expecting: AND                                  :3_4:UnDeeper:
**************** / binary(SetLess)                                                                              :3_4:UnDeeper:
binary(SetLess)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=12:
binary(SetLess)> unexpected )
binary(SetLess)> expecting LESS

**************** \ !Unconsumed Error: binary(SetLess): Unexpected ) Expecting: LESS                             :3_4:UnDeeper:
**************** / binary(SetPlus)                                                                              :3_4:UnDeeper:
binary(SetPlus)> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=12:
binary(SetPlus)> unexpected )
binary(SetPlus)> expecting PLUS

**************** \ !Unconsumed Error: binary(SetPlus): Unexpected ) Expecting: PLUS                             :3_4:UnDeeper:
expression> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
expression> MATCH (COK): ( "it is" ( "an NDB" ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*************** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                       :3_4:UnDeeper:
ppp inner> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
ppp inner> MATCH (COK): ( "it is" ( "an NDB" ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************** \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                          :3_4:UnDeeper:
manyIndentation/leaf?> IN: ( "it is" ( "an NDB" ) ) ) UNLESS ( ( "y <…>
manyIndentation/leaf?> MATCH (COK): ( "it is" ( "an NDB" ) )
manyIndentation/leaf?> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************* \ manyIndentation/leaf? has returned MyLeaf (RPMT ["it is","an NDB"])                                :3_4:UnDeeper:
************* / myindented-UnDeeper                                                                                :3_4:UnDeeper:
myindented-UnDeeper> IN: ) UNLESS ( ( "you are a Public Agency" ) <…>
myindented-UnDeeper> MATCH (COK): )
myindented-UnDeeper> VALUE: (UnDeeper,[])

************* \ myindented-UnDeeper has returned UnDeeper                                                   :3_1:Unless:
someIndentation> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
someIndentation> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
someIndentation> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

************ \ someIndentation has returned MyLeaf (RPMT ["it is","an NDB"])                                 :3_1:Unless:
term p/2:someIndentation expr p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/2:someIndentation expr p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/2:someIndentation expr p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

*********** \ term p/2:someIndentation expr p has returned MyLeaf (RPMT ["it is","an NDB"])                   :3_1:Unless:
term p/notLabelTerm> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
term p/notLabelTerm> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
term p/notLabelTerm> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********** \ term p/notLabelTerm has returned MyLeaf (RPMT ["it is","an NDB"])                                 :3_1:Unless:
termIndent p> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
termIndent p> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
termIndent p> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

********* \ termIndent p has returned MyLeaf (RPMT ["it is","an NDB"])                                          :3_1:Unless:
********* / binary(Or)                                                                                          :3_1:Unless:
binary(Or)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(Or)> MATCH (EERR): <EMPTY>
binary(Or)> ERROR:
binary(Or)> offset=13:
binary(Or)> unexpected UNLESS
binary(Or)> expecting OR

********* \ !Unconsumed Error: binary(Or): Unexpected UNLESS Expecting: OR                                      :3_1:Unless:
********* / binary(And)                                                                                         :3_1:Unless:
binary(And)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(And)> MATCH (EERR): <EMPTY>
binary(And)> ERROR:
binary(And)> offset=13:
binary(And)> unexpected UNLESS
binary(And)> expecting AND

********* \ !Unconsumed Error: binary(And): Unexpected UNLESS Expecting: AND                                    :3_1:Unless:
********* / binary(SetLess)                                                                                     :3_1:Unless:
binary(SetLess)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetLess)> MATCH (EERR): <EMPTY>
binary(SetLess)> ERROR:
binary(SetLess)> offset=13:
binary(SetLess)> unexpected UNLESS
binary(SetLess)> expecting LESS

********* \ !Unconsumed Error: binary(SetLess): Unexpected UNLESS Expecting: LESS                               :3_1:Unless:
********* / binary(SetPlus)                                                                                     :3_1:Unless:
binary(SetPlus)> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
binary(SetPlus)> MATCH (EERR): <EMPTY>
binary(SetPlus)> ERROR:
binary(SetPlus)> offset=13:
binary(SetPlus)> unexpected UNLESS
binary(SetPlus)> expecting PLUS

********* \ !Unconsumed Error: binary(SetPlus): Unexpected UNLESS Expecting: PLUS                               :3_1:Unless:
expression> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
expression> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
expression> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******** \ expression has returned MyLeaf (RPMT ["it is","an NDB"])                                              :3_1:Unless:
ppp inner> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
ppp inner> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
ppp inner> VALUE: (MyLeaf (RPMT ["it is","an NDB"]),[])

******* \ ppp inner has returned MyLeaf (RPMT ["it is","an NDB"])                                                 :3_1:Unless:
pBSR> IN: ( ( "it is" ( "an NDB" ) ) ) UNLESS ( (  <…>
pBSR> MATCH (COK): ( ( "it is" ( "an NDB" ) ) )
pBSR> VALUE: (Leaf (RPMT ["it is","an NDB"]),[])

****** \ pBSR has returned Leaf (RPMT ["it is","an NDB"])                                                          :3_1:Unless:
whenCase> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
whenCase> MATCH (COK): IF ( ( "it is" ( "an NDB" ) ) )
whenCase> VALUE: (Just (Leaf (RPMT ["it is","an NDB"])),[])

***** \ whenCase has returned Just (Leaf (RPMT ["it is","an NDB"]))                                                 :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: UPON                                               :3_1:Unless:
preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected UNLESS Expecting: UPON                            :3_1:Unless:
pHornlike/uponLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected UNLESS
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected UNLESS Expecting: UPON                                    :3_1:Unless:
***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: GIVEN                                              :3_1:Unless:
preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UNLESS Expecting: GIVEN                          :3_1:Unless:
pHornlike/givenLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected UNLESS
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected UNLESS Expecting: GIVEN                                  :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: DEFINE DECIDE                                        :3_1:Unless:
pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected UNLESS Expecting: DEFINE DECIDE                          :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number     :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number         :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number            :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected UNLESS Expecting: other text or number              :3_1:Unless:
pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number           :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                        :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number                     :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                             :3_1:Unless:
relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented-GoDeeper                                                                                   :3_1:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: (                                :3_1:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: (                                      :3_1:Unless:
manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected UNLESS Expecting: (        :3_1:Unless:
pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected UNLESS Expecting: ( DEFINE DECIDE other text or number :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: DEFINE DECIDE                                        :3_1:Unless:
pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected UNLESS Expecting: DEFINE DECIDE                          :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number     :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number         :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number            :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected UNLESS Expecting: other text or number              :3_1:Unless:
pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number           :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                        :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number                     :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                             :3_1:Unless:
relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented-GoDeeper                                                                                   :3_1:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: (                                :3_1:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: (                                      :3_1:Unless:
manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected UNLESS Expecting: (        :3_1:Unless:
pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected UNLESS Expecting: ( DEFINE DECIDE other text or number :3_1:Unless:
***** / pHornlike/givenLimb                                                                                         :3_1:Unless:
****** / preambleParamText:[Given]                                                                                 :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting GIVEN

******* \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: GIVEN                                              :3_1:Unless:
preambleParamText:[Given]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Given]> MATCH (EERR): <EMPTY>
preambleParamText:[Given]> ERROR:
preambleParamText:[Given]> offset=13:
preambleParamText:[Given]> unexpected UNLESS
preambleParamText:[Given]> expecting GIVEN

****** \ !Unconsumed Error: preambleParamText:[Given]: Unexpected UNLESS Expecting: GIVEN                          :3_1:Unless:
pHornlike/givenLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/givenLimb> MATCH (EERR): <EMPTY>
pHornlike/givenLimb> ERROR:
pHornlike/givenLimb> offset=13:
pHornlike/givenLimb> unexpected UNLESS
pHornlike/givenLimb> expecting GIVEN

***** \ !Unconsumed Error: pHornlike/givenLimb: Unexpected UNLESS Expecting: GIVEN                                  :3_1:Unless:
***** / pHornlike/uponLimb                                                                                          :3_1:Unless:
****** / preambleParamText:[Upon]                                                                                  :3_1:Unless:
******* / $>|                                                                                                     :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting UPON

******* \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: UPON                                               :3_1:Unless:
preambleParamText:[Upon]> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
preambleParamText:[Upon]> MATCH (EERR): <EMPTY>
preambleParamText:[Upon]> ERROR:
preambleParamText:[Upon]> offset=13:
preambleParamText:[Upon]> unexpected UNLESS
preambleParamText:[Upon]> expecting UPON

****** \ !Unconsumed Error: preambleParamText:[Upon]: Unexpected UNLESS Expecting: UPON                            :3_1:Unless:
pHornlike/uponLimb> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/uponLimb> MATCH (EERR): <EMPTY>
pHornlike/uponLimb> ERROR:
pHornlike/uponLimb> offset=13:
pHornlike/uponLimb> unexpected UNLESS
pHornlike/uponLimb> expecting UPON

***** \ !Unconsumed Error: pHornlike/uponLimb: Unexpected UNLESS Expecting: UPON                                    :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: DEFINE DECIDE                                        :3_1:Unless:
pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected UNLESS Expecting: DEFINE DECIDE                          :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number     :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number         :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number            :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected UNLESS Expecting: other text or number              :3_1:Unless:
pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number           :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                        :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number                     :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                             :3_1:Unless:
relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented-GoDeeper                                                                                   :3_1:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: (                                :3_1:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: (                                      :3_1:Unless:
manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected UNLESS Expecting: (        :3_1:Unless:
pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected UNLESS Expecting: ( DEFINE DECIDE other text or number :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: DEFINE DECIDE                                        :3_1:Unless:
pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected UNLESS Expecting: DEFINE DECIDE                          :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number     :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number         :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number            :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected UNLESS Expecting: other text or number              :3_1:Unless:
pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number           :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                        :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number                     :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                             :3_1:Unless:
relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented-GoDeeper                                                                                   :3_1:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: (                                :3_1:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: (                                      :3_1:Unless:
manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected UNLESS Expecting: (        :3_1:Unless:
pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected UNLESS Expecting: ( DEFINE DECIDE other text or number :3_1:Unless:
***** / pHornlike/ambitious                                                                                         :3_1:Unless:
****** / $>|                                                                                                       :3_1:Unless:
$>|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$>|> MATCH (EERR): <EMPTY>
$>|> ERROR:
$>|> offset=13:
$>|> unexpected UNLESS
$>|> expecting DECIDE or DEFINE

****** \ !Unconsumed Error: $>|: Unexpected UNLESS Expecting: DEFINE DECIDE                                        :3_1:Unless:
pHornlike/ambitious> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/ambitious> MATCH (EERR): <EMPTY>
pHornlike/ambitious> ERROR:
pHornlike/ambitious> offset=13:
pHornlike/ambitious> unexpected UNLESS
pHornlike/ambitious> expecting DECIDE or DEFINE

***** \ !Unconsumed Error: pHornlike/ambitious: Unexpected UNLESS Expecting: DEFINE DECIDE                          :3_1:Unless:
***** / pHornlike/someStructure                                                                                     :3_1:Unless:
****** / manyIndentation/leaf?                                                                                     :3_1:Unless:
******* / relPredNextlineWhen                                                                                     :3_1:Unless:
******** / pRelPred optIndentedTuple whenCase                                                                    :3_1:Unless:
********* / optIndentedTuple                                                                                    :3_1:Unless:
********** / optIndented                                                                                       :3_1:Unless:
*********** / pRelPred                                                                                        :3_1:Unless:
************ / slRelPred                                                                                     :3_1:Unless:
************* / nested simpleHorn                                                                           :3_1:Unless:
************** > |^|                                                                                       :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

************* \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number     :3_1:Unless:
************* / RPConstraint                                                                                :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

************* \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
************* / RPBoolStructR                                                                               :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

************* \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number         :3_1:Unless:
************* / RPMT                                                                                        :3_1:Unless:
************** / $*|                                                                                       :3_1:Unless:
*************** / slAKA                                                                                   :3_1:Unless:
**************** / $*|                                                                                   :3_1:Unless:
***************** / slAKA base                                                                          :3_1:Unless:
****************** / slMultiTerm                                                                       :3_1:Unless:
******************* / someSL                                                                          :3_1:Unless:
******************** / pNumAsText                                                                    :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

******************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number            :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

******************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

****************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

***************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number    :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

**************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

*************** \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

************* \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

************ \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
pRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred> MATCH (EERR): <EMPTY>
pRelPred> ERROR:
pRelPred> offset=13:
pRelPred> unexpected UNLESS
pRelPred> expecting other text or number

*********** \ !Unconsumed Error: pRelPred: Unexpected UNLESS Expecting: other text or number                  :3_1:Unless:
optIndented> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndented> MATCH (EERR): <EMPTY>
optIndented> ERROR:
optIndented> offset=13:
optIndented> unexpected UNLESS
optIndented> expecting other text or number

********** \ !Unconsumed Error: optIndented: Unexpected UNLESS Expecting: other text or number                 :3_1:Unless:
optIndentedTuple> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
optIndentedTuple> MATCH (EERR): <EMPTY>
optIndentedTuple> ERROR:
optIndentedTuple> offset=13:
optIndentedTuple> unexpected UNLESS
optIndentedTuple> expecting other text or number

********* \ !Unconsumed Error: optIndentedTuple: Unexpected UNLESS Expecting: other text or number              :3_1:Unless:
pRelPred optIndentedTuple whenCase> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pRelPred optIndentedTuple whenCase> MATCH (EERR): <EMPTY>
pRelPred optIndentedTuple whenCase> ERROR:
pRelPred optIndentedTuple whenCase> offset=13:
pRelPred optIndentedTuple whenCase> unexpected UNLESS
pRelPred optIndentedTuple whenCase> expecting other text or number

******** \ !Unconsumed Error: pRelPred optIndentedTuple whenCase: Unexpected UNLESS Expecting: other text or number :3_1:Unless:
relPredNextlineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredNextlineWhen> MATCH (EERR): <EMPTY>
relPredNextlineWhen> ERROR:
relPredNextlineWhen> offset=13:
relPredNextlineWhen> unexpected UNLESS
relPredNextlineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredNextlineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
******* / relPredSamelineWhen                                                                                     :3_1:Unless:
******** / $*|                                                                                                   :3_1:Unless:
********* / slRelPred                                                                                           :3_1:Unless:
********** / nested simpleHorn                                                                                 :3_1:Unless:
*********** > |^|                                                                                             :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
nested simpleHorn> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
nested simpleHorn> MATCH (EERR): <EMPTY>
nested simpleHorn> ERROR:
nested simpleHorn> offset=13:
nested simpleHorn> unexpected UNLESS
nested simpleHorn> expecting other text or number

********** \ !Unconsumed Error: nested simpleHorn: Unexpected UNLESS Expecting: other text or number           :3_1:Unless:
********** / RPConstraint                                                                                      :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPConstraint> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPConstraint> MATCH (EERR): <EMPTY>
RPConstraint> ERROR:
RPConstraint> offset=13:
RPConstraint> unexpected UNLESS
RPConstraint> expecting other text or number

********** \ !Unconsumed Error: RPConstraint: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
********** / RPBoolStructR                                                                                     :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slMultiTerm                                                                                   :3_1:Unless:
************* / someSL                                                                                      :3_1:Unless:
************** / pNumAsText                                                                                :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                        :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

************* \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number                :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

************ \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number             :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPBoolStructR> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPBoolStructR> MATCH (EERR): <EMPTY>
RPBoolStructR> ERROR:
RPBoolStructR> offset=13:
RPBoolStructR> unexpected UNLESS
RPBoolStructR> expecting other text or number

********** \ !Unconsumed Error: RPBoolStructR: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
********** / RPMT                                                                                              :3_1:Unless:
*********** / $*|                                                                                             :3_1:Unless:
************ / slAKA                                                                                         :3_1:Unless:
************* / $*|                                                                                         :3_1:Unless:
************** / slAKA base                                                                                :3_1:Unless:
*************** / slMultiTerm                                                                             :3_1:Unless:
**************** / someSL                                                                                :3_1:Unless:
***************** / pNumAsText                                                                          :3_1:Unless:
pNumAsText> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pNumAsText> MATCH (EERR): <EMPTY>
pNumAsText> ERROR:
pNumAsText> offset=13:
pNumAsText> unexpected UNLESS
pNumAsText> expecting number

***************** \ !Unconsumed Error: pNumAsText: Unexpected UNLESS Expecting: number                  :3_1:Unless:
someSL> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someSL> MATCH (EERR): <EMPTY>
someSL> ERROR:
someSL> offset=13:
someSL> unexpected UNLESS
someSL> expecting other text or number

**************** \ !Unconsumed Error: someSL: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
slMultiTerm> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slMultiTerm> MATCH (EERR): <EMPTY>
slMultiTerm> ERROR:
slMultiTerm> offset=13:
slMultiTerm> unexpected UNLESS
slMultiTerm> expecting other text or number

*************** \ !Unconsumed Error: slMultiTerm: Unexpected UNLESS Expecting: other text or number       :3_1:Unless:
slAKA base> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA base> MATCH (EERR): <EMPTY>
slAKA base> ERROR:
slAKA base> offset=13:
slAKA base> unexpected UNLESS
slAKA base> expecting other text or number

************** \ !Unconsumed Error: slAKA base: Unexpected UNLESS Expecting: other text or number          :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

************* \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
slAKA> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slAKA> MATCH (EERR): <EMPTY>
slAKA> ERROR:
slAKA> offset=13:
slAKA> unexpected UNLESS
slAKA> expecting other text or number

************ \ !Unconsumed Error: slAKA: Unexpected UNLESS Expecting: other text or number                   :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

*********** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                       :3_1:Unless:
RPMT> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
RPMT> MATCH (EERR): <EMPTY>
RPMT> ERROR:
RPMT> offset=13:
RPMT> unexpected UNLESS
RPMT> expecting other text or number

********** \ !Unconsumed Error: RPMT: Unexpected UNLESS Expecting: other text or number                        :3_1:Unless:
slRelPred> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
slRelPred> MATCH (EERR): <EMPTY>
slRelPred> ERROR:
slRelPred> offset=13:
slRelPred> unexpected UNLESS
slRelPred> expecting other text or number

********* \ !Unconsumed Error: slRelPred: Unexpected UNLESS Expecting: other text or number                     :3_1:Unless:
$*|> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
$*|> MATCH (EERR): <EMPTY>
$*|> ERROR:
$*|> offset=13:
$*|> unexpected UNLESS
$*|> expecting other text or number

******** \ !Unconsumed Error: $*|: Unexpected UNLESS Expecting: other text or number                             :3_1:Unless:
relPredSamelineWhen> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
relPredSamelineWhen> MATCH (EERR): <EMPTY>
relPredSamelineWhen> ERROR:
relPredSamelineWhen> offset=13:
relPredSamelineWhen> unexpected UNLESS
relPredSamelineWhen> expecting other text or number

******* \ !Unconsumed Error: relPredSamelineWhen: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
manyIndentation/leaf?> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/leaf?> MATCH (EERR): <EMPTY>
manyIndentation/leaf?> ERROR:
manyIndentation/leaf?> offset=13:
manyIndentation/leaf?> unexpected UNLESS
manyIndentation/leaf?> expecting other text or number

****** \ !Unconsumed Error: manyIndentation/leaf?: Unexpected UNLESS Expecting: other text or number               :3_1:Unless:
****** / manyIndentation/deeper; calling someIndentation                                                           :3_1:Unless:
******* / someIndentation                                                                                         :3_1:Unless:
******** / myindented-GoDeeper                                                                                   :3_1:Unless:
myindented-GoDeeper> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
myindented-GoDeeper> MATCH (EERR): <EMPTY>
myindented-GoDeeper> ERROR:
myindented-GoDeeper> offset=13:
myindented-GoDeeper> unexpected UNLESS
myindented-GoDeeper> expecting (

******** \ !Unconsumed Error: myindented-GoDeeper: Unexpected UNLESS Expecting: (                                :3_1:Unless:
someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
someIndentation> MATCH (EERR): <EMPTY>
someIndentation> ERROR:
someIndentation> offset=13:
someIndentation> unexpected UNLESS
someIndentation> expecting (

******* \ !Unconsumed Error: someIndentation: Unexpected UNLESS Expecting: (                                      :3_1:Unless:
manyIndentation/deeper; calling someIndentation> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
manyIndentation/deeper; calling someIndentation> MATCH (EERR): <EMPTY>
manyIndentation/deeper; calling someIndentation> ERROR:
manyIndentation/deeper; calling someIndentation> offset=13:
manyIndentation/deeper; calling someIndentation> unexpected UNLESS
manyIndentation/deeper; calling someIndentation> expecting (

****** \ !Unconsumed Error: manyIndentation/deeper; calling someIndentation: Unexpected UNLESS Expecting: (        :3_1:Unless:
pHornlike/someStructure> IN: UNLESS ( ( "you are a Public Agency" ) ) <…>
pHornlike/someStructure> MATCH (EERR): <EMPTY>
pHornlike/someStructure> ERROR:
pHornlike/someStructure> offset=13:
pHornlike/someStructure> unexpected UNLESS
pHornlike/someStructure> expecting (, DECIDE, DEFINE, or other text or number

***** \ !Unconsumed Error: pHornlike/someStructure: Unexpected UNLESS Expecting: ( DEFINE DECIDE other text or number :3_1:Unless:
pHornlike / permute> IN: IF ( ( "it is" ( "an NDB" ) ) ) UNLESS ( <…>
pHornlike / permute> MATCH (CERR): IF ( ( "it is" ( "an NDB" ) ) )
pHornlike / permute> ERROR:
pHornlike / permute> offset=13:
pHornlike / permute> unexpected UNLESS
pHornlike / permute> expecting (, AND, DECIDE, DEFINE, GIVEN, LESS, OR, PLUS, UPON, or other text or number

**** \ !Consumed Error: pHornlike / permute: Unexpected UNLESS Expecting: DEFINE DECIDE GIVEN UPON AND OR LESS PLUS ( DEFINE DECIDE other text or number :3_1:Unless:
pHornlike> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pHornlike> MATCH (CERR): §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pHornlike> ERROR:
pHornlike> offset=13:
pHornlike> unexpected UNLESS
pHornlike> expecting (, AND, DECIDE, DEFINE, GIVEN, LESS, OR, PLUS, UPON, or other text or number

*** \ !Consumed Error: pHornlike: Unexpected UNLESS Expecting: DEFINE DECIDE GIVEN UPON AND OR LESS PLUS ( DEFINE DECIDE other text or number :3_1:Unless:
pRule> IN: §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRule> MATCH (CERR): §§ ( "Notify Individuals" ) IF ( ( "it i <…>
pRule> ERROR:
pRule> offset=36:
pRule> unexpected (
pRule> expecting regulative rule

** \ !Consumed Error: pRule: Unexpected ( Expecting: regulative rule                                                   :3_1:Unless:
Loading env

Parser tests
  PDPA
    pdpadbno-7 FAILED [1]

Failures:

  test/Spec.hs:1034:7: 
  1) Parser tests, PDPA, pdpadbno-7
       expected: [[Regulative {subj = Leaf (("You" :| [],Nothing) :| []), rkeyword = RParty, who = Nothing, cond = Just (All Nothing [Leaf (RPMT ["it is","an NDB"]),Not (Leaf (RPMT ["you are a Public Agency"]))]), deontic = DMust, action = Leaf (("NOTIFY" :| ["each of the Notifiable Individuals"],Nothing) :| [("in" :| ["any manner that is reasonable in the circumstances"],Nothing),("with" :| ["a message obeying a certain format"],Nothing)]), temporal = Just (TemporalConstraint TBefore (Just 3) "days"), hence = Nothing, lest = Nothing, rlabel = Just ("\167",2,"Notify Individuals"), lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing}), upon = Nothing, given = Nothing, having = Nothing, wwhere = [Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPMT ["the Notifiable Individuals"], hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 9, version = Nothing}), defaults = [], symtab = []}], defaults = [], symtab = []},Hornlike {name = ["the Notifiable Individuals"], keyword = Means, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPBoolStructR ["the Notifiable Individuals"] RPis (All Nothing [Leaf (RPMT ["the set of individuals affected by the NDB"]),Not (Leaf (RPMT ["the individuals who are deemed","Unlikely"])),Not (Leaf (RPMT ["the individuals on","the PDPC Exclusion List"])),Not (Leaf (RPMT ["the individuals on","the LEA Exclusion List"]))]), hBody = Nothing}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 2, srccol = 9, version = Nothing}), defaults = [], symtab = []}]]
       but parsing failed with error:
       6:2:
       unexpected (
       expecting regulative rule
       
       §§       Notify Individuals                                                                                                              
       IF       TRUE                         it is                                 an NDB                                                       
       UNLESS   FALSE                        you are a Public Agency                                                                            
       PARTY    You                                                                                                                             
       MUST                                  WITHIN                                3                                     days                   
       ➔        ✳                            NOTIFY                                each of the Notifiable Individuals                           
                                             in                                    any manner that is reasonable in                             
                                                                                   the circumstances                                            
                                             with                                  a message obeying a certain format                           
       WHERE    the Notifiable Individuals                                                                                                      
                MEANS                        the set of individuals affected by                                                                 
                                             the NDB                                                                                            
                                             LESS                                  the individuals who are deemed        Unlikely               
                                             LESS                                  the individuals on                    the PDPC Exclusion List
                                             LESS                                  the individuals on                    the LEA Exclusion List 
       
       
       Stream:
       §§ ( "Notify Individuals" ) IF
           (
               ( "it is" ( "an NDB" ) )
           ) UNLESS ( ( "you are a Public Agency" ) ) PARTY ( "You" ) MUST
           (
               ( BEFORE
                   ( 3
                       ( "days" "✳" )
                   )
               )
           ) DO "✳"
           (
               ( "NOTIFY" ( "each of the Notifiable Individuals" ) "in" ( "any manner that is reasonable in the circumstances" ) "with" ( "a message obeying a certain format" ) )
           ) WHERE
           ( "the Notifiable Individuals" MEANS
               ( "the set of individuals affected by the NDB" LESS
                   ( "the individuals who are deemed" ( "Unlikely" ) ) LESS
                   ( "the individuals on" ( "the PDPC Exclusion List" ) ) LESS
                   ( "the individuals on" ( "the LEA Exclusion List" ) )
               )
           )

  To rerun use: --match "/Parser tests/PDPA/pdpadbno-7/"

Randomized with seed 1303464875

Finished in 0.5554 seconds
1 example, 1 failure

natural4> Test suite natural4-test failed
Test suite failure for package natural4-0.1.0.0
    natural4-test:  exited with: ExitFailure 1
Logs printed to console

