-- File auto generated by purescript-bridge! --
module AnyAll.Types where

import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array)

import Prelude

data Item' a b =
    Leaf b
  | All {
      itemLbl :: Maybe a
    , itemsAll :: Array (Item' a b)
    }
  | Any {
      itemLbl :: Maybe a
    , itemsAny :: Array (Item' a b)
    }
  | Not (Item' a b)

derive instance genericItem' :: (Generic a ra, Generic b rb) => Generic (Item' a b) _

--------------------------------------------------------------------------------
_Leaf :: forall a b. Prism' (Item' a b) b
_Leaf = prism' Leaf f
  where
    f (Leaf a) = Just $ a
    f _ = Nothing

_All :: forall a b. Prism' (Item' a b) { itemLbl :: Maybe a, itemsAll :: Array (Item' a b) }
_All = prism' All f
  where
    f (All r) = Just r
    f _ = Nothing

_Any :: forall a b. Prism' (Item' a b) { itemLbl :: Maybe a, itemsAny :: Array (Item' a b) }
_Any = prism' Any f
  where
    f (Any r) = Just r
    f _ = Nothing

_Not :: forall a b. Prism' (Item' a b) (Item' a b)
_Not = prism' Not f
  where
    f (Not a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
