-- File auto generated by purescript-bridge! --
module LS.Types where

import AnyAll.Types (Item', Label)
import Data.Generic.Rep (class Generic)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Tuple (Tuple)
import GHC.Base (NonEmpty)
import Prim (Array, String)

import Prelude

data RelationalPredicate =
    RPParamText (NonEmpty (Tuple (NonEmpty String) (Maybe TypeSig)))
  | RPMT (Array String)
  | RPConstraint (Array String) RPRel (Array String)
  | RPBoolStructR (Array String) RPRel (Item' (Label String) RelationalPredicate)

derive instance genericRelationalPredicate :: Generic RelationalPredicate _

data TypeSig =
    SimpleType ParamType String
  | InlineEnum ParamType (NonEmpty (Tuple (NonEmpty String) (Maybe TypeSig)))

derive instance genericTypeSig :: Generic TypeSig _

