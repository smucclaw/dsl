-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language natural4.

module AbsNatural where

import Prelude (String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )

data IfPart = IfPart BSRAny
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BoolStructR
    = BSRAny [BSRAny] BoolStructR
    | BSRLeaf BSRLeaf
    | BSRAll [BSRAll] BoolStructR
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BSRLeaf
    = LeafNoLabel RelationalPredicate
    | LeafPostLabel BSRLeaf MultiTerm
    | LeafPreLabel MultiTerm BoolStructR
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BSRAny = BSRAnyList BoolStructR
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BSRAll = BSRAllList BoolStructR
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelationalPredicate
    = RPConstraint MultiTerm MultiTerm
    | RPBoolStructR MultiTerm BoolStructR
    | RPMT MultiTerm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RPRel = RPis
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MultiTerm = MultiTerm [MTExpr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MTExpr = MTExpr MTT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MTT = MTT PIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MTN = MTN PInteger
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PIdent = PIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PInteger = PInteger ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition PIdent where
  hasPosition (PIdent (p, _)) = C.Just p

instance HasPosition PInteger where
  hasPosition (PInteger (p, _)) = C.Just p

