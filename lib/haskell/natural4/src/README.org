#+TITLE: Natural4 Compiler Toolchain Internals Documentation
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="excel-2007.css" />

* Type Declarations                                                :ontology:

We assume most L4 developers will have some exposure to OOP.

We borrow class/instance from OOP, and algebraic data types from Haskell.

** simple sum types, or enums

| DECLARE | TempUnit | IS | ONE OF | Fahrenheit | Celsius |

#+begin_src haskell
  data TempUnit = Fahrenheit | Celsius
#+end_src

** Simple parametric datatypes

| DECLARE | Class | HAS | Things | IS | LIST | Thing |

** algebraic datatypes

| DECLARE | Temp | IS | TempUnit | number |

#+begin_src haskell
  data Temp = Temp TempUnit Float
#+end_src

** simple tagged unions with prefix constructors

| DECLARE | Temp | IS | F | real |
|         |      | OR | C | real |
|         |      | OR | K | real |

#+begin_src haskell
  data Temp = F Float
            | C Float
            | K Float
#+end_src

*** simple tagged unions with postfix constructors

| DECLARE | temp | IS | real | F |
|         |      | OR | real | C |
|         |      | OR | real | K |

same as above

** TODO product types

- classes have attributes
- equivalently, records have fields

the attributes/fields themselves can have types.

| DECLARE | Cartesian coordinate |    | AKA | Point  |
| HAS     | X                    | IS | AN  | Int    |
|         | Y                    | IS | AN  | Int    |
|         | Label                | IS | A   | String |

*** Legalese

**** Dialect 1

A Cartesian coordinate (hereinafter, a "*Point*") has the following attributes:
- an integer value "*X*";
- an integer value "*Y*"; and
- a string "*Label*".

**** Dialect 2

*Point* means a Cartesian coordinate with an integer value "X", an integer value "Y", and a string "label".

*** Haskell
#+begin_src haskell :tangle Classy.hs :noweb yes
  <<lens magic>>
  data Point = Point
   { _x     :: Int
   , _y     :: Int
   , _label :: String
   }
  makeClassy ''Point
#+end_src

*** Typescript
#+begin_src typescript
  class Point {
    x     : number;
    y     : number;
    label : string;
  }
#+end_src

*** Python
#+begin_src python
  class Point:
    x     = 1
    y     = 2
    label = "point label"
#+end_src

*** Prolog [[https://www.swi-prolog.org/pldoc/man?section=bidicts][dicts]]

#+begin_src prolog
  A = point{x:1, y:2, label:"point label"}.
#+end_src

*** Alloy
#+begin_src alloy
open util/integers

abstract sig Point {
  x : Int,
  y : Int
  /* labels are strings, which are too hairy for Alloy */
}

one pointA extends Point {
  x = 0
  y = 0
}
#+end_src

*** Uppaal

#+begin_src uppaal?
???
#+end_src

*** Java

#+begin_src java
class public super awesome Point {
  x: attribute variable member of Point is integer;
  y: same as above but in an ever more verbose syntax;
}
#+end_src


** basic types
:PROPERTIES:
:HTML_CONTAINER_CLASS: plain-table
:END:

|      | L4       | Haskell                   | Typescript | Desc                                                                                    |
|------+----------+---------------------------+------------+-----------------------------------------------------------------------------------------|
|      | int      | Int                       | number     |                                                                                         |
|      | real     | Real                      | number     |                                                                                         |
|      | date     |                           |            | a mess of possible spec formats including "the third business day after Christmas 2033" |
|      | daterel  |                           |            | a mess of possible spec formats including "the third business day after Christmas"      |
|      | datetime |                           |            |                                                                                         |
|      |          |                           |            |                                                                                         |
|      | currency | (currencycode, baseunits) |            |                                                                                         |
| SG$1 |          | (SGD, 100)                |            |                                                                                         |
|      |          |                           |            |                                                                                         |

** inheritance and validation

The syntax for inheritance and validation is:

| DEFINE         | SubClass | IS | A | SuperClass |
| HAS            | ...      |    |   |            |
| WHICH / WHOSE  | ...      |    |   |            |

There must be at least one of { HAS, WHICH | WHOSE } present after the DEFINE.

*** WHICH syntax

the subject of the WHICH is the SubClass itself:

| DEFINE | Natural | IS | AN | Int |
| WHICH  | IS      | >= | 0  |     |

*** WHOSE syntax

an attribute name follows the WHOSE keyword:

| DEFINE | Quadrant1 | IS | A  | Point |   |
| WHOSE  | X         | IS | >= |     0 |   |
| AND    | Y         | IS | >= |     0 |   |

*** HAS syntax

| DEFINE | MyObject |    |   |                |
| HAS    | attr1    | IS | A | <Type Name>    |
| HAS    | attr2    | IS |   | a static value |

Here ~<Type Name>~ could be something like ~Int~ or ~String~ or ~Person~ or ~Address~.

A static value is literally that: something like ~42~. It's a class constant.

*** Examples
**** Haskell

as shown above with Classy Lenses

**** Typescript
#+begin_src typescript :tangle Classy.ts
  class SuperParent { }

  export class SubChild extends SuperParent {
    newSubAttribute9: number = 42;
    constructor(
      public newSubAttribute7: number,
      public newSubAttribute8: string
    ) { super() }
  }
#+end_src

This gets us:

#+begin_example
Welcome to Node.js v17.0.1.
Type ".help" for more information.
> classy = require('./src/Classy.js')
{ __esModule: true, SubChild: [Function: SubChild] }
> oops =new classy.SubChild (12,"boo")
SubChild {
  newSubAttribute7: 12,
  newSubAttribute8: 'boo',
  newSubAttribute9: 42
}
#+end_example


** validation

OOP has the idea of *constructors* which instantiate a particular value into a class. Maybe something like ~init()~ or ~new()~

In Haskell every term has a type.

In advanced typed languages we have the notion of refinement and dependent types.

In L4 every class possesses a set of *validation rules*. Some might think of this in terms of refinement or dependent types.

*** Example 1
| DEFINE | Natural | IS | AN | Int |
| WHICH  | IS      | >= |  0 |     |

#+begin_src haskell :tangle Classy.hs
  data MyNatural = MyNatural {
    _myint :: Int
  } deriving (Show, Eq, Ord)
  makeClassy ''MyNatural

  class Validation a where
    isValid :: a -> Bool

  instance Validation MyNatural where
    isValid myn = myn^.myint >= 0
#+end_src

*** Example 2: majority

| ENTITY | Person        |   |   |    |       |         |             |                                     |   |    |   |        |                   |
| HAS    | official name |   |   | IS | A     | String  |             |                                     |   |    |   |        |                   |
| HAS    | address       |   |   | IS | AN    | Address | OPTIONAL    |                                     |   |    |   |        |                   |
| HAS    | identifier    |   |   | IS | ONEOF | UEN     | AKA         | Unique Entity Number                |   | IS | A | String | SG_UEN            |
|        |               |   |   |    | OR    | NRIC    | AKA         | National Registration Identity Card |   | IS | A | String | SG_NRIC           |
|        |               |   |   |    | OR    | FIN     | AKA         | Foreigner Identification Number     |   | IS | A | String | SG_FIN            |
|        |               |   |   |    | OR    | TIN     | AKA         | U.S. Taxpayer Identification Number |   | IS | A | String |                   |
|        |               |   |   |    | OR    |         | Nationality |                                     |   | IS | A | String | ISO3166-1 alpha-2 |
|        |               |   |   |    |       | AND     | Passport    |                                     |   | IS | A | String |                   |

#+begin_src haskell :tangle Classy.hs :noweb yes
  <<subsidiary types>>
  data Person = Person
    { _officialName :: String
    , _address :: Address
    , _identifier :: Identifier
    } deriving (Show, Eq)
  makeClassy ''Person
#+end_src

#+NAME: subsidiary types
#+begin_src haskell 
  type Address = [String]

  data Identifier = SG_UEN  String
                  | SG_NRIC String
                  | SG_FIN  String
                  | US_TIN  String
                  | Passport
                    { nationality :: String
                    , passportNo  :: String
                    }
    deriving (Show, Eq)
#+end_src

#+begin_src typescript
  class Person {
    _officialName  : string;
    _address      ?: Address;
    _identifier    :
        { idtype : "SGUEN",     idval : SGUEN }
      | { idtype : "SGNRIC",    idval : SGNRIC }
      | { idtype : "SGFIN",     idval : SGFIN }
      | { idtype : "USTIN",     idval : USTIN }
      | { idtype : "passport",  idval :
          {
            nationality: string; // "se" "sg" "us" "uk"
            passportNo:  string;
          }
        }
  }
  makeClassy ''Person
#+end_src

| ENTITY | Corporation    |   |   | IS | A | Person |   |   |
| ENTITY | Natural Person |   |   | IS | A | Person |   |   |

#+begin_src haskell :tangle Classy.hs
  data Corporation   = Corporation   { _cperson :: Person }
  data NaturalPerson = NaturalPerson { _nperson :: Person }
  makeClassy ''NaturalPerson
  instance HasPerson NaturalPerson where
    person = nperson
#+end_src

#+begin_src typescript
  class Corporation   extends Person { }
  class NaturalPerson extends Person { }
#+end_src

| ENTITY | Capable          |                  |   | IS | A       | Natural |          |        |       |
| HAS    | adulthood        |                  |   | IS | ONEOF   | Major   | Minor    | LIKELY | Major |
| HAS    | ParentOrGuardian |                  |   | IS | A       | Capable | OPTIONAL |        |       |
| WHOSE  | adulthood        |                  |   | IS |         | Major   |          |        |       |
| OR     |                  | ParentOrGuardian |   | IS | defined |         |          |        |       |
|        | AND              | ParentOrGuardian |   | IS | VALID   |         |          |        |       |

(Majority means: are they not a minor?)

Conventionally one would expect such a form to gather the exact birthdate, from which we could compute the age, from which we could compute majority, but here we are being more privacy-conscious and just asking if the individual is a major or a minor, hence ~majority~ is a Bool.

#+begin_src haskell :tangle Classy.hs
  data Majority = Major | Minor
    deriving (Eq)

  data CapablePerson = CapablePerson
    { _np               :: NaturalPerson
    , _adulthood        :: Majority
    , _parentOrGuardian :: Maybe CapablePerson
    }
  makeClassy ''CapablePerson
  instance HasNaturalPerson CapablePerson where
    naturalPerson = np

  instance Validation CapablePerson where
    isValid p =
      p^.adulthood == Major
      || maybe False isValid (p^.parentOrGuardian)

#+end_src

#+begin_src typescript
  class CapablePerson extends Natural {
    adulthood         : boolean;
    parentOrGuardian ?: CapablePerson;
  }
#+end_src
									
| ENTITY | Singapore Company |   |   | IS | A   | Corporation |   |   |
| HAS    | identifier        |   |   | IS | UEN |             |   |   |

#+begin_src typescript

#+end_src
									

** instances



** default values

** attribute types

** 

* Transpiling the above type declarations


* Transpiling the instance DEFINEs to typescript

* Notes on the code

* More about nested hornlike rules

Mustsing has a good example: every person who qualifies must do whatever; inline, qualifies means something and something.

that works inside the scope of a WHO because the WHO is a maybe boolstructr. the boolstructr resolves using a RelPred parser (slRelPred) which includes an RPMT $ mustNestHorn.

However, if we want that sort of nested horn clause in a different context -- under the Policyholder of a ~DECLARE Policy HAS Policyholder~, for instance, then we need to take a different tack. Inside ~HAS Policyholder~, Policyholder is parsed by an slKeyValuesAka.

Similarly we want to have support for MEANS inside a ~HENCE Notification~ (in PDPADBNO) -- where the HENCE Notification is of type Maybe Rule

So, how do we augment an arbitrary parser with the ability to have a nestedHorn on the next line? We rely on sameOrNextline, but we crucially require that the sameOrNextline should not extend too far to the left past the term that is directly above the MEANS. Maybe the easy way to do this is to take advantage of the fact that between the Notification and the MEANS there is no godeeper or undeeper, so it is literally a >>.

The problem is, sometimes allowing a nestedHorn in a certain position (e.g. in a maybeAka MEANS something) causes the nestedHorn to overmatch -- the maybeAka is supposed to stand alone, but the nestedHorn consumes the next line's MEANS, when it shouldn't.

The problem can be traced to the ~|^|~ operator, which consumes any number of undeepers.

We need to have a sameOrNextLine which consumes only as many undeepers which were to the right of the position of the base (LHS) parser:

|       | foo1 |
| MEANS | foo2 |

so in the above, the nestedHorn (hopefully using a sameOrNextLine parser) would NOT match because foo1 is followed by a MEANS which is to the left of foo1

however below, foo3 does have a nestedHorn because the MEANS sits immediately under it

|   | foo3  |      |
|   | MEANS | foo4 |

This is all complicated by the fact that sometimes we want to be able to match foo5a as having a nested horn:


|   | foo5a |      | foo5b
|   | MEANS | foo6 |

here, we see that it's foo5a that's being MEANSed, and the foo6 is the nested definition, and the foo5b follows the whole thing.

This shows up for real in the PDPADBNO where we have "a data breach | occurred".

But we don't have a very good way of doing this -- the ~|^|~ combinator isn't smart enough to do this job.

To make all this work, we would need the sameOrNextLine function to be able to sense the position at the start of foo1a, and refuse to undeeper past it.

Now trying to figure out how the SL and the Parser all interact so as to be able to get our hands on the (_,n) of the SLParser.

** The SLParser is really a State Depth Parser

We reinvented this particular wheel. When refactoring this we need to see if the ~(value, state)~ tuple has the usual order as seen in the ~State~ monad, or if it's ~(state, value)~.

** The ~|&|~ combinator

Let's have a ~|&|~ combinator that strictly does not match when the RHS is to the left of the LHS.

Now, didn't we have a sufficiently sophisticated indentation management system for the thing that handled pre and post labels above?

We even had a lookahead matcher that anticipated where the next line fell. So maybe we should go look at that again and see if we can reuse any of it.

[TODO].

What we want to be able to say: myindented thingWithMeans

should match a foo3 MEANS foo4

but not foo1 MEANS fo2

how would this work?

thingWithMeans would be inside the myindented, and match because it is ~foo3 MEANS ( foo4 )~ with notihign between the foo3 and the MEANS.

What about

|   | foo7 |       |      |
|   |      | MEANS | foo8 |
|   |      |       |      |

?

There would be an EOL in the way, which we would accept

|   | foo9 | MEANS | foo10 |

And, on the same line, we should be fine with Foo9 ( MEANS ( foo10 ))


** let's look at an example of how this works

pTypeDeclaration lets us say something like

| DECLARE | someTerm | :: | MyTermType | AKA | someAlias | TYPICALLY | Yes | (optional linebreak) | HAS | someAttribute |                | IS | A | TypeSig |
|         |          |    |            |     |           |           |     |                      |     | MEANS         | someDefinition |    |   |         |
|         |          |    |            |     |           |           |     |                      |     |               |                |    |   |         |

The component parsers are:
- declareLimb: slKeyValuesAka |&| parseHas
  - slKeyValuesAka: slAKA slKeyValues
    - slAKA: nestedHorn $ baseParser (=slKeyValues), optional akapart, optional typically
    - slKeyValues: someLiftSL pNumOrText, optional slTypeSig
    - slTypeSig: IS A TypeSig
  - parseHas: pToken Has |>| sameDepth declareLimb

Note that there are two levels of declareLimb going on! The first level defines ~someTerm~.

The second level, called via parseHas, defines ~someAttribute~.

And it is that ~someAttribute~ which takes ~MEANS someDefintion~ by way of the ~nestedHorn~.

The |&| allows an optional linebreak between ~TYPICALLY Yes~ and ~HAS someAttribute~.

The ~nestedHorn~, in turn, also uses a |&| combinator to look for the MEANS.

Crucially, it may be important to remain in SLParser context all the way. Can the sameOrNextLine operator |&| afford to insist that it end with undeepers? This may cause problems for the recursed ~HAS someAttribute~ parser. To investigate.

* Indentation Parsing

We use ( and ) to represent going deeper and going undeeper.

See the [[https://github.com/smucclaw/dsl/blob/main/lib/haskell/natural4/src/LS/Lib.hs#L340][insertparen]] function in the parser to see how preprocessing happens.

There are some tricky situations that result from conceptually separate /lines/ being parsed under the same indentation /tree/.

** Labels in boolstructs

Our And/Or trees (using the AnyAll library) have the notion of a PrePost label used to capture prefix/suffix text around a sutbree.

*** Indentation 1: a tree might look like:
:PROPERTIES:
:TABLE_EXPORT_FILE: ../test/boolstruct-indentation-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| Qualifies |    |           |        |
| MEANS     | 1. | walks     |        |
| AND       | 2. | either of |        |
|           |    | 2a.       | eats   |
|           | OR | 2b.       | drinks |

Here we see that the subtrees carry structured labels -- the "1. 2. 2a. 2b." bits of text need to be preserved as set apart from the body of the tree.

And we see that subtree 2 has a pre-label, "either of". It is an OR tree. Its children are 2a. eats, 2b. drinks.

Conceptually easy, right?

But the parser needs to handle this input stream:

#+begin_src
  AND ( "2." ( "either of" "2a." ( "eats" ) ...
#+end_src

Note the lack of parenthesis between "either of" and "2a.". This is liable to confuse the parser.

What do we want?

We want the "2a. eats OR 2b. drinks" part to be organized under a Pre label "2. either of".

But achieving that is difficult.

The "OR" construct under "2." would ordinarily begin at the column of the "OR". But for that to work, the OR would need to somehow synthesize a virtual ) ( between "either of" and "2a.". We don't currently have a way to push into the stream.

Also, consider that there are alternative ways of indenting the same rule:

*** Indentation 2: A similar tree might look like this
:PROPERTIES:
:TABLE_EXPORT_FILE: ../test/boolstruct-indentation-2.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| Qualifies |    |       |           |
| MEANS     | 1. | walks |           |
| AND       | 2. |       | either of |
|           |    | 2a.   | eats      |
|           | OR | 2b.   | drinks    |

Here the stream is

#+begin_src 
  AND ( "2." ( ( "either of" EOL ( "2a." ( "eats" ) ) OR ( "2b." ( "drinks" ) ) ) ) )
#+end_src

*** Indentation 3: An equally valid tree might look like this
:PROPERTIES:
:TABLE_EXPORT_FILE: ../test/boolstruct-indentation-3.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| Qualifies |    |       |           |
| MEANS     | 1. | walks |           |
| AND       |    | 2.    | either of |
|           |    | 2a.   | eats      |
|           | OR | 2b.   | drinks    |

Here the stream is

#+begin_src
  AND ( ( "2." ( "either of" ) "2a." ( eats ) ) OR ( "2b." ( "drinks" ) ...
#+end_src

*** Solving indentation

All these alternatives need to be parsed and organized into the same output structure.

This job falls to the ~term~ function in ~Parser.hs~.

That function needs to handle the following cases:

- label's last word is directly above  the first word below
- label's last word is to the left of  the first word below
- label's last word is to the right of the first word below

Yes, it's possible for labels to have multiple words; or just a single word. We treat the single-word case as a trivial case of the multi-word case.


* infrastructure

I have quite forgotten what was going on with all this Classy stuff.

#+NAME: lens magic
#+begin_src haskell
  {-# LANGUAGE TemplateHaskell #-}
  {-# OPTIONS_GHC -ddump-splices -dsuppress-uniques #-}

  module Classy where

  import Control.Lens

#+end_src

