entrypoints Rule ;

TypeDecl. Rule ::= "DECLARE" IsA Fields ;

IsAType.     IsA ::= Text "IS A" Text ;
IsANoType.   IsA ::= Text ;

separator nonempty IsA ";" ;
Has.         Fields ::= "HAS" [IsA] ;
EmptyFields. Fields ::= ;

-- Any rule can have GIVEN
Given.     Rule ::= "GIVEN" [IsA] Rule ;

-- Regulatives
RegSimple. Rule ::= "EVERY" BoolStruct Deontic BoolStruct ;
RegWho. Rule ::= "EVERY" BoolStruct Who Deontic BoolStruct ;
RegWhoInline. Rule ::= "EVERY" BoolStruct Who InlineHornlike Deontic BoolStruct ;


-- text MEANS BoolStruct is going to be translated into RPBoolStruct text IS bsr
HornlikeMeans. Rule ::= Text "MEANS" BoolStruct ;

-- DECIDE text IS BoolStruct works to be a RelationalPredicate already,
-- because there is no MEANS that breaks the RelationalPredicate
HornlikeDecide. Rule ::= "DECIDE" RelationalPredicate ;
HornlikeDecideIf. Rule ::= "DECIDE" RelationalPredicate "IF" BoolStruct ;

-- Only Hornlikes have GIVETH
HlikeGiveth. Rule ::= "GIVETH" IsA "DECIDE" RelationalPredicate ;
HlikeGivethIf. Rule ::= "GIVETH" IsA "DECIDE" RelationalPredicate "IF" BoolStruct ;

rules Deontic ::= "MUST" | "MAY" | "SHANT" ;

WhoSimple. Who ::= "WHO" BoolStruct ;

MeansInline. InlineHornlike ::= "MEANS" BoolStruct ;



-- RelationalPredicate
RPMT. RelationalPredicate ::= [MTExpr] ;
RPBoolStructR. RelationalPredicate ::= [MTExpr] RPRel BoolStruct1  ;  -- eyes IS (left IS blue AND right IS brown)
-- Commented out: this in combination with BoolStruct being a single RelationalPredicate causes 3 r/r conflicts
-- RPConstraint. RelationalPredicate ::=  [MTExpr] RPRel [MTExpr]  ;   -- eyes IS blue

-- Commented out: I believe that many of the uses of RPnary in the wild are covered by BoolStruct constructors.
-- That and also because it introduces 62 conflicts.
-- RPnary. RelationalPredicate ::= RPRel [RelationalPredicate] ; -- "NEVER GO FULL LISP!" "we went full Lisp".
-- separator nonempty RelationalPredicate "," ;

MTT. MTExpr ::= Text    ;
MTI. MTExpr ::= Integer ;
MTF. MTExpr ::= Double  ;
MTB. MTExpr ::= Bool    ;
-- MTString. MTExpr ::= String ;

rules Bool ::= "True" | "False" ;
rules Text ::= String | Token ;
token Token letter (letter | '_' | '\'' | '-')*  ;
separator nonempty MTExpr " " ;

-- BoolStruct
Any . BoolStruct1 ::=  "ANY" "(" [BoolStruct] ")" ;
AnyPrePost . BoolStruct1 ::= Text  "ANY" "(" [BoolStruct] ")" Text ;
AnyPre . BoolStruct1 ::= Text "ANY"  "(" [BoolStruct] ")" ;
All . BoolStruct1 ::=  "ALL" "(" [BoolStruct] ")" ;
AllPre . BoolStruct1 ::= Text "ALL" "(" [BoolStruct] ")" ;
AllPrePost . BoolStruct1 ::= Text  "ALL" "(" [BoolStruct] ")" Text ;
Not . BoolStruct1 ::= "NOT" BoolStruct1 ;
Unless. BoolStruct ::=  BoolStruct1 "UNLESS" BoolStruct1  ;

-- If RPConstraint is uncommented, then this rule introduces 3 reduce/reduce conflicts.
-- Can be fixed by prefixing it with something, but I think it's simpler to transform
--     RPBoolStructR x rel (Leaf (RPMT y))   into
--     RPConstraint  x rel             y
Leaf . BoolStruct1 ::= RelationalPredicate ;

separator nonempty BoolStruct "," ;

coercions BoolStruct 1 ;

-- RPRel
RPis . RPRel ::= "IS" ;
RPhas . RPRel ::= "HAS" ;
RPeq . RPRel ::= "EQUALS" ;
RPlt . RPRel ::= "<" ;
RPlte . RPRel ::= "<=" ;
RPgt . RPRel ::= ">" ;
RPgte . RPRel ::= ">=" ;
RPelem . RPRel ::= "IN" ;
RPnotElem . RPRel ::= "NOT IN" ;
RPnot . RPRel ::= "NOT" ;
RPand . RPRel ::= "AND" ;
RPor . RPRel ::= "OR" ;
RPsum . RPRel ::= "SUM" ;
RPproduct . RPRel ::= "PRODUCT" ;
RPminus . RPRel ::= "MINUS" ;
RPdivide . RPRel ::= "DIVIDE" ;
RPmodulo . RPRel ::= "MODULO" ;
RPsubjectTo . RPRel ::= "SUBJECT TO" ;
RPmin . RPRel ::= "MIN" ;
RPmax . RPRel ::= "MAX" ;
RPmap . RPRel ::= "MAP" ;

RPTC   . RPRel ::= TComparison ;
TBefore. TComparison ::= "BEFORE" ;
TAfter . TComparison ::= "AFTER" ;
TBy    . TComparison ::= "BY" ;
TOn    . TComparison ::= "ON" ;
TVague . TComparison ::= "ABOUT" ;
