-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from TextuaL4/ParTextuaL.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pRule -> Rule                               (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Token -> L_Token                                   (4)
	Rule -> 'DECLARE' IsA Fields                       (5)
	Rule -> 'GIVEN' ListIsA Rule                       (6)
	Rule -> 'EVERY' BoolStruct Deontic BoolStruct      (7)
	Rule -> 'EVERY' BoolStruct Who Deontic BoolStruct   (8)
	Rule -> 'EVERY' BoolStruct Who InlineHornlike Deontic BoolStruct   (9)
	Rule -> Text 'MEANS' BoolStruct                    (10)
	Rule -> 'DECIDE' RelationalPredicate               (11)
	Rule -> 'DECIDE' RelationalPredicate 'IF' BoolStruct   (12)
	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate   (13)
	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate 'IF' BoolStruct   (14)
	IsA -> Text 'IS' 'A' Text                          (15)
	IsA -> Text                                        (16)
	ListIsA -> IsA                                     (17)
	ListIsA -> IsA ';' ListIsA                         (18)
	Fields -> 'HAS' ListIsA                            (19)
	Fields ->                                          (20)
	Deontic -> 'MUST'                                  (21)
	Deontic -> 'MAY'                                   (22)
	Deontic -> 'SHANT'                                 (23)
	Who -> 'WHO' BoolStruct                            (24)
	InlineHornlike -> 'MEANS' BoolStruct               (25)
	RelationalPredicate -> ListMTExpr                  (26)
	RelationalPredicate -> ListMTExpr RPRel BoolStruct   (27)
	MTExpr -> Text                                     (28)
	MTExpr -> Integer                                  (29)
	MTExpr -> Double                                   (30)
	MTExpr -> Bool                                     (31)
	Bool -> 'True'                                     (32)
	Bool -> 'False'                                    (33)
	Text -> String                                     (34)
	Text -> Token                                      (35)
	ListMTExpr -> MTExpr                               (36)
	ListMTExpr -> MTExpr ListMTExpr                    (37)
	BoolStruct -> 'ANY' '(' ListBoolStruct ')'         (38)
	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')' Text   (39)
	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')'    (40)
	BoolStruct -> 'ALL' '(' ListBoolStruct ')'         (41)
	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')'    (42)
	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')' Text   (43)
	BoolStruct -> 'NOT' BoolStruct                     (44)
	BoolStruct -> RelationalPredicate                  (45)
	ListBoolStruct -> BoolStruct                       (46)
	ListBoolStruct -> BoolStruct ',' ListBoolStruct    (47)
	RPRel -> 'IS'                                      (48)
	RPRel -> 'HAS'                                     (49)
	RPRel -> 'EQUALS'                                  (50)
	RPRel -> '<'                                       (51)
	RPRel -> '<='                                      (52)
	RPRel -> '>'                                       (53)
	RPRel -> '>='                                      (54)
	RPRel -> 'IN'                                      (55)
	RPRel -> 'NOT' 'IN'                                (56)
	RPRel -> 'NOT'                                     (57)
	RPRel -> 'AND'                                     (58)
	RPRel -> 'OR'                                      (59)
	RPRel -> 'SUM'                                     (60)
	RPRel -> 'PRODUCT'                                 (61)
	RPRel -> 'MINUS'                                   (62)
	RPRel -> 'DIVIDE'                                  (63)
	RPRel -> 'MODULO'                                  (64)
	RPRel -> 'SUBJECT' 'TO'                            (65)
	RPRel -> 'MIN'                                     (66)
	RPRel -> 'MAX'                                     (67)
	RPRel -> 'MAP'                                     (68)
	RPRel -> TComparison                               (69)
	TComparison -> 'BEFORE'                            (70)
	TComparison -> 'AFTER'                             (71)
	TComparison -> 'BY'                                (72)
	TComparison -> 'ON'                                (73)
	TComparison -> 'ABOUT'                             (74)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'<'            { PT _ (TS _ 5) }
	'<='           { PT _ (TS _ 6) }
	'>'            { PT _ (TS _ 7) }
	'>='           { PT _ (TS _ 8) }
	'A'            { PT _ (TS _ 9) }
	'ABOUT'        { PT _ (TS _ 10) }
	'AFTER'        { PT _ (TS _ 11) }
	'ALL'          { PT _ (TS _ 12) }
	'AND'          { PT _ (TS _ 13) }
	'ANY'          { PT _ (TS _ 14) }
	'BEFORE'       { PT _ (TS _ 15) }
	'BY'           { PT _ (TS _ 16) }
	'DECIDE'       { PT _ (TS _ 17) }
	'DECLARE'      { PT _ (TS _ 18) }
	'DIVIDE'       { PT _ (TS _ 19) }
	'EQUALS'       { PT _ (TS _ 20) }
	'EVERY'        { PT _ (TS _ 21) }
	'False'        { PT _ (TS _ 22) }
	'GIVEN'        { PT _ (TS _ 23) }
	'GIVETH'       { PT _ (TS _ 24) }
	'HAS'          { PT _ (TS _ 25) }
	'IF'           { PT _ (TS _ 26) }
	'IN'           { PT _ (TS _ 27) }
	'IS'           { PT _ (TS _ 28) }
	'MAP'          { PT _ (TS _ 29) }
	'MAX'          { PT _ (TS _ 30) }
	'MAY'          { PT _ (TS _ 31) }
	'MEANS'        { PT _ (TS _ 32) }
	'MIN'          { PT _ (TS _ 33) }
	'MINUS'        { PT _ (TS _ 34) }
	'MODULO'       { PT _ (TS _ 35) }
	'MUST'         { PT _ (TS _ 36) }
	'NOT'          { PT _ (TS _ 37) }
	'ON'           { PT _ (TS _ 38) }
	'OR'           { PT _ (TS _ 39) }
	'PRODUCT'      { PT _ (TS _ 40) }
	'SHANT'        { PT _ (TS _ 41) }
	'SUBJECT'      { PT _ (TS _ 42) }
	'SUM'          { PT _ (TS _ 43) }
	'TO'           { PT _ (TS _ 44) }
	'True'         { PT _ (TS _ 45) }
	'WHO'          { PT _ (TS _ 46) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }
	L_Token        { PT _ (T_Token $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pRule    rule  0
	Double          rule  1
	Integer         rule  2
	String          rule  3
	Token           rule  4
	Rule            rules 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
	IsA             rules 15, 16
	ListIsA         rules 17, 18
	Fields          rules 19, 20
	Deontic         rules 21, 22, 23
	Who             rule  24
	InlineHornlike  rule  25
	RelationalPredicate rules 26, 27
	MTExpr          rules 28, 29, 30, 31
	Bool            rules 32, 33
	Text            rules 34, 35
	ListMTExpr      rules 36, 37
	BoolStruct      rules 38, 39, 40, 41, 42, 43, 44, 45
	ListBoolStruct  rules 46, 47
	RPRel           rules 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69
	TComparison     rules 70, 71, 72, 73, 74

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pRule -> . Rule                              (rule 0)

	'DECIDE'       shift, and enter state 7
	'DECLARE'      shift, and enter state 8
	'EVERY'        shift, and enter state 9
	'GIVEN'        shift, and enter state 10
	'GIVETH'       shift, and enter state 11
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	String         goto state 3
	Token          goto state 4
	Rule           goto state 5
	Text           goto state 6

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	')'            reduce using rule 1
	','            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'ABOUT'        reduce using rule 1
	'AFTER'        reduce using rule 1
	'AND'          reduce using rule 1
	'BEFORE'       reduce using rule 1
	'BY'           reduce using rule 1
	'DIVIDE'       reduce using rule 1
	'EQUALS'       reduce using rule 1
	'False'        reduce using rule 1
	'HAS'          reduce using rule 1
	'IF'           reduce using rule 1
	'IN'           reduce using rule 1
	'IS'           reduce using rule 1
	'MAP'          reduce using rule 1
	'MAX'          reduce using rule 1
	'MAY'          reduce using rule 1
	'MEANS'        reduce using rule 1
	'MIN'          reduce using rule 1
	'MINUS'        reduce using rule 1
	'MODULO'       reduce using rule 1
	'MUST'         reduce using rule 1
	'NOT'          reduce using rule 1
	'ON'           reduce using rule 1
	'OR'           reduce using rule 1
	'PRODUCT'      reduce using rule 1
	'SHANT'        reduce using rule 1
	'SUBJECT'      reduce using rule 1
	'SUM'          reduce using rule 1
	'True'         reduce using rule 1
	'WHO'          reduce using rule 1
	L_doubl        reduce using rule 1
	L_integ        reduce using rule 1
	L_quoted       reduce using rule 1
	L_Token        reduce using rule 1
	%eof           reduce using rule 1


State 3

	Text -> String .                                    (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34
	';'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'ABOUT'        reduce using rule 34
	'AFTER'        reduce using rule 34
	'ALL'          reduce using rule 34
	'AND'          reduce using rule 34
	'ANY'          reduce using rule 34
	'BEFORE'       reduce using rule 34
	'BY'           reduce using rule 34
	'DECIDE'       reduce using rule 34
	'DECLARE'      reduce using rule 34
	'DIVIDE'       reduce using rule 34
	'EQUALS'       reduce using rule 34
	'EVERY'        reduce using rule 34
	'False'        reduce using rule 34
	'GIVEN'        reduce using rule 34
	'GIVETH'       reduce using rule 34
	'HAS'          reduce using rule 34
	'IF'           reduce using rule 34
	'IN'           reduce using rule 34
	'IS'           reduce using rule 34
	'MAP'          reduce using rule 34
	'MAX'          reduce using rule 34
	'MAY'          reduce using rule 34
	'MEANS'        reduce using rule 34
	'MIN'          reduce using rule 34
	'MINUS'        reduce using rule 34
	'MODULO'       reduce using rule 34
	'MUST'         reduce using rule 34
	'NOT'          reduce using rule 34
	'ON'           reduce using rule 34
	'OR'           reduce using rule 34
	'PRODUCT'      reduce using rule 34
	'SHANT'        reduce using rule 34
	'SUBJECT'      reduce using rule 34
	'SUM'          reduce using rule 34
	'True'         reduce using rule 34
	'WHO'          reduce using rule 34
	L_doubl        reduce using rule 34
	L_integ        reduce using rule 34
	L_quoted       reduce using rule 34
	L_Token        reduce using rule 34
	%eof           reduce using rule 34


State 4

	Text -> Token .                                     (rule 35)

	')'            reduce using rule 35
	','            reduce using rule 35
	';'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'ABOUT'        reduce using rule 35
	'AFTER'        reduce using rule 35
	'ALL'          reduce using rule 35
	'AND'          reduce using rule 35
	'ANY'          reduce using rule 35
	'BEFORE'       reduce using rule 35
	'BY'           reduce using rule 35
	'DECIDE'       reduce using rule 35
	'DECLARE'      reduce using rule 35
	'DIVIDE'       reduce using rule 35
	'EQUALS'       reduce using rule 35
	'EVERY'        reduce using rule 35
	'False'        reduce using rule 35
	'GIVEN'        reduce using rule 35
	'GIVETH'       reduce using rule 35
	'HAS'          reduce using rule 35
	'IF'           reduce using rule 35
	'IN'           reduce using rule 35
	'IS'           reduce using rule 35
	'MAP'          reduce using rule 35
	'MAX'          reduce using rule 35
	'MAY'          reduce using rule 35
	'MEANS'        reduce using rule 35
	'MIN'          reduce using rule 35
	'MINUS'        reduce using rule 35
	'MODULO'       reduce using rule 35
	'MUST'         reduce using rule 35
	'NOT'          reduce using rule 35
	'ON'           reduce using rule 35
	'OR'           reduce using rule 35
	'PRODUCT'      reduce using rule 35
	'SHANT'        reduce using rule 35
	'SUBJECT'      reduce using rule 35
	'SUM'          reduce using rule 35
	'True'         reduce using rule 35
	'WHO'          reduce using rule 35
	L_doubl        reduce using rule 35
	L_integ        reduce using rule 35
	L_quoted       reduce using rule 35
	L_Token        reduce using rule 35
	%eof           reduce using rule 35


State 5

	%start_pRule -> Rule .                              (rule 0)

	%eof           accept


State 6

	Rule -> Text . 'MEANS' BoolStruct                   (rule 10)

	'MEANS'        shift, and enter state 35


State 7

	Rule -> 'DECIDE' . RelationalPredicate              (rule 11)
	Rule -> 'DECIDE' . RelationalPredicate 'IF' BoolStruct    (rule 12)

	'False'        shift, and enter state 28
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 33
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 34
	ListMTExpr     goto state 24

State 8

	Rule -> 'DECLARE' . IsA Fields                      (rule 5)

	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	String         goto state 3
	Token          goto state 4
	IsA            goto state 32
	Text           goto state 15

State 9

	Rule -> 'EVERY' . BoolStruct Deontic BoolStruct     (rule 7)
	Rule -> 'EVERY' . BoolStruct Who Deontic BoolStruct    (rule 8)
	Rule -> 'EVERY' . BoolStruct Who InlineHornlike Deontic BoolStruct    (rule 9)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 25

State 10

	Rule -> 'GIVEN' . ListIsA Rule                      (rule 6)

	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	String         goto state 3
	Token          goto state 4
	IsA            goto state 16
	ListIsA        goto state 17
	Text           goto state 15

State 11

	Rule -> 'GIVETH' . IsA 'DECIDE' RelationalPredicate    (rule 13)
	Rule -> 'GIVETH' . IsA 'DECIDE' RelationalPredicate 'IF' BoolStruct    (rule 14)

	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	String         goto state 3
	Token          goto state 4
	IsA            goto state 14
	Text           goto state 15

State 12

	String -> L_quoted .                                (rule 3)

	')'            reduce using rule 3
	','            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'ABOUT'        reduce using rule 3
	'AFTER'        reduce using rule 3
	'ALL'          reduce using rule 3
	'AND'          reduce using rule 3
	'ANY'          reduce using rule 3
	'BEFORE'       reduce using rule 3
	'BY'           reduce using rule 3
	'DECIDE'       reduce using rule 3
	'DECLARE'      reduce using rule 3
	'DIVIDE'       reduce using rule 3
	'EQUALS'       reduce using rule 3
	'EVERY'        reduce using rule 3
	'False'        reduce using rule 3
	'GIVEN'        reduce using rule 3
	'GIVETH'       reduce using rule 3
	'HAS'          reduce using rule 3
	'IF'           reduce using rule 3
	'IN'           reduce using rule 3
	'IS'           reduce using rule 3
	'MAP'          reduce using rule 3
	'MAX'          reduce using rule 3
	'MAY'          reduce using rule 3
	'MEANS'        reduce using rule 3
	'MIN'          reduce using rule 3
	'MINUS'        reduce using rule 3
	'MODULO'       reduce using rule 3
	'MUST'         reduce using rule 3
	'NOT'          reduce using rule 3
	'ON'           reduce using rule 3
	'OR'           reduce using rule 3
	'PRODUCT'      reduce using rule 3
	'SHANT'        reduce using rule 3
	'SUBJECT'      reduce using rule 3
	'SUM'          reduce using rule 3
	'True'         reduce using rule 3
	'WHO'          reduce using rule 3
	L_doubl        reduce using rule 3
	L_integ        reduce using rule 3
	L_quoted       reduce using rule 3
	L_Token        reduce using rule 3
	%eof           reduce using rule 3


State 13

	Token -> L_Token .                                  (rule 4)

	')'            reduce using rule 4
	','            reduce using rule 4
	';'            reduce using rule 4
	'<'            reduce using rule 4
	'<='           reduce using rule 4
	'>'            reduce using rule 4
	'>='           reduce using rule 4
	'ABOUT'        reduce using rule 4
	'AFTER'        reduce using rule 4
	'ALL'          reduce using rule 4
	'AND'          reduce using rule 4
	'ANY'          reduce using rule 4
	'BEFORE'       reduce using rule 4
	'BY'           reduce using rule 4
	'DECIDE'       reduce using rule 4
	'DECLARE'      reduce using rule 4
	'DIVIDE'       reduce using rule 4
	'EQUALS'       reduce using rule 4
	'EVERY'        reduce using rule 4
	'False'        reduce using rule 4
	'GIVEN'        reduce using rule 4
	'GIVETH'       reduce using rule 4
	'HAS'          reduce using rule 4
	'IF'           reduce using rule 4
	'IN'           reduce using rule 4
	'IS'           reduce using rule 4
	'MAP'          reduce using rule 4
	'MAX'          reduce using rule 4
	'MAY'          reduce using rule 4
	'MEANS'        reduce using rule 4
	'MIN'          reduce using rule 4
	'MINUS'        reduce using rule 4
	'MODULO'       reduce using rule 4
	'MUST'         reduce using rule 4
	'NOT'          reduce using rule 4
	'ON'           reduce using rule 4
	'OR'           reduce using rule 4
	'PRODUCT'      reduce using rule 4
	'SHANT'        reduce using rule 4
	'SUBJECT'      reduce using rule 4
	'SUM'          reduce using rule 4
	'True'         reduce using rule 4
	'WHO'          reduce using rule 4
	L_doubl        reduce using rule 4
	L_integ        reduce using rule 4
	L_quoted       reduce using rule 4
	L_Token        reduce using rule 4
	%eof           reduce using rule 4


State 14

	Rule -> 'GIVETH' IsA . 'DECIDE' RelationalPredicate    (rule 13)
	Rule -> 'GIVETH' IsA . 'DECIDE' RelationalPredicate 'IF' BoolStruct    (rule 14)

	'DECIDE'       shift, and enter state 82


State 15

	IsA -> Text . 'IS' 'A' Text                         (rule 15)
	IsA -> Text .                                       (rule 16)

	';'            reduce using rule 16
	'DECIDE'       reduce using rule 16
	'DECLARE'      reduce using rule 16
	'EVERY'        reduce using rule 16
	'GIVEN'        reduce using rule 16
	'GIVETH'       reduce using rule 16
	'HAS'          reduce using rule 16
	'IS'           shift, and enter state 81
	L_quoted       reduce using rule 16
	L_Token        reduce using rule 16
	%eof           reduce using rule 16


State 16

	ListIsA -> IsA .                                    (rule 17)
	ListIsA -> IsA . ';' ListIsA                        (rule 18)

	';'            shift, and enter state 80
	'DECIDE'       reduce using rule 17
	'DECLARE'      reduce using rule 17
	'EVERY'        reduce using rule 17
	'GIVEN'        reduce using rule 17
	'GIVETH'       reduce using rule 17
	L_quoted       reduce using rule 17
	L_Token        reduce using rule 17
	%eof           reduce using rule 17


State 17

	Rule -> 'GIVEN' ListIsA . Rule                      (rule 6)

	'DECIDE'       shift, and enter state 7
	'DECLARE'      shift, and enter state 8
	'EVERY'        shift, and enter state 9
	'GIVEN'        shift, and enter state 10
	'GIVETH'       shift, and enter state 11
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	String         goto state 3
	Token          goto state 4
	Rule           goto state 79
	Text           goto state 6

State 18

	MTExpr -> Double .                                  (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30
	'<'            reduce using rule 30
	'<='           reduce using rule 30
	'>'            reduce using rule 30
	'>='           reduce using rule 30
	'ABOUT'        reduce using rule 30
	'AFTER'        reduce using rule 30
	'AND'          reduce using rule 30
	'BEFORE'       reduce using rule 30
	'BY'           reduce using rule 30
	'DIVIDE'       reduce using rule 30
	'EQUALS'       reduce using rule 30
	'False'        reduce using rule 30
	'HAS'          reduce using rule 30
	'IF'           reduce using rule 30
	'IN'           reduce using rule 30
	'IS'           reduce using rule 30
	'MAP'          reduce using rule 30
	'MAX'          reduce using rule 30
	'MAY'          reduce using rule 30
	'MEANS'        reduce using rule 30
	'MIN'          reduce using rule 30
	'MINUS'        reduce using rule 30
	'MODULO'       reduce using rule 30
	'MUST'         reduce using rule 30
	'NOT'          reduce using rule 30
	'ON'           reduce using rule 30
	'OR'           reduce using rule 30
	'PRODUCT'      reduce using rule 30
	'SHANT'        reduce using rule 30
	'SUBJECT'      reduce using rule 30
	'SUM'          reduce using rule 30
	'True'         reduce using rule 30
	'WHO'          reduce using rule 30
	L_doubl        reduce using rule 30
	L_integ        reduce using rule 30
	L_quoted       reduce using rule 30
	L_Token        reduce using rule 30
	%eof           reduce using rule 30


State 19

	MTExpr -> Integer .                                 (rule 29)

	')'            reduce using rule 29
	','            reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	'ABOUT'        reduce using rule 29
	'AFTER'        reduce using rule 29
	'AND'          reduce using rule 29
	'BEFORE'       reduce using rule 29
	'BY'           reduce using rule 29
	'DIVIDE'       reduce using rule 29
	'EQUALS'       reduce using rule 29
	'False'        reduce using rule 29
	'HAS'          reduce using rule 29
	'IF'           reduce using rule 29
	'IN'           reduce using rule 29
	'IS'           reduce using rule 29
	'MAP'          reduce using rule 29
	'MAX'          reduce using rule 29
	'MAY'          reduce using rule 29
	'MEANS'        reduce using rule 29
	'MIN'          reduce using rule 29
	'MINUS'        reduce using rule 29
	'MODULO'       reduce using rule 29
	'MUST'         reduce using rule 29
	'NOT'          reduce using rule 29
	'ON'           reduce using rule 29
	'OR'           reduce using rule 29
	'PRODUCT'      reduce using rule 29
	'SHANT'        reduce using rule 29
	'SUBJECT'      reduce using rule 29
	'SUM'          reduce using rule 29
	'True'         reduce using rule 29
	'WHO'          reduce using rule 29
	L_doubl        reduce using rule 29
	L_integ        reduce using rule 29
	L_quoted       reduce using rule 29
	L_Token        reduce using rule 29
	%eof           reduce using rule 29


State 20

	BoolStruct -> RelationalPredicate .                 (rule 45)

	')'            reduce using rule 45
	','            reduce using rule 45
	'IF'           reduce using rule 45
	'MAY'          reduce using rule 45
	'MEANS'        reduce using rule 45
	'MUST'         reduce using rule 45
	'SHANT'        reduce using rule 45
	'WHO'          reduce using rule 45
	%eof           reduce using rule 45


State 21

	ListMTExpr -> MTExpr .                              (rule 36)
	ListMTExpr -> MTExpr . ListMTExpr                   (rule 37)

	')'            reduce using rule 36
	','            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'ABOUT'        reduce using rule 36
	'AFTER'        reduce using rule 36
	'AND'          reduce using rule 36
	'BEFORE'       reduce using rule 36
	'BY'           reduce using rule 36
	'DIVIDE'       reduce using rule 36
	'EQUALS'       reduce using rule 36
	'False'        shift, and enter state 28
	'HAS'          reduce using rule 36
	'IF'           reduce using rule 36
	'IN'           reduce using rule 36
	'IS'           reduce using rule 36
	'MAP'          reduce using rule 36
	'MAX'          reduce using rule 36
	'MAY'          reduce using rule 36
	'MEANS'        reduce using rule 36
	'MIN'          reduce using rule 36
	'MINUS'        reduce using rule 36
	'MODULO'       reduce using rule 36
	'MUST'         reduce using rule 36
	'NOT'          reduce using rule 36
	'ON'           reduce using rule 36
	'OR'           reduce using rule 36
	'PRODUCT'      reduce using rule 36
	'SHANT'        reduce using rule 36
	'SUBJECT'      reduce using rule 36
	'SUM'          reduce using rule 36
	'True'         shift, and enter state 30
	'WHO'          reduce using rule 36
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13
	%eof           reduce using rule 36

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 34
	ListMTExpr     goto state 78

State 22

	MTExpr -> Bool .                                    (rule 31)

	')'            reduce using rule 31
	','            reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	'ABOUT'        reduce using rule 31
	'AFTER'        reduce using rule 31
	'AND'          reduce using rule 31
	'BEFORE'       reduce using rule 31
	'BY'           reduce using rule 31
	'DIVIDE'       reduce using rule 31
	'EQUALS'       reduce using rule 31
	'False'        reduce using rule 31
	'HAS'          reduce using rule 31
	'IF'           reduce using rule 31
	'IN'           reduce using rule 31
	'IS'           reduce using rule 31
	'MAP'          reduce using rule 31
	'MAX'          reduce using rule 31
	'MAY'          reduce using rule 31
	'MEANS'        reduce using rule 31
	'MIN'          reduce using rule 31
	'MINUS'        reduce using rule 31
	'MODULO'       reduce using rule 31
	'MUST'         reduce using rule 31
	'NOT'          reduce using rule 31
	'ON'           reduce using rule 31
	'OR'           reduce using rule 31
	'PRODUCT'      reduce using rule 31
	'SHANT'        reduce using rule 31
	'SUBJECT'      reduce using rule 31
	'SUM'          reduce using rule 31
	'True'         reduce using rule 31
	'WHO'          reduce using rule 31
	L_doubl        reduce using rule 31
	L_integ        reduce using rule 31
	L_quoted       reduce using rule 31
	L_Token        reduce using rule 31
	%eof           reduce using rule 31


State 23

	MTExpr -> Text .                                    (rule 28)
	BoolStruct -> Text . 'ANY' '(' ListBoolStruct ')' Text    (rule 39)
	BoolStruct -> Text . 'ANY' '(' ListBoolStruct ')'    (rule 40)
	BoolStruct -> Text . 'ALL' '(' ListBoolStruct ')'    (rule 42)
	BoolStruct -> Text . 'ALL' '(' ListBoolStruct ')' Text    (rule 43)

	')'            reduce using rule 28
	','            reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'ABOUT'        reduce using rule 28
	'AFTER'        reduce using rule 28
	'ALL'          shift, and enter state 76
	'AND'          reduce using rule 28
	'ANY'          shift, and enter state 77
	'BEFORE'       reduce using rule 28
	'BY'           reduce using rule 28
	'DIVIDE'       reduce using rule 28
	'EQUALS'       reduce using rule 28
	'False'        reduce using rule 28
	'HAS'          reduce using rule 28
	'IF'           reduce using rule 28
	'IN'           reduce using rule 28
	'IS'           reduce using rule 28
	'MAP'          reduce using rule 28
	'MAX'          reduce using rule 28
	'MAY'          reduce using rule 28
	'MEANS'        reduce using rule 28
	'MIN'          reduce using rule 28
	'MINUS'        reduce using rule 28
	'MODULO'       reduce using rule 28
	'MUST'         reduce using rule 28
	'NOT'          reduce using rule 28
	'ON'           reduce using rule 28
	'OR'           reduce using rule 28
	'PRODUCT'      reduce using rule 28
	'SHANT'        reduce using rule 28
	'SUBJECT'      reduce using rule 28
	'SUM'          reduce using rule 28
	'True'         reduce using rule 28
	'WHO'          reduce using rule 28
	L_doubl        reduce using rule 28
	L_integ        reduce using rule 28
	L_quoted       reduce using rule 28
	L_Token        reduce using rule 28
	%eof           reduce using rule 28


State 24

	RelationalPredicate -> ListMTExpr .                 (rule 26)
	RelationalPredicate -> ListMTExpr . RPRel BoolStruct    (rule 27)

	')'            reduce using rule 26
	','            reduce using rule 26
	'<'            shift, and enter state 51
	'<='           shift, and enter state 52
	'>'            shift, and enter state 53
	'>='           shift, and enter state 54
	'ABOUT'        shift, and enter state 55
	'AFTER'        shift, and enter state 56
	'AND'          shift, and enter state 57
	'BEFORE'       shift, and enter state 58
	'BY'           shift, and enter state 59
	'DIVIDE'       shift, and enter state 60
	'EQUALS'       shift, and enter state 61
	'HAS'          shift, and enter state 62
	'IF'           reduce using rule 26
	'IN'           shift, and enter state 63
	'IS'           shift, and enter state 64
	'MAP'          shift, and enter state 65
	'MAX'          shift, and enter state 66
	'MAY'          reduce using rule 26
	'MEANS'        reduce using rule 26
	'MIN'          shift, and enter state 67
	'MINUS'        shift, and enter state 68
	'MODULO'       shift, and enter state 69
	'MUST'         reduce using rule 26
	'NOT'          shift, and enter state 70
	'ON'           shift, and enter state 71
	'OR'           shift, and enter state 72
	'PRODUCT'      shift, and enter state 73
	'SHANT'        reduce using rule 26
	'SUBJECT'      shift, and enter state 74
	'SUM'          shift, and enter state 75
	'WHO'          reduce using rule 26
	%eof           reduce using rule 26

	RPRel          goto state 49
	TComparison    goto state 50

State 25

	Rule -> 'EVERY' BoolStruct . Deontic BoolStruct     (rule 7)
	Rule -> 'EVERY' BoolStruct . Who Deontic BoolStruct    (rule 8)
	Rule -> 'EVERY' BoolStruct . Who InlineHornlike Deontic BoolStruct    (rule 9)

	'MAY'          shift, and enter state 45
	'MUST'         shift, and enter state 46
	'SHANT'        shift, and enter state 47
	'WHO'          shift, and enter state 48

	Deontic        goto state 43
	Who            goto state 44

State 26

	BoolStruct -> 'ALL' . '(' ListBoolStruct ')'        (rule 41)

	'('            shift, and enter state 42


State 27

	BoolStruct -> 'ANY' . '(' ListBoolStruct ')'        (rule 38)

	'('            shift, and enter state 41


State 28

	Bool -> 'False' .                                   (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'ABOUT'        reduce using rule 33
	'AFTER'        reduce using rule 33
	'AND'          reduce using rule 33
	'BEFORE'       reduce using rule 33
	'BY'           reduce using rule 33
	'DIVIDE'       reduce using rule 33
	'EQUALS'       reduce using rule 33
	'False'        reduce using rule 33
	'HAS'          reduce using rule 33
	'IF'           reduce using rule 33
	'IN'           reduce using rule 33
	'IS'           reduce using rule 33
	'MAP'          reduce using rule 33
	'MAX'          reduce using rule 33
	'MAY'          reduce using rule 33
	'MEANS'        reduce using rule 33
	'MIN'          reduce using rule 33
	'MINUS'        reduce using rule 33
	'MODULO'       reduce using rule 33
	'MUST'         reduce using rule 33
	'NOT'          reduce using rule 33
	'ON'           reduce using rule 33
	'OR'           reduce using rule 33
	'PRODUCT'      reduce using rule 33
	'SHANT'        reduce using rule 33
	'SUBJECT'      reduce using rule 33
	'SUM'          reduce using rule 33
	'True'         reduce using rule 33
	'WHO'          reduce using rule 33
	L_doubl        reduce using rule 33
	L_integ        reduce using rule 33
	L_quoted       reduce using rule 33
	L_Token        reduce using rule 33
	%eof           reduce using rule 33


State 29

	BoolStruct -> 'NOT' . BoolStruct                    (rule 44)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 40

State 30

	Bool -> 'True' .                                    (rule 32)

	')'            reduce using rule 32
	','            reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'ABOUT'        reduce using rule 32
	'AFTER'        reduce using rule 32
	'AND'          reduce using rule 32
	'BEFORE'       reduce using rule 32
	'BY'           reduce using rule 32
	'DIVIDE'       reduce using rule 32
	'EQUALS'       reduce using rule 32
	'False'        reduce using rule 32
	'HAS'          reduce using rule 32
	'IF'           reduce using rule 32
	'IN'           reduce using rule 32
	'IS'           reduce using rule 32
	'MAP'          reduce using rule 32
	'MAX'          reduce using rule 32
	'MAY'          reduce using rule 32
	'MEANS'        reduce using rule 32
	'MIN'          reduce using rule 32
	'MINUS'        reduce using rule 32
	'MODULO'       reduce using rule 32
	'MUST'         reduce using rule 32
	'NOT'          reduce using rule 32
	'ON'           reduce using rule 32
	'OR'           reduce using rule 32
	'PRODUCT'      reduce using rule 32
	'SHANT'        reduce using rule 32
	'SUBJECT'      reduce using rule 32
	'SUM'          reduce using rule 32
	'True'         reduce using rule 32
	'WHO'          reduce using rule 32
	L_doubl        reduce using rule 32
	L_integ        reduce using rule 32
	L_quoted       reduce using rule 32
	L_Token        reduce using rule 32
	%eof           reduce using rule 32


State 31

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	','            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'ABOUT'        reduce using rule 2
	'AFTER'        reduce using rule 2
	'AND'          reduce using rule 2
	'BEFORE'       reduce using rule 2
	'BY'           reduce using rule 2
	'DIVIDE'       reduce using rule 2
	'EQUALS'       reduce using rule 2
	'False'        reduce using rule 2
	'HAS'          reduce using rule 2
	'IF'           reduce using rule 2
	'IN'           reduce using rule 2
	'IS'           reduce using rule 2
	'MAP'          reduce using rule 2
	'MAX'          reduce using rule 2
	'MAY'          reduce using rule 2
	'MEANS'        reduce using rule 2
	'MIN'          reduce using rule 2
	'MINUS'        reduce using rule 2
	'MODULO'       reduce using rule 2
	'MUST'         reduce using rule 2
	'NOT'          reduce using rule 2
	'ON'           reduce using rule 2
	'OR'           reduce using rule 2
	'PRODUCT'      reduce using rule 2
	'SHANT'        reduce using rule 2
	'SUBJECT'      reduce using rule 2
	'SUM'          reduce using rule 2
	'True'         reduce using rule 2
	'WHO'          reduce using rule 2
	L_doubl        reduce using rule 2
	L_integ        reduce using rule 2
	L_quoted       reduce using rule 2
	L_Token        reduce using rule 2
	%eof           reduce using rule 2


State 32

	Rule -> 'DECLARE' IsA . Fields                      (rule 5)

	'HAS'          shift, and enter state 39
	%eof           reduce using rule 20

	Fields         goto state 38

State 33

	Rule -> 'DECIDE' RelationalPredicate .              (rule 11)
	Rule -> 'DECIDE' RelationalPredicate . 'IF' BoolStruct    (rule 12)

	'IF'           shift, and enter state 37
	%eof           reduce using rule 11


State 34

	MTExpr -> Text .                                    (rule 28)

	')'            reduce using rule 28
	','            reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'ABOUT'        reduce using rule 28
	'AFTER'        reduce using rule 28
	'AND'          reduce using rule 28
	'BEFORE'       reduce using rule 28
	'BY'           reduce using rule 28
	'DIVIDE'       reduce using rule 28
	'EQUALS'       reduce using rule 28
	'False'        reduce using rule 28
	'HAS'          reduce using rule 28
	'IF'           reduce using rule 28
	'IN'           reduce using rule 28
	'IS'           reduce using rule 28
	'MAP'          reduce using rule 28
	'MAX'          reduce using rule 28
	'MAY'          reduce using rule 28
	'MEANS'        reduce using rule 28
	'MIN'          reduce using rule 28
	'MINUS'        reduce using rule 28
	'MODULO'       reduce using rule 28
	'MUST'         reduce using rule 28
	'NOT'          reduce using rule 28
	'ON'           reduce using rule 28
	'OR'           reduce using rule 28
	'PRODUCT'      reduce using rule 28
	'SHANT'        reduce using rule 28
	'SUBJECT'      reduce using rule 28
	'SUM'          reduce using rule 28
	'True'         reduce using rule 28
	'WHO'          reduce using rule 28
	L_doubl        reduce using rule 28
	L_integ        reduce using rule 28
	L_quoted       reduce using rule 28
	L_Token        reduce using rule 28
	%eof           reduce using rule 28


State 35

	Rule -> Text 'MEANS' . BoolStruct                   (rule 10)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 36

State 36

	Rule -> Text 'MEANS' BoolStruct .                   (rule 10)

	%eof           reduce using rule 10


State 37

	Rule -> 'DECIDE' RelationalPredicate 'IF' . BoolStruct    (rule 12)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 100

State 38

	Rule -> 'DECLARE' IsA Fields .                      (rule 5)

	%eof           reduce using rule 5


State 39

	Fields -> 'HAS' . ListIsA                           (rule 19)

	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	String         goto state 3
	Token          goto state 4
	IsA            goto state 16
	ListIsA        goto state 99
	Text           goto state 15

State 40

	BoolStruct -> 'NOT' BoolStruct .                    (rule 44)

	')'            reduce using rule 44
	','            reduce using rule 44
	'IF'           reduce using rule 44
	'MAY'          reduce using rule 44
	'MEANS'        reduce using rule 44
	'MUST'         reduce using rule 44
	'SHANT'        reduce using rule 44
	'WHO'          reduce using rule 44
	%eof           reduce using rule 44


State 41

	BoolStruct -> 'ANY' '(' . ListBoolStruct ')'        (rule 38)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 96
	ListBoolStruct goto state 98

State 42

	BoolStruct -> 'ALL' '(' . ListBoolStruct ')'        (rule 41)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 96
	ListBoolStruct goto state 97

State 43

	Rule -> 'EVERY' BoolStruct Deontic . BoolStruct     (rule 7)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 95

State 44

	Rule -> 'EVERY' BoolStruct Who . Deontic BoolStruct    (rule 8)
	Rule -> 'EVERY' BoolStruct Who . InlineHornlike Deontic BoolStruct    (rule 9)

	'MAY'          shift, and enter state 45
	'MEANS'        shift, and enter state 94
	'MUST'         shift, and enter state 46
	'SHANT'        shift, and enter state 47

	Deontic        goto state 92
	InlineHornlike goto state 93

State 45

	Deontic -> 'MAY' .                                  (rule 22)

	'ALL'          reduce using rule 22
	'ANY'          reduce using rule 22
	'False'        reduce using rule 22
	'NOT'          reduce using rule 22
	'True'         reduce using rule 22
	L_doubl        reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22
	L_Token        reduce using rule 22


State 46

	Deontic -> 'MUST' .                                 (rule 21)

	'ALL'          reduce using rule 21
	'ANY'          reduce using rule 21
	'False'        reduce using rule 21
	'NOT'          reduce using rule 21
	'True'         reduce using rule 21
	L_doubl        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21
	L_Token        reduce using rule 21


State 47

	Deontic -> 'SHANT' .                                (rule 23)

	'ALL'          reduce using rule 23
	'ANY'          reduce using rule 23
	'False'        reduce using rule 23
	'NOT'          reduce using rule 23
	'True'         reduce using rule 23
	L_doubl        reduce using rule 23
	L_integ        reduce using rule 23
	L_quoted       reduce using rule 23
	L_Token        reduce using rule 23


State 48

	Who -> 'WHO' . BoolStruct                           (rule 24)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 91

State 49

	RelationalPredicate -> ListMTExpr RPRel . BoolStruct    (rule 27)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 90

State 50

	RPRel -> TComparison .                              (rule 69)

	'ALL'          reduce using rule 69
	'ANY'          reduce using rule 69
	'False'        reduce using rule 69
	'NOT'          reduce using rule 69
	'True'         reduce using rule 69
	L_doubl        reduce using rule 69
	L_integ        reduce using rule 69
	L_quoted       reduce using rule 69
	L_Token        reduce using rule 69


State 51

	RPRel -> '<' .                                      (rule 51)

	'ALL'          reduce using rule 51
	'ANY'          reduce using rule 51
	'False'        reduce using rule 51
	'NOT'          reduce using rule 51
	'True'         reduce using rule 51
	L_doubl        reduce using rule 51
	L_integ        reduce using rule 51
	L_quoted       reduce using rule 51
	L_Token        reduce using rule 51


State 52

	RPRel -> '<=' .                                     (rule 52)

	'ALL'          reduce using rule 52
	'ANY'          reduce using rule 52
	'False'        reduce using rule 52
	'NOT'          reduce using rule 52
	'True'         reduce using rule 52
	L_doubl        reduce using rule 52
	L_integ        reduce using rule 52
	L_quoted       reduce using rule 52
	L_Token        reduce using rule 52


State 53

	RPRel -> '>' .                                      (rule 53)

	'ALL'          reduce using rule 53
	'ANY'          reduce using rule 53
	'False'        reduce using rule 53
	'NOT'          reduce using rule 53
	'True'         reduce using rule 53
	L_doubl        reduce using rule 53
	L_integ        reduce using rule 53
	L_quoted       reduce using rule 53
	L_Token        reduce using rule 53


State 54

	RPRel -> '>=' .                                     (rule 54)

	'ALL'          reduce using rule 54
	'ANY'          reduce using rule 54
	'False'        reduce using rule 54
	'NOT'          reduce using rule 54
	'True'         reduce using rule 54
	L_doubl        reduce using rule 54
	L_integ        reduce using rule 54
	L_quoted       reduce using rule 54
	L_Token        reduce using rule 54


State 55

	TComparison -> 'ABOUT' .                            (rule 74)

	'ALL'          reduce using rule 74
	'ANY'          reduce using rule 74
	'False'        reduce using rule 74
	'NOT'          reduce using rule 74
	'True'         reduce using rule 74
	L_doubl        reduce using rule 74
	L_integ        reduce using rule 74
	L_quoted       reduce using rule 74
	L_Token        reduce using rule 74


State 56

	TComparison -> 'AFTER' .                            (rule 71)

	'ALL'          reduce using rule 71
	'ANY'          reduce using rule 71
	'False'        reduce using rule 71
	'NOT'          reduce using rule 71
	'True'         reduce using rule 71
	L_doubl        reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71
	L_Token        reduce using rule 71


State 57

	RPRel -> 'AND' .                                    (rule 58)

	'ALL'          reduce using rule 58
	'ANY'          reduce using rule 58
	'False'        reduce using rule 58
	'NOT'          reduce using rule 58
	'True'         reduce using rule 58
	L_doubl        reduce using rule 58
	L_integ        reduce using rule 58
	L_quoted       reduce using rule 58
	L_Token        reduce using rule 58


State 58

	TComparison -> 'BEFORE' .                           (rule 70)

	'ALL'          reduce using rule 70
	'ANY'          reduce using rule 70
	'False'        reduce using rule 70
	'NOT'          reduce using rule 70
	'True'         reduce using rule 70
	L_doubl        reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70
	L_Token        reduce using rule 70


State 59

	TComparison -> 'BY' .                               (rule 72)

	'ALL'          reduce using rule 72
	'ANY'          reduce using rule 72
	'False'        reduce using rule 72
	'NOT'          reduce using rule 72
	'True'         reduce using rule 72
	L_doubl        reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72
	L_Token        reduce using rule 72


State 60

	RPRel -> 'DIVIDE' .                                 (rule 63)

	'ALL'          reduce using rule 63
	'ANY'          reduce using rule 63
	'False'        reduce using rule 63
	'NOT'          reduce using rule 63
	'True'         reduce using rule 63
	L_doubl        reduce using rule 63
	L_integ        reduce using rule 63
	L_quoted       reduce using rule 63
	L_Token        reduce using rule 63


State 61

	RPRel -> 'EQUALS' .                                 (rule 50)

	'ALL'          reduce using rule 50
	'ANY'          reduce using rule 50
	'False'        reduce using rule 50
	'NOT'          reduce using rule 50
	'True'         reduce using rule 50
	L_doubl        reduce using rule 50
	L_integ        reduce using rule 50
	L_quoted       reduce using rule 50
	L_Token        reduce using rule 50


State 62

	RPRel -> 'HAS' .                                    (rule 49)

	'ALL'          reduce using rule 49
	'ANY'          reduce using rule 49
	'False'        reduce using rule 49
	'NOT'          reduce using rule 49
	'True'         reduce using rule 49
	L_doubl        reduce using rule 49
	L_integ        reduce using rule 49
	L_quoted       reduce using rule 49
	L_Token        reduce using rule 49


State 63

	RPRel -> 'IN' .                                     (rule 55)

	'ALL'          reduce using rule 55
	'ANY'          reduce using rule 55
	'False'        reduce using rule 55
	'NOT'          reduce using rule 55
	'True'         reduce using rule 55
	L_doubl        reduce using rule 55
	L_integ        reduce using rule 55
	L_quoted       reduce using rule 55
	L_Token        reduce using rule 55


State 64

	RPRel -> 'IS' .                                     (rule 48)

	'ALL'          reduce using rule 48
	'ANY'          reduce using rule 48
	'False'        reduce using rule 48
	'NOT'          reduce using rule 48
	'True'         reduce using rule 48
	L_doubl        reduce using rule 48
	L_integ        reduce using rule 48
	L_quoted       reduce using rule 48
	L_Token        reduce using rule 48


State 65

	RPRel -> 'MAP' .                                    (rule 68)

	'ALL'          reduce using rule 68
	'ANY'          reduce using rule 68
	'False'        reduce using rule 68
	'NOT'          reduce using rule 68
	'True'         reduce using rule 68
	L_doubl        reduce using rule 68
	L_integ        reduce using rule 68
	L_quoted       reduce using rule 68
	L_Token        reduce using rule 68


State 66

	RPRel -> 'MAX' .                                    (rule 67)

	'ALL'          reduce using rule 67
	'ANY'          reduce using rule 67
	'False'        reduce using rule 67
	'NOT'          reduce using rule 67
	'True'         reduce using rule 67
	L_doubl        reduce using rule 67
	L_integ        reduce using rule 67
	L_quoted       reduce using rule 67
	L_Token        reduce using rule 67


State 67

	RPRel -> 'MIN' .                                    (rule 66)

	'ALL'          reduce using rule 66
	'ANY'          reduce using rule 66
	'False'        reduce using rule 66
	'NOT'          reduce using rule 66
	'True'         reduce using rule 66
	L_doubl        reduce using rule 66
	L_integ        reduce using rule 66
	L_quoted       reduce using rule 66
	L_Token        reduce using rule 66


State 68

	RPRel -> 'MINUS' .                                  (rule 62)

	'ALL'          reduce using rule 62
	'ANY'          reduce using rule 62
	'False'        reduce using rule 62
	'NOT'          reduce using rule 62
	'True'         reduce using rule 62
	L_doubl        reduce using rule 62
	L_integ        reduce using rule 62
	L_quoted       reduce using rule 62
	L_Token        reduce using rule 62


State 69

	RPRel -> 'MODULO' .                                 (rule 64)

	'ALL'          reduce using rule 64
	'ANY'          reduce using rule 64
	'False'        reduce using rule 64
	'NOT'          reduce using rule 64
	'True'         reduce using rule 64
	L_doubl        reduce using rule 64
	L_integ        reduce using rule 64
	L_quoted       reduce using rule 64
	L_Token        reduce using rule 64


State 70

	RPRel -> 'NOT' . 'IN'                               (rule 56)
	RPRel -> 'NOT' .                                    (rule 57)

	'ALL'          reduce using rule 57
	'ANY'          reduce using rule 57
	'False'        reduce using rule 57
	'IN'           shift, and enter state 89
	'NOT'          reduce using rule 57
	'True'         reduce using rule 57
	L_doubl        reduce using rule 57
	L_integ        reduce using rule 57
	L_quoted       reduce using rule 57
	L_Token        reduce using rule 57


State 71

	TComparison -> 'ON' .                               (rule 73)

	'ALL'          reduce using rule 73
	'ANY'          reduce using rule 73
	'False'        reduce using rule 73
	'NOT'          reduce using rule 73
	'True'         reduce using rule 73
	L_doubl        reduce using rule 73
	L_integ        reduce using rule 73
	L_quoted       reduce using rule 73
	L_Token        reduce using rule 73


State 72

	RPRel -> 'OR' .                                     (rule 59)

	'ALL'          reduce using rule 59
	'ANY'          reduce using rule 59
	'False'        reduce using rule 59
	'NOT'          reduce using rule 59
	'True'         reduce using rule 59
	L_doubl        reduce using rule 59
	L_integ        reduce using rule 59
	L_quoted       reduce using rule 59
	L_Token        reduce using rule 59


State 73

	RPRel -> 'PRODUCT' .                                (rule 61)

	'ALL'          reduce using rule 61
	'ANY'          reduce using rule 61
	'False'        reduce using rule 61
	'NOT'          reduce using rule 61
	'True'         reduce using rule 61
	L_doubl        reduce using rule 61
	L_integ        reduce using rule 61
	L_quoted       reduce using rule 61
	L_Token        reduce using rule 61


State 74

	RPRel -> 'SUBJECT' . 'TO'                           (rule 65)

	'TO'           shift, and enter state 88


State 75

	RPRel -> 'SUM' .                                    (rule 60)

	'ALL'          reduce using rule 60
	'ANY'          reduce using rule 60
	'False'        reduce using rule 60
	'NOT'          reduce using rule 60
	'True'         reduce using rule 60
	L_doubl        reduce using rule 60
	L_integ        reduce using rule 60
	L_quoted       reduce using rule 60
	L_Token        reduce using rule 60


State 76

	BoolStruct -> Text 'ALL' . '(' ListBoolStruct ')'    (rule 42)
	BoolStruct -> Text 'ALL' . '(' ListBoolStruct ')' Text    (rule 43)

	'('            shift, and enter state 87


State 77

	BoolStruct -> Text 'ANY' . '(' ListBoolStruct ')' Text    (rule 39)
	BoolStruct -> Text 'ANY' . '(' ListBoolStruct ')'    (rule 40)

	'('            shift, and enter state 86


State 78

	ListMTExpr -> MTExpr ListMTExpr .                   (rule 37)

	')'            reduce using rule 37
	','            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'ABOUT'        reduce using rule 37
	'AFTER'        reduce using rule 37
	'AND'          reduce using rule 37
	'BEFORE'       reduce using rule 37
	'BY'           reduce using rule 37
	'DIVIDE'       reduce using rule 37
	'EQUALS'       reduce using rule 37
	'HAS'          reduce using rule 37
	'IF'           reduce using rule 37
	'IN'           reduce using rule 37
	'IS'           reduce using rule 37
	'MAP'          reduce using rule 37
	'MAX'          reduce using rule 37
	'MAY'          reduce using rule 37
	'MEANS'        reduce using rule 37
	'MIN'          reduce using rule 37
	'MINUS'        reduce using rule 37
	'MODULO'       reduce using rule 37
	'MUST'         reduce using rule 37
	'NOT'          reduce using rule 37
	'ON'           reduce using rule 37
	'OR'           reduce using rule 37
	'PRODUCT'      reduce using rule 37
	'SHANT'        reduce using rule 37
	'SUBJECT'      reduce using rule 37
	'SUM'          reduce using rule 37
	'WHO'          reduce using rule 37
	%eof           reduce using rule 37


State 79

	Rule -> 'GIVEN' ListIsA Rule .                      (rule 6)

	%eof           reduce using rule 6


State 80

	ListIsA -> IsA ';' . ListIsA                        (rule 18)

	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	String         goto state 3
	Token          goto state 4
	IsA            goto state 16
	ListIsA        goto state 85
	Text           goto state 15

State 81

	IsA -> Text 'IS' . 'A' Text                         (rule 15)

	'A'            shift, and enter state 84


State 82

	Rule -> 'GIVETH' IsA 'DECIDE' . RelationalPredicate    (rule 13)
	Rule -> 'GIVETH' IsA 'DECIDE' . RelationalPredicate 'IF' BoolStruct    (rule 14)

	'False'        shift, and enter state 28
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 83
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 34
	ListMTExpr     goto state 24

State 83

	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate .    (rule 13)
	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate . 'IF' BoolStruct    (rule 14)

	'IF'           shift, and enter state 110
	%eof           reduce using rule 13


State 84

	IsA -> Text 'IS' 'A' . Text                         (rule 15)

	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	String         goto state 3
	Token          goto state 4
	Text           goto state 109

State 85

	ListIsA -> IsA ';' ListIsA .                        (rule 18)

	'DECIDE'       reduce using rule 18
	'DECLARE'      reduce using rule 18
	'EVERY'        reduce using rule 18
	'GIVEN'        reduce using rule 18
	'GIVETH'       reduce using rule 18
	L_quoted       reduce using rule 18
	L_Token        reduce using rule 18
	%eof           reduce using rule 18


State 86

	BoolStruct -> Text 'ANY' '(' . ListBoolStruct ')' Text    (rule 39)
	BoolStruct -> Text 'ANY' '(' . ListBoolStruct ')'    (rule 40)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 96
	ListBoolStruct goto state 108

State 87

	BoolStruct -> Text 'ALL' '(' . ListBoolStruct ')'    (rule 42)
	BoolStruct -> Text 'ALL' '(' . ListBoolStruct ')' Text    (rule 43)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 96
	ListBoolStruct goto state 107

State 88

	RPRel -> 'SUBJECT' 'TO' .                           (rule 65)

	'ALL'          reduce using rule 65
	'ANY'          reduce using rule 65
	'False'        reduce using rule 65
	'NOT'          reduce using rule 65
	'True'         reduce using rule 65
	L_doubl        reduce using rule 65
	L_integ        reduce using rule 65
	L_quoted       reduce using rule 65
	L_Token        reduce using rule 65


State 89

	RPRel -> 'NOT' 'IN' .                               (rule 56)

	'ALL'          reduce using rule 56
	'ANY'          reduce using rule 56
	'False'        reduce using rule 56
	'NOT'          reduce using rule 56
	'True'         reduce using rule 56
	L_doubl        reduce using rule 56
	L_integ        reduce using rule 56
	L_quoted       reduce using rule 56
	L_Token        reduce using rule 56


State 90

	RelationalPredicate -> ListMTExpr RPRel BoolStruct .    (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	'IF'           reduce using rule 27
	'MAY'          reduce using rule 27
	'MEANS'        reduce using rule 27
	'MUST'         reduce using rule 27
	'SHANT'        reduce using rule 27
	'WHO'          reduce using rule 27
	%eof           reduce using rule 27


State 91

	Who -> 'WHO' BoolStruct .                           (rule 24)

	'MAY'          reduce using rule 24
	'MEANS'        reduce using rule 24
	'MUST'         reduce using rule 24
	'SHANT'        reduce using rule 24


State 92

	Rule -> 'EVERY' BoolStruct Who Deontic . BoolStruct    (rule 8)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 106

State 93

	Rule -> 'EVERY' BoolStruct Who InlineHornlike . Deontic BoolStruct    (rule 9)

	'MAY'          shift, and enter state 45
	'MUST'         shift, and enter state 46
	'SHANT'        shift, and enter state 47

	Deontic        goto state 105

State 94

	InlineHornlike -> 'MEANS' . BoolStruct              (rule 25)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 104

State 95

	Rule -> 'EVERY' BoolStruct Deontic BoolStruct .     (rule 7)

	%eof           reduce using rule 7


State 96

	ListBoolStruct -> BoolStruct .                      (rule 46)
	ListBoolStruct -> BoolStruct . ',' ListBoolStruct    (rule 47)

	')'            reduce using rule 46
	','            shift, and enter state 103


State 97

	BoolStruct -> 'ALL' '(' ListBoolStruct . ')'        (rule 41)

	')'            shift, and enter state 102


State 98

	BoolStruct -> 'ANY' '(' ListBoolStruct . ')'        (rule 38)

	')'            shift, and enter state 101


State 99

	Fields -> 'HAS' ListIsA .                           (rule 19)

	%eof           reduce using rule 19


State 100

	Rule -> 'DECIDE' RelationalPredicate 'IF' BoolStruct .    (rule 12)

	%eof           reduce using rule 12


State 101

	BoolStruct -> 'ANY' '(' ListBoolStruct ')' .        (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	'IF'           reduce using rule 38
	'MAY'          reduce using rule 38
	'MEANS'        reduce using rule 38
	'MUST'         reduce using rule 38
	'SHANT'        reduce using rule 38
	'WHO'          reduce using rule 38
	%eof           reduce using rule 38


State 102

	BoolStruct -> 'ALL' '(' ListBoolStruct ')' .        (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'IF'           reduce using rule 41
	'MAY'          reduce using rule 41
	'MEANS'        reduce using rule 41
	'MUST'         reduce using rule 41
	'SHANT'        reduce using rule 41
	'WHO'          reduce using rule 41
	%eof           reduce using rule 41


State 103

	ListBoolStruct -> BoolStruct ',' . ListBoolStruct    (rule 47)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 96
	ListBoolStruct goto state 115

State 104

	InlineHornlike -> 'MEANS' BoolStruct .              (rule 25)

	'MAY'          reduce using rule 25
	'MUST'         reduce using rule 25
	'SHANT'        reduce using rule 25


State 105

	Rule -> 'EVERY' BoolStruct Who InlineHornlike Deontic . BoolStruct    (rule 9)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 114

State 106

	Rule -> 'EVERY' BoolStruct Who Deontic BoolStruct .    (rule 8)

	%eof           reduce using rule 8


State 107

	BoolStruct -> Text 'ALL' '(' ListBoolStruct . ')'    (rule 42)
	BoolStruct -> Text 'ALL' '(' ListBoolStruct . ')' Text    (rule 43)

	')'            shift, and enter state 113


State 108

	BoolStruct -> Text 'ANY' '(' ListBoolStruct . ')' Text    (rule 39)
	BoolStruct -> Text 'ANY' '(' ListBoolStruct . ')'    (rule 40)

	')'            shift, and enter state 112


State 109

	IsA -> Text 'IS' 'A' Text .                         (rule 15)

	';'            reduce using rule 15
	'DECIDE'       reduce using rule 15
	'DECLARE'      reduce using rule 15
	'EVERY'        reduce using rule 15
	'GIVEN'        reduce using rule 15
	'GIVETH'       reduce using rule 15
	'HAS'          reduce using rule 15
	L_quoted       reduce using rule 15
	L_Token        reduce using rule 15
	%eof           reduce using rule 15


State 110

	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate 'IF' . BoolStruct    (rule 14)

	'ALL'          shift, and enter state 26
	'ANY'          shift, and enter state 27
	'False'        shift, and enter state 28
	'NOT'          shift, and enter state 29
	'True'         shift, and enter state 30
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 31
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13

	Double         goto state 18
	Integer        goto state 19
	String         goto state 3
	Token          goto state 4
	RelationalPredicategoto state 20
	MTExpr         goto state 21
	Bool           goto state 22
	Text           goto state 23
	ListMTExpr     goto state 24
	BoolStruct     goto state 111

State 111

	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate 'IF' BoolStruct .    (rule 14)

	%eof           reduce using rule 14


State 112

	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')' . Text    (rule 39)
	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')' .    (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	'IF'           reduce using rule 40
	'MAY'          reduce using rule 40
	'MEANS'        reduce using rule 40
	'MUST'         reduce using rule 40
	'SHANT'        reduce using rule 40
	'WHO'          reduce using rule 40
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13
	%eof           reduce using rule 40

	String         goto state 3
	Token          goto state 4
	Text           goto state 117

State 113

	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')' .    (rule 42)
	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')' . Text    (rule 43)

	')'            reduce using rule 42
	','            reduce using rule 42
	'IF'           reduce using rule 42
	'MAY'          reduce using rule 42
	'MEANS'        reduce using rule 42
	'MUST'         reduce using rule 42
	'SHANT'        reduce using rule 42
	'WHO'          reduce using rule 42
	L_quoted       shift, and enter state 12
	L_Token        shift, and enter state 13
	%eof           reduce using rule 42

	String         goto state 3
	Token          goto state 4
	Text           goto state 116

State 114

	Rule -> 'EVERY' BoolStruct Who InlineHornlike Deontic BoolStruct .    (rule 9)

	%eof           reduce using rule 9


State 115

	ListBoolStruct -> BoolStruct ',' ListBoolStruct .    (rule 47)

	')'            reduce using rule 47


State 116

	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')' Text .    (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	'IF'           reduce using rule 43
	'MAY'          reduce using rule 43
	'MEANS'        reduce using rule 43
	'MUST'         reduce using rule 43
	'SHANT'        reduce using rule 43
	'WHO'          reduce using rule 43
	%eof           reduce using rule 43


State 117

	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')' Text .    (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	'IF'           reduce using rule 39
	'MAY'          reduce using rule 39
	'MEANS'        reduce using rule 39
	'MUST'         reduce using rule 39
	'SHANT'        reduce using rule 39
	'WHO'          reduce using rule 39
	%eof           reduce using rule 39


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 75
Number of terminals: 50
Number of non-terminals: 21
Number of states: 118
