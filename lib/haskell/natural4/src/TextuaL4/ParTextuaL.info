-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from TextuaL4/ParTextuaL.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pRule -> Rule                               (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	Text -> L_Text                                     (3)
	Rule -> 'DECLARE' IsA Fields                       (4)
	Rule -> 'GIVEN' ListIsA Rule                       (5)
	Rule -> 'EVERY' BoolStruct Deontic BoolStruct      (6)
	Rule -> 'EVERY' BoolStruct Who Deontic BoolStruct   (7)
	Rule -> 'EVERY' BoolStruct Who InlineHornlike Deontic BoolStruct   (8)
	Rule -> Text 'MEANS' BoolStruct                    (9)
	Rule -> 'DECIDE' RelationalPredicate               (10)
	Rule -> 'DECIDE' RelationalPredicate 'IF' BoolStruct   (11)
	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate   (12)
	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate 'IF' BoolStruct   (13)
	IsA -> Text 'IS' 'A' Text                          (14)
	IsA -> Text                                        (15)
	ListIsA -> IsA                                     (16)
	ListIsA -> IsA ';' ListIsA                         (17)
	Fields -> 'HAS' ListIsA                            (18)
	Fields ->                                          (19)
	Deontic -> 'MUST'                                  (20)
	Deontic -> 'MAY'                                   (21)
	Deontic -> 'SHANT'                                 (22)
	Who -> 'WHO' BoolStruct                            (23)
	InlineHornlike -> 'MEANS' BoolStruct               (24)
	RelationalPredicate -> ListMTExpr                  (25)
	RelationalPredicate -> ListMTExpr RPRel BoolStruct   (26)
	MTExpr -> Text                                     (27)
	MTExpr -> Integer                                  (28)
	MTExpr -> Double                                   (29)
	MTExpr -> Bool                                     (30)
	Bool -> 'True'                                     (31)
	Bool -> 'False'                                    (32)
	ListMTExpr -> MTExpr                               (33)
	ListMTExpr -> MTExpr ListMTExpr                    (34)
	BoolStruct -> 'ANY' '(' ListBoolStruct ')'         (35)
	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')' Text   (36)
	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')'    (37)
	BoolStruct -> 'ALL' '(' ListBoolStruct ')'         (38)
	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')'    (39)
	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')' Text   (40)
	BoolStruct -> 'NOT' BoolStruct                     (41)
	BoolStruct -> RelationalPredicate                  (42)
	ListBoolStruct -> BoolStruct                       (43)
	ListBoolStruct -> BoolStruct ',' ListBoolStruct    (44)
	RPRel -> 'IS'                                      (45)
	RPRel -> 'HAS'                                     (46)
	RPRel -> 'EQUALS'                                  (47)
	RPRel -> '<'                                       (48)
	RPRel -> '<='                                      (49)
	RPRel -> '>'                                       (50)
	RPRel -> '>='                                      (51)
	RPRel -> 'IN'                                      (52)
	RPRel -> 'NOT' 'IN'                                (53)
	RPRel -> 'NOT'                                     (54)
	RPRel -> 'AND'                                     (55)
	RPRel -> 'OR'                                      (56)
	RPRel -> 'SUM'                                     (57)
	RPRel -> 'PRODUCT'                                 (58)
	RPRel -> 'MINUS'                                   (59)
	RPRel -> 'DIVIDE'                                  (60)
	RPRel -> 'MODULO'                                  (61)
	RPRel -> 'SUBJECT' 'TO'                            (62)
	RPRel -> 'MIN'                                     (63)
	RPRel -> 'MAX'                                     (64)
	RPRel -> 'MAP'                                     (65)
	RPRel -> TComparison                               (66)
	TComparison -> 'BEFORE'                            (67)
	TComparison -> 'AFTER'                             (68)
	TComparison -> 'BY'                                (69)
	TComparison -> 'ON'                                (70)
	TComparison -> 'ABOUT'                             (71)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'<'            { PT _ (TS _ 5) }
	'<='           { PT _ (TS _ 6) }
	'>'            { PT _ (TS _ 7) }
	'>='           { PT _ (TS _ 8) }
	'A'            { PT _ (TS _ 9) }
	'ABOUT'        { PT _ (TS _ 10) }
	'AFTER'        { PT _ (TS _ 11) }
	'ALL'          { PT _ (TS _ 12) }
	'AND'          { PT _ (TS _ 13) }
	'ANY'          { PT _ (TS _ 14) }
	'BEFORE'       { PT _ (TS _ 15) }
	'BY'           { PT _ (TS _ 16) }
	'DECIDE'       { PT _ (TS _ 17) }
	'DECLARE'      { PT _ (TS _ 18) }
	'DIVIDE'       { PT _ (TS _ 19) }
	'EQUALS'       { PT _ (TS _ 20) }
	'EVERY'        { PT _ (TS _ 21) }
	'False'        { PT _ (TS _ 22) }
	'GIVEN'        { PT _ (TS _ 23) }
	'GIVETH'       { PT _ (TS _ 24) }
	'HAS'          { PT _ (TS _ 25) }
	'IF'           { PT _ (TS _ 26) }
	'IN'           { PT _ (TS _ 27) }
	'IS'           { PT _ (TS _ 28) }
	'MAP'          { PT _ (TS _ 29) }
	'MAX'          { PT _ (TS _ 30) }
	'MAY'          { PT _ (TS _ 31) }
	'MEANS'        { PT _ (TS _ 32) }
	'MIN'          { PT _ (TS _ 33) }
	'MINUS'        { PT _ (TS _ 34) }
	'MODULO'       { PT _ (TS _ 35) }
	'MUST'         { PT _ (TS _ 36) }
	'NOT'          { PT _ (TS _ 37) }
	'ON'           { PT _ (TS _ 38) }
	'OR'           { PT _ (TS _ 39) }
	'PRODUCT'      { PT _ (TS _ 40) }
	'SHANT'        { PT _ (TS _ 41) }
	'SUBJECT'      { PT _ (TS _ 42) }
	'SUM'          { PT _ (TS _ 43) }
	'TO'           { PT _ (TS _ 44) }
	'True'         { PT _ (TS _ 45) }
	'WHO'          { PT _ (TS _ 46) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_Text         { PT _ (T_Text $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pRule    rule  0
	Double          rule  1
	Integer         rule  2
	Text            rule  3
	Rule            rules 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
	IsA             rules 14, 15
	ListIsA         rules 16, 17
	Fields          rules 18, 19
	Deontic         rules 20, 21, 22
	Who             rule  23
	InlineHornlike  rule  24
	RelationalPredicate rules 25, 26
	MTExpr          rules 27, 28, 29, 30
	Bool            rules 31, 32
	ListMTExpr      rules 33, 34
	BoolStruct      rules 35, 36, 37, 38, 39, 40, 41, 42
	ListBoolStruct  rules 43, 44
	RPRel           rules 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66
	TComparison     rules 67, 68, 69, 70, 71

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pRule -> . Rule                              (rule 0)

	'DECIDE'       shift, and enter state 5
	'DECLARE'      shift, and enter state 6
	'EVERY'        shift, and enter state 7
	'GIVEN'        shift, and enter state 8
	'GIVETH'       shift, and enter state 9
	L_Text         shift, and enter state 10

	Text           goto state 3
	Rule           goto state 4

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	')'            reduce using rule 1
	','            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'ABOUT'        reduce using rule 1
	'AFTER'        reduce using rule 1
	'AND'          reduce using rule 1
	'BEFORE'       reduce using rule 1
	'BY'           reduce using rule 1
	'DIVIDE'       reduce using rule 1
	'EQUALS'       reduce using rule 1
	'False'        reduce using rule 1
	'HAS'          reduce using rule 1
	'IF'           reduce using rule 1
	'IN'           reduce using rule 1
	'IS'           reduce using rule 1
	'MAP'          reduce using rule 1
	'MAX'          reduce using rule 1
	'MAY'          reduce using rule 1
	'MEANS'        reduce using rule 1
	'MIN'          reduce using rule 1
	'MINUS'        reduce using rule 1
	'MODULO'       reduce using rule 1
	'MUST'         reduce using rule 1
	'NOT'          reduce using rule 1
	'ON'           reduce using rule 1
	'OR'           reduce using rule 1
	'PRODUCT'      reduce using rule 1
	'SHANT'        reduce using rule 1
	'SUBJECT'      reduce using rule 1
	'SUM'          reduce using rule 1
	'True'         reduce using rule 1
	'WHO'          reduce using rule 1
	L_doubl        reduce using rule 1
	L_integ        reduce using rule 1
	L_Text         reduce using rule 1
	%eof           reduce using rule 1


State 3

	Rule -> Text . 'MEANS' BoolStruct                   (rule 9)

	'MEANS'        shift, and enter state 32


State 4

	%start_pRule -> Rule .                              (rule 0)

	%eof           accept


State 5

	Rule -> 'DECIDE' . RelationalPredicate              (rule 10)
	Rule -> 'DECIDE' . RelationalPredicate 'IF' BoolStruct    (rule 11)

	'False'        shift, and enter state 25
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 30
	RelationalPredicategoto state 31
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21

State 6

	Rule -> 'DECLARE' . IsA Fields                      (rule 4)

	L_Text         shift, and enter state 10

	Text           goto state 11
	IsA            goto state 29

State 7

	Rule -> 'EVERY' . BoolStruct Deontic BoolStruct     (rule 6)
	Rule -> 'EVERY' . BoolStruct Who Deontic BoolStruct    (rule 7)
	Rule -> 'EVERY' . BoolStruct Who InlineHornlike Deontic BoolStruct    (rule 8)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 22

State 8

	Rule -> 'GIVEN' . ListIsA Rule                      (rule 5)

	L_Text         shift, and enter state 10

	Text           goto state 11
	IsA            goto state 13
	ListIsA        goto state 14

State 9

	Rule -> 'GIVETH' . IsA 'DECIDE' RelationalPredicate    (rule 12)
	Rule -> 'GIVETH' . IsA 'DECIDE' RelationalPredicate 'IF' BoolStruct    (rule 13)

	L_Text         shift, and enter state 10

	Text           goto state 11
	IsA            goto state 12

State 10

	Text -> L_Text .                                    (rule 3)

	')'            reduce using rule 3
	','            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'ABOUT'        reduce using rule 3
	'AFTER'        reduce using rule 3
	'ALL'          reduce using rule 3
	'AND'          reduce using rule 3
	'ANY'          reduce using rule 3
	'BEFORE'       reduce using rule 3
	'BY'           reduce using rule 3
	'DECIDE'       reduce using rule 3
	'DECLARE'      reduce using rule 3
	'DIVIDE'       reduce using rule 3
	'EQUALS'       reduce using rule 3
	'EVERY'        reduce using rule 3
	'False'        reduce using rule 3
	'GIVEN'        reduce using rule 3
	'GIVETH'       reduce using rule 3
	'HAS'          reduce using rule 3
	'IF'           reduce using rule 3
	'IN'           reduce using rule 3
	'IS'           reduce using rule 3
	'MAP'          reduce using rule 3
	'MAX'          reduce using rule 3
	'MAY'          reduce using rule 3
	'MEANS'        reduce using rule 3
	'MIN'          reduce using rule 3
	'MINUS'        reduce using rule 3
	'MODULO'       reduce using rule 3
	'MUST'         reduce using rule 3
	'NOT'          reduce using rule 3
	'ON'           reduce using rule 3
	'OR'           reduce using rule 3
	'PRODUCT'      reduce using rule 3
	'SHANT'        reduce using rule 3
	'SUBJECT'      reduce using rule 3
	'SUM'          reduce using rule 3
	'True'         reduce using rule 3
	'WHO'          reduce using rule 3
	L_doubl        reduce using rule 3
	L_integ        reduce using rule 3
	L_Text         reduce using rule 3
	%eof           reduce using rule 3


State 11

	IsA -> Text . 'IS' 'A' Text                         (rule 14)
	IsA -> Text .                                       (rule 15)

	';'            reduce using rule 15
	'DECIDE'       reduce using rule 15
	'DECLARE'      reduce using rule 15
	'EVERY'        reduce using rule 15
	'GIVEN'        reduce using rule 15
	'GIVETH'       reduce using rule 15
	'HAS'          reduce using rule 15
	'IS'           shift, and enter state 79
	L_Text         reduce using rule 15
	%eof           reduce using rule 15


State 12

	Rule -> 'GIVETH' IsA . 'DECIDE' RelationalPredicate    (rule 12)
	Rule -> 'GIVETH' IsA . 'DECIDE' RelationalPredicate 'IF' BoolStruct    (rule 13)

	'DECIDE'       shift, and enter state 78


State 13

	ListIsA -> IsA .                                    (rule 16)
	ListIsA -> IsA . ';' ListIsA                        (rule 17)

	';'            shift, and enter state 77
	'DECIDE'       reduce using rule 16
	'DECLARE'      reduce using rule 16
	'EVERY'        reduce using rule 16
	'GIVEN'        reduce using rule 16
	'GIVETH'       reduce using rule 16
	L_Text         reduce using rule 16
	%eof           reduce using rule 16


State 14

	Rule -> 'GIVEN' ListIsA . Rule                      (rule 5)

	'DECIDE'       shift, and enter state 5
	'DECLARE'      shift, and enter state 6
	'EVERY'        shift, and enter state 7
	'GIVEN'        shift, and enter state 8
	'GIVETH'       shift, and enter state 9
	L_Text         shift, and enter state 10

	Text           goto state 3
	Rule           goto state 76

State 15

	MTExpr -> Double .                                  (rule 29)

	')'            reduce using rule 29
	','            reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	'ABOUT'        reduce using rule 29
	'AFTER'        reduce using rule 29
	'AND'          reduce using rule 29
	'BEFORE'       reduce using rule 29
	'BY'           reduce using rule 29
	'DIVIDE'       reduce using rule 29
	'EQUALS'       reduce using rule 29
	'False'        reduce using rule 29
	'HAS'          reduce using rule 29
	'IF'           reduce using rule 29
	'IN'           reduce using rule 29
	'IS'           reduce using rule 29
	'MAP'          reduce using rule 29
	'MAX'          reduce using rule 29
	'MAY'          reduce using rule 29
	'MEANS'        reduce using rule 29
	'MIN'          reduce using rule 29
	'MINUS'        reduce using rule 29
	'MODULO'       reduce using rule 29
	'MUST'         reduce using rule 29
	'NOT'          reduce using rule 29
	'ON'           reduce using rule 29
	'OR'           reduce using rule 29
	'PRODUCT'      reduce using rule 29
	'SHANT'        reduce using rule 29
	'SUBJECT'      reduce using rule 29
	'SUM'          reduce using rule 29
	'True'         reduce using rule 29
	'WHO'          reduce using rule 29
	L_doubl        reduce using rule 29
	L_integ        reduce using rule 29
	L_Text         reduce using rule 29
	%eof           reduce using rule 29


State 16

	MTExpr -> Integer .                                 (rule 28)

	')'            reduce using rule 28
	','            reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'ABOUT'        reduce using rule 28
	'AFTER'        reduce using rule 28
	'AND'          reduce using rule 28
	'BEFORE'       reduce using rule 28
	'BY'           reduce using rule 28
	'DIVIDE'       reduce using rule 28
	'EQUALS'       reduce using rule 28
	'False'        reduce using rule 28
	'HAS'          reduce using rule 28
	'IF'           reduce using rule 28
	'IN'           reduce using rule 28
	'IS'           reduce using rule 28
	'MAP'          reduce using rule 28
	'MAX'          reduce using rule 28
	'MAY'          reduce using rule 28
	'MEANS'        reduce using rule 28
	'MIN'          reduce using rule 28
	'MINUS'        reduce using rule 28
	'MODULO'       reduce using rule 28
	'MUST'         reduce using rule 28
	'NOT'          reduce using rule 28
	'ON'           reduce using rule 28
	'OR'           reduce using rule 28
	'PRODUCT'      reduce using rule 28
	'SHANT'        reduce using rule 28
	'SUBJECT'      reduce using rule 28
	'SUM'          reduce using rule 28
	'True'         reduce using rule 28
	'WHO'          reduce using rule 28
	L_doubl        reduce using rule 28
	L_integ        reduce using rule 28
	L_Text         reduce using rule 28
	%eof           reduce using rule 28


State 17

	MTExpr -> Text .                                    (rule 27)
	BoolStruct -> Text . 'ANY' '(' ListBoolStruct ')' Text    (rule 36)
	BoolStruct -> Text . 'ANY' '(' ListBoolStruct ')'    (rule 37)
	BoolStruct -> Text . 'ALL' '(' ListBoolStruct ')'    (rule 39)
	BoolStruct -> Text . 'ALL' '(' ListBoolStruct ')' Text    (rule 40)

	')'            reduce using rule 27
	','            reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	'ABOUT'        reduce using rule 27
	'AFTER'        reduce using rule 27
	'ALL'          shift, and enter state 74
	'AND'          reduce using rule 27
	'ANY'          shift, and enter state 75
	'BEFORE'       reduce using rule 27
	'BY'           reduce using rule 27
	'DIVIDE'       reduce using rule 27
	'EQUALS'       reduce using rule 27
	'False'        reduce using rule 27
	'HAS'          reduce using rule 27
	'IF'           reduce using rule 27
	'IN'           reduce using rule 27
	'IS'           reduce using rule 27
	'MAP'          reduce using rule 27
	'MAX'          reduce using rule 27
	'MAY'          reduce using rule 27
	'MEANS'        reduce using rule 27
	'MIN'          reduce using rule 27
	'MINUS'        reduce using rule 27
	'MODULO'       reduce using rule 27
	'MUST'         reduce using rule 27
	'NOT'          reduce using rule 27
	'ON'           reduce using rule 27
	'OR'           reduce using rule 27
	'PRODUCT'      reduce using rule 27
	'SHANT'        reduce using rule 27
	'SUBJECT'      reduce using rule 27
	'SUM'          reduce using rule 27
	'True'         reduce using rule 27
	'WHO'          reduce using rule 27
	L_doubl        reduce using rule 27
	L_integ        reduce using rule 27
	L_Text         reduce using rule 27
	%eof           reduce using rule 27


State 18

	BoolStruct -> RelationalPredicate .                 (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	'IF'           reduce using rule 42
	'MAY'          reduce using rule 42
	'MEANS'        reduce using rule 42
	'MUST'         reduce using rule 42
	'SHANT'        reduce using rule 42
	'WHO'          reduce using rule 42
	%eof           reduce using rule 42


State 19

	ListMTExpr -> MTExpr .                              (rule 33)
	ListMTExpr -> MTExpr . ListMTExpr                   (rule 34)

	')'            reduce using rule 33
	','            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'ABOUT'        reduce using rule 33
	'AFTER'        reduce using rule 33
	'AND'          reduce using rule 33
	'BEFORE'       reduce using rule 33
	'BY'           reduce using rule 33
	'DIVIDE'       reduce using rule 33
	'EQUALS'       reduce using rule 33
	'False'        shift, and enter state 25
	'HAS'          reduce using rule 33
	'IF'           reduce using rule 33
	'IN'           reduce using rule 33
	'IS'           reduce using rule 33
	'MAP'          reduce using rule 33
	'MAX'          reduce using rule 33
	'MAY'          reduce using rule 33
	'MEANS'        reduce using rule 33
	'MIN'          reduce using rule 33
	'MINUS'        reduce using rule 33
	'MODULO'       reduce using rule 33
	'MUST'         reduce using rule 33
	'NOT'          reduce using rule 33
	'ON'           reduce using rule 33
	'OR'           reduce using rule 33
	'PRODUCT'      reduce using rule 33
	'SHANT'        reduce using rule 33
	'SUBJECT'      reduce using rule 33
	'SUM'          reduce using rule 33
	'True'         shift, and enter state 27
	'WHO'          reduce using rule 33
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10
	%eof           reduce using rule 33

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 30
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 73

State 20

	MTExpr -> Bool .                                    (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30
	'<'            reduce using rule 30
	'<='           reduce using rule 30
	'>'            reduce using rule 30
	'>='           reduce using rule 30
	'ABOUT'        reduce using rule 30
	'AFTER'        reduce using rule 30
	'AND'          reduce using rule 30
	'BEFORE'       reduce using rule 30
	'BY'           reduce using rule 30
	'DIVIDE'       reduce using rule 30
	'EQUALS'       reduce using rule 30
	'False'        reduce using rule 30
	'HAS'          reduce using rule 30
	'IF'           reduce using rule 30
	'IN'           reduce using rule 30
	'IS'           reduce using rule 30
	'MAP'          reduce using rule 30
	'MAX'          reduce using rule 30
	'MAY'          reduce using rule 30
	'MEANS'        reduce using rule 30
	'MIN'          reduce using rule 30
	'MINUS'        reduce using rule 30
	'MODULO'       reduce using rule 30
	'MUST'         reduce using rule 30
	'NOT'          reduce using rule 30
	'ON'           reduce using rule 30
	'OR'           reduce using rule 30
	'PRODUCT'      reduce using rule 30
	'SHANT'        reduce using rule 30
	'SUBJECT'      reduce using rule 30
	'SUM'          reduce using rule 30
	'True'         reduce using rule 30
	'WHO'          reduce using rule 30
	L_doubl        reduce using rule 30
	L_integ        reduce using rule 30
	L_Text         reduce using rule 30
	%eof           reduce using rule 30


State 21

	RelationalPredicate -> ListMTExpr .                 (rule 25)
	RelationalPredicate -> ListMTExpr . RPRel BoolStruct    (rule 26)

	')'            reduce using rule 25
	','            reduce using rule 25
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	'>='           shift, and enter state 51
	'ABOUT'        shift, and enter state 52
	'AFTER'        shift, and enter state 53
	'AND'          shift, and enter state 54
	'BEFORE'       shift, and enter state 55
	'BY'           shift, and enter state 56
	'DIVIDE'       shift, and enter state 57
	'EQUALS'       shift, and enter state 58
	'HAS'          shift, and enter state 59
	'IF'           reduce using rule 25
	'IN'           shift, and enter state 60
	'IS'           shift, and enter state 61
	'MAP'          shift, and enter state 62
	'MAX'          shift, and enter state 63
	'MAY'          reduce using rule 25
	'MEANS'        reduce using rule 25
	'MIN'          shift, and enter state 64
	'MINUS'        shift, and enter state 65
	'MODULO'       shift, and enter state 66
	'MUST'         reduce using rule 25
	'NOT'          shift, and enter state 67
	'ON'           shift, and enter state 68
	'OR'           shift, and enter state 69
	'PRODUCT'      shift, and enter state 70
	'SHANT'        reduce using rule 25
	'SUBJECT'      shift, and enter state 71
	'SUM'          shift, and enter state 72
	'WHO'          reduce using rule 25
	%eof           reduce using rule 25

	RPRel          goto state 46
	TComparison    goto state 47

State 22

	Rule -> 'EVERY' BoolStruct . Deontic BoolStruct     (rule 6)
	Rule -> 'EVERY' BoolStruct . Who Deontic BoolStruct    (rule 7)
	Rule -> 'EVERY' BoolStruct . Who InlineHornlike Deontic BoolStruct    (rule 8)

	'MAY'          shift, and enter state 42
	'MUST'         shift, and enter state 43
	'SHANT'        shift, and enter state 44
	'WHO'          shift, and enter state 45

	Deontic        goto state 40
	Who            goto state 41

State 23

	BoolStruct -> 'ALL' . '(' ListBoolStruct ')'        (rule 38)

	'('            shift, and enter state 39


State 24

	BoolStruct -> 'ANY' . '(' ListBoolStruct ')'        (rule 35)

	'('            shift, and enter state 38


State 25

	Bool -> 'False' .                                   (rule 32)

	')'            reduce using rule 32
	','            reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'ABOUT'        reduce using rule 32
	'AFTER'        reduce using rule 32
	'AND'          reduce using rule 32
	'BEFORE'       reduce using rule 32
	'BY'           reduce using rule 32
	'DIVIDE'       reduce using rule 32
	'EQUALS'       reduce using rule 32
	'False'        reduce using rule 32
	'HAS'          reduce using rule 32
	'IF'           reduce using rule 32
	'IN'           reduce using rule 32
	'IS'           reduce using rule 32
	'MAP'          reduce using rule 32
	'MAX'          reduce using rule 32
	'MAY'          reduce using rule 32
	'MEANS'        reduce using rule 32
	'MIN'          reduce using rule 32
	'MINUS'        reduce using rule 32
	'MODULO'       reduce using rule 32
	'MUST'         reduce using rule 32
	'NOT'          reduce using rule 32
	'ON'           reduce using rule 32
	'OR'           reduce using rule 32
	'PRODUCT'      reduce using rule 32
	'SHANT'        reduce using rule 32
	'SUBJECT'      reduce using rule 32
	'SUM'          reduce using rule 32
	'True'         reduce using rule 32
	'WHO'          reduce using rule 32
	L_doubl        reduce using rule 32
	L_integ        reduce using rule 32
	L_Text         reduce using rule 32
	%eof           reduce using rule 32


State 26

	BoolStruct -> 'NOT' . BoolStruct                    (rule 41)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 37

State 27

	Bool -> 'True' .                                    (rule 31)

	')'            reduce using rule 31
	','            reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	'ABOUT'        reduce using rule 31
	'AFTER'        reduce using rule 31
	'AND'          reduce using rule 31
	'BEFORE'       reduce using rule 31
	'BY'           reduce using rule 31
	'DIVIDE'       reduce using rule 31
	'EQUALS'       reduce using rule 31
	'False'        reduce using rule 31
	'HAS'          reduce using rule 31
	'IF'           reduce using rule 31
	'IN'           reduce using rule 31
	'IS'           reduce using rule 31
	'MAP'          reduce using rule 31
	'MAX'          reduce using rule 31
	'MAY'          reduce using rule 31
	'MEANS'        reduce using rule 31
	'MIN'          reduce using rule 31
	'MINUS'        reduce using rule 31
	'MODULO'       reduce using rule 31
	'MUST'         reduce using rule 31
	'NOT'          reduce using rule 31
	'ON'           reduce using rule 31
	'OR'           reduce using rule 31
	'PRODUCT'      reduce using rule 31
	'SHANT'        reduce using rule 31
	'SUBJECT'      reduce using rule 31
	'SUM'          reduce using rule 31
	'True'         reduce using rule 31
	'WHO'          reduce using rule 31
	L_doubl        reduce using rule 31
	L_integ        reduce using rule 31
	L_Text         reduce using rule 31
	%eof           reduce using rule 31


State 28

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	','            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'ABOUT'        reduce using rule 2
	'AFTER'        reduce using rule 2
	'AND'          reduce using rule 2
	'BEFORE'       reduce using rule 2
	'BY'           reduce using rule 2
	'DIVIDE'       reduce using rule 2
	'EQUALS'       reduce using rule 2
	'False'        reduce using rule 2
	'HAS'          reduce using rule 2
	'IF'           reduce using rule 2
	'IN'           reduce using rule 2
	'IS'           reduce using rule 2
	'MAP'          reduce using rule 2
	'MAX'          reduce using rule 2
	'MAY'          reduce using rule 2
	'MEANS'        reduce using rule 2
	'MIN'          reduce using rule 2
	'MINUS'        reduce using rule 2
	'MODULO'       reduce using rule 2
	'MUST'         reduce using rule 2
	'NOT'          reduce using rule 2
	'ON'           reduce using rule 2
	'OR'           reduce using rule 2
	'PRODUCT'      reduce using rule 2
	'SHANT'        reduce using rule 2
	'SUBJECT'      reduce using rule 2
	'SUM'          reduce using rule 2
	'True'         reduce using rule 2
	'WHO'          reduce using rule 2
	L_doubl        reduce using rule 2
	L_integ        reduce using rule 2
	L_Text         reduce using rule 2
	%eof           reduce using rule 2


State 29

	Rule -> 'DECLARE' IsA . Fields                      (rule 4)

	'HAS'          shift, and enter state 36
	%eof           reduce using rule 19

	Fields         goto state 35

State 30

	MTExpr -> Text .                                    (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	'ABOUT'        reduce using rule 27
	'AFTER'        reduce using rule 27
	'AND'          reduce using rule 27
	'BEFORE'       reduce using rule 27
	'BY'           reduce using rule 27
	'DIVIDE'       reduce using rule 27
	'EQUALS'       reduce using rule 27
	'False'        reduce using rule 27
	'HAS'          reduce using rule 27
	'IF'           reduce using rule 27
	'IN'           reduce using rule 27
	'IS'           reduce using rule 27
	'MAP'          reduce using rule 27
	'MAX'          reduce using rule 27
	'MAY'          reduce using rule 27
	'MEANS'        reduce using rule 27
	'MIN'          reduce using rule 27
	'MINUS'        reduce using rule 27
	'MODULO'       reduce using rule 27
	'MUST'         reduce using rule 27
	'NOT'          reduce using rule 27
	'ON'           reduce using rule 27
	'OR'           reduce using rule 27
	'PRODUCT'      reduce using rule 27
	'SHANT'        reduce using rule 27
	'SUBJECT'      reduce using rule 27
	'SUM'          reduce using rule 27
	'True'         reduce using rule 27
	'WHO'          reduce using rule 27
	L_doubl        reduce using rule 27
	L_integ        reduce using rule 27
	L_Text         reduce using rule 27
	%eof           reduce using rule 27


State 31

	Rule -> 'DECIDE' RelationalPredicate .              (rule 10)
	Rule -> 'DECIDE' RelationalPredicate . 'IF' BoolStruct    (rule 11)

	'IF'           shift, and enter state 34
	%eof           reduce using rule 10


State 32

	Rule -> Text 'MEANS' . BoolStruct                   (rule 9)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 33

State 33

	Rule -> Text 'MEANS' BoolStruct .                   (rule 9)

	%eof           reduce using rule 9


State 34

	Rule -> 'DECIDE' RelationalPredicate 'IF' . BoolStruct    (rule 11)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 97

State 35

	Rule -> 'DECLARE' IsA Fields .                      (rule 4)

	%eof           reduce using rule 4


State 36

	Fields -> 'HAS' . ListIsA                           (rule 18)

	L_Text         shift, and enter state 10

	Text           goto state 11
	IsA            goto state 13
	ListIsA        goto state 96

State 37

	BoolStruct -> 'NOT' BoolStruct .                    (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'IF'           reduce using rule 41
	'MAY'          reduce using rule 41
	'MEANS'        reduce using rule 41
	'MUST'         reduce using rule 41
	'SHANT'        reduce using rule 41
	'WHO'          reduce using rule 41
	%eof           reduce using rule 41


State 38

	BoolStruct -> 'ANY' '(' . ListBoolStruct ')'        (rule 35)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 93
	ListBoolStruct goto state 95

State 39

	BoolStruct -> 'ALL' '(' . ListBoolStruct ')'        (rule 38)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 93
	ListBoolStruct goto state 94

State 40

	Rule -> 'EVERY' BoolStruct Deontic . BoolStruct     (rule 6)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 92

State 41

	Rule -> 'EVERY' BoolStruct Who . Deontic BoolStruct    (rule 7)
	Rule -> 'EVERY' BoolStruct Who . InlineHornlike Deontic BoolStruct    (rule 8)

	'MAY'          shift, and enter state 42
	'MEANS'        shift, and enter state 91
	'MUST'         shift, and enter state 43
	'SHANT'        shift, and enter state 44

	Deontic        goto state 89
	InlineHornlike goto state 90

State 42

	Deontic -> 'MAY' .                                  (rule 21)

	'ALL'          reduce using rule 21
	'ANY'          reduce using rule 21
	'False'        reduce using rule 21
	'NOT'          reduce using rule 21
	'True'         reduce using rule 21
	L_doubl        reduce using rule 21
	L_integ        reduce using rule 21
	L_Text         reduce using rule 21


State 43

	Deontic -> 'MUST' .                                 (rule 20)

	'ALL'          reduce using rule 20
	'ANY'          reduce using rule 20
	'False'        reduce using rule 20
	'NOT'          reduce using rule 20
	'True'         reduce using rule 20
	L_doubl        reduce using rule 20
	L_integ        reduce using rule 20
	L_Text         reduce using rule 20


State 44

	Deontic -> 'SHANT' .                                (rule 22)

	'ALL'          reduce using rule 22
	'ANY'          reduce using rule 22
	'False'        reduce using rule 22
	'NOT'          reduce using rule 22
	'True'         reduce using rule 22
	L_doubl        reduce using rule 22
	L_integ        reduce using rule 22
	L_Text         reduce using rule 22


State 45

	Who -> 'WHO' . BoolStruct                           (rule 23)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 88

State 46

	RelationalPredicate -> ListMTExpr RPRel . BoolStruct    (rule 26)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 87

State 47

	RPRel -> TComparison .                              (rule 66)

	'ALL'          reduce using rule 66
	'ANY'          reduce using rule 66
	'False'        reduce using rule 66
	'NOT'          reduce using rule 66
	'True'         reduce using rule 66
	L_doubl        reduce using rule 66
	L_integ        reduce using rule 66
	L_Text         reduce using rule 66


State 48

	RPRel -> '<' .                                      (rule 48)

	'ALL'          reduce using rule 48
	'ANY'          reduce using rule 48
	'False'        reduce using rule 48
	'NOT'          reduce using rule 48
	'True'         reduce using rule 48
	L_doubl        reduce using rule 48
	L_integ        reduce using rule 48
	L_Text         reduce using rule 48


State 49

	RPRel -> '<=' .                                     (rule 49)

	'ALL'          reduce using rule 49
	'ANY'          reduce using rule 49
	'False'        reduce using rule 49
	'NOT'          reduce using rule 49
	'True'         reduce using rule 49
	L_doubl        reduce using rule 49
	L_integ        reduce using rule 49
	L_Text         reduce using rule 49


State 50

	RPRel -> '>' .                                      (rule 50)

	'ALL'          reduce using rule 50
	'ANY'          reduce using rule 50
	'False'        reduce using rule 50
	'NOT'          reduce using rule 50
	'True'         reduce using rule 50
	L_doubl        reduce using rule 50
	L_integ        reduce using rule 50
	L_Text         reduce using rule 50


State 51

	RPRel -> '>=' .                                     (rule 51)

	'ALL'          reduce using rule 51
	'ANY'          reduce using rule 51
	'False'        reduce using rule 51
	'NOT'          reduce using rule 51
	'True'         reduce using rule 51
	L_doubl        reduce using rule 51
	L_integ        reduce using rule 51
	L_Text         reduce using rule 51


State 52

	TComparison -> 'ABOUT' .                            (rule 71)

	'ALL'          reduce using rule 71
	'ANY'          reduce using rule 71
	'False'        reduce using rule 71
	'NOT'          reduce using rule 71
	'True'         reduce using rule 71
	L_doubl        reduce using rule 71
	L_integ        reduce using rule 71
	L_Text         reduce using rule 71


State 53

	TComparison -> 'AFTER' .                            (rule 68)

	'ALL'          reduce using rule 68
	'ANY'          reduce using rule 68
	'False'        reduce using rule 68
	'NOT'          reduce using rule 68
	'True'         reduce using rule 68
	L_doubl        reduce using rule 68
	L_integ        reduce using rule 68
	L_Text         reduce using rule 68


State 54

	RPRel -> 'AND' .                                    (rule 55)

	'ALL'          reduce using rule 55
	'ANY'          reduce using rule 55
	'False'        reduce using rule 55
	'NOT'          reduce using rule 55
	'True'         reduce using rule 55
	L_doubl        reduce using rule 55
	L_integ        reduce using rule 55
	L_Text         reduce using rule 55


State 55

	TComparison -> 'BEFORE' .                           (rule 67)

	'ALL'          reduce using rule 67
	'ANY'          reduce using rule 67
	'False'        reduce using rule 67
	'NOT'          reduce using rule 67
	'True'         reduce using rule 67
	L_doubl        reduce using rule 67
	L_integ        reduce using rule 67
	L_Text         reduce using rule 67


State 56

	TComparison -> 'BY' .                               (rule 69)

	'ALL'          reduce using rule 69
	'ANY'          reduce using rule 69
	'False'        reduce using rule 69
	'NOT'          reduce using rule 69
	'True'         reduce using rule 69
	L_doubl        reduce using rule 69
	L_integ        reduce using rule 69
	L_Text         reduce using rule 69


State 57

	RPRel -> 'DIVIDE' .                                 (rule 60)

	'ALL'          reduce using rule 60
	'ANY'          reduce using rule 60
	'False'        reduce using rule 60
	'NOT'          reduce using rule 60
	'True'         reduce using rule 60
	L_doubl        reduce using rule 60
	L_integ        reduce using rule 60
	L_Text         reduce using rule 60


State 58

	RPRel -> 'EQUALS' .                                 (rule 47)

	'ALL'          reduce using rule 47
	'ANY'          reduce using rule 47
	'False'        reduce using rule 47
	'NOT'          reduce using rule 47
	'True'         reduce using rule 47
	L_doubl        reduce using rule 47
	L_integ        reduce using rule 47
	L_Text         reduce using rule 47


State 59

	RPRel -> 'HAS' .                                    (rule 46)

	'ALL'          reduce using rule 46
	'ANY'          reduce using rule 46
	'False'        reduce using rule 46
	'NOT'          reduce using rule 46
	'True'         reduce using rule 46
	L_doubl        reduce using rule 46
	L_integ        reduce using rule 46
	L_Text         reduce using rule 46


State 60

	RPRel -> 'IN' .                                     (rule 52)

	'ALL'          reduce using rule 52
	'ANY'          reduce using rule 52
	'False'        reduce using rule 52
	'NOT'          reduce using rule 52
	'True'         reduce using rule 52
	L_doubl        reduce using rule 52
	L_integ        reduce using rule 52
	L_Text         reduce using rule 52


State 61

	RPRel -> 'IS' .                                     (rule 45)

	'ALL'          reduce using rule 45
	'ANY'          reduce using rule 45
	'False'        reduce using rule 45
	'NOT'          reduce using rule 45
	'True'         reduce using rule 45
	L_doubl        reduce using rule 45
	L_integ        reduce using rule 45
	L_Text         reduce using rule 45


State 62

	RPRel -> 'MAP' .                                    (rule 65)

	'ALL'          reduce using rule 65
	'ANY'          reduce using rule 65
	'False'        reduce using rule 65
	'NOT'          reduce using rule 65
	'True'         reduce using rule 65
	L_doubl        reduce using rule 65
	L_integ        reduce using rule 65
	L_Text         reduce using rule 65


State 63

	RPRel -> 'MAX' .                                    (rule 64)

	'ALL'          reduce using rule 64
	'ANY'          reduce using rule 64
	'False'        reduce using rule 64
	'NOT'          reduce using rule 64
	'True'         reduce using rule 64
	L_doubl        reduce using rule 64
	L_integ        reduce using rule 64
	L_Text         reduce using rule 64


State 64

	RPRel -> 'MIN' .                                    (rule 63)

	'ALL'          reduce using rule 63
	'ANY'          reduce using rule 63
	'False'        reduce using rule 63
	'NOT'          reduce using rule 63
	'True'         reduce using rule 63
	L_doubl        reduce using rule 63
	L_integ        reduce using rule 63
	L_Text         reduce using rule 63


State 65

	RPRel -> 'MINUS' .                                  (rule 59)

	'ALL'          reduce using rule 59
	'ANY'          reduce using rule 59
	'False'        reduce using rule 59
	'NOT'          reduce using rule 59
	'True'         reduce using rule 59
	L_doubl        reduce using rule 59
	L_integ        reduce using rule 59
	L_Text         reduce using rule 59


State 66

	RPRel -> 'MODULO' .                                 (rule 61)

	'ALL'          reduce using rule 61
	'ANY'          reduce using rule 61
	'False'        reduce using rule 61
	'NOT'          reduce using rule 61
	'True'         reduce using rule 61
	L_doubl        reduce using rule 61
	L_integ        reduce using rule 61
	L_Text         reduce using rule 61


State 67

	RPRel -> 'NOT' . 'IN'                               (rule 53)
	RPRel -> 'NOT' .                                    (rule 54)

	'ALL'          reduce using rule 54
	'ANY'          reduce using rule 54
	'False'        reduce using rule 54
	'IN'           shift, and enter state 86
	'NOT'          reduce using rule 54
	'True'         reduce using rule 54
	L_doubl        reduce using rule 54
	L_integ        reduce using rule 54
	L_Text         reduce using rule 54


State 68

	TComparison -> 'ON' .                               (rule 70)

	'ALL'          reduce using rule 70
	'ANY'          reduce using rule 70
	'False'        reduce using rule 70
	'NOT'          reduce using rule 70
	'True'         reduce using rule 70
	L_doubl        reduce using rule 70
	L_integ        reduce using rule 70
	L_Text         reduce using rule 70


State 69

	RPRel -> 'OR' .                                     (rule 56)

	'ALL'          reduce using rule 56
	'ANY'          reduce using rule 56
	'False'        reduce using rule 56
	'NOT'          reduce using rule 56
	'True'         reduce using rule 56
	L_doubl        reduce using rule 56
	L_integ        reduce using rule 56
	L_Text         reduce using rule 56


State 70

	RPRel -> 'PRODUCT' .                                (rule 58)

	'ALL'          reduce using rule 58
	'ANY'          reduce using rule 58
	'False'        reduce using rule 58
	'NOT'          reduce using rule 58
	'True'         reduce using rule 58
	L_doubl        reduce using rule 58
	L_integ        reduce using rule 58
	L_Text         reduce using rule 58


State 71

	RPRel -> 'SUBJECT' . 'TO'                           (rule 62)

	'TO'           shift, and enter state 85


State 72

	RPRel -> 'SUM' .                                    (rule 57)

	'ALL'          reduce using rule 57
	'ANY'          reduce using rule 57
	'False'        reduce using rule 57
	'NOT'          reduce using rule 57
	'True'         reduce using rule 57
	L_doubl        reduce using rule 57
	L_integ        reduce using rule 57
	L_Text         reduce using rule 57


State 73

	ListMTExpr -> MTExpr ListMTExpr .                   (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'ABOUT'        reduce using rule 34
	'AFTER'        reduce using rule 34
	'AND'          reduce using rule 34
	'BEFORE'       reduce using rule 34
	'BY'           reduce using rule 34
	'DIVIDE'       reduce using rule 34
	'EQUALS'       reduce using rule 34
	'HAS'          reduce using rule 34
	'IF'           reduce using rule 34
	'IN'           reduce using rule 34
	'IS'           reduce using rule 34
	'MAP'          reduce using rule 34
	'MAX'          reduce using rule 34
	'MAY'          reduce using rule 34
	'MEANS'        reduce using rule 34
	'MIN'          reduce using rule 34
	'MINUS'        reduce using rule 34
	'MODULO'       reduce using rule 34
	'MUST'         reduce using rule 34
	'NOT'          reduce using rule 34
	'ON'           reduce using rule 34
	'OR'           reduce using rule 34
	'PRODUCT'      reduce using rule 34
	'SHANT'        reduce using rule 34
	'SUBJECT'      reduce using rule 34
	'SUM'          reduce using rule 34
	'WHO'          reduce using rule 34
	%eof           reduce using rule 34


State 74

	BoolStruct -> Text 'ALL' . '(' ListBoolStruct ')'    (rule 39)
	BoolStruct -> Text 'ALL' . '(' ListBoolStruct ')' Text    (rule 40)

	'('            shift, and enter state 84


State 75

	BoolStruct -> Text 'ANY' . '(' ListBoolStruct ')' Text    (rule 36)
	BoolStruct -> Text 'ANY' . '(' ListBoolStruct ')'    (rule 37)

	'('            shift, and enter state 83


State 76

	Rule -> 'GIVEN' ListIsA Rule .                      (rule 5)

	%eof           reduce using rule 5


State 77

	ListIsA -> IsA ';' . ListIsA                        (rule 17)

	L_Text         shift, and enter state 10

	Text           goto state 11
	IsA            goto state 13
	ListIsA        goto state 82

State 78

	Rule -> 'GIVETH' IsA 'DECIDE' . RelationalPredicate    (rule 12)
	Rule -> 'GIVETH' IsA 'DECIDE' . RelationalPredicate 'IF' BoolStruct    (rule 13)

	'False'        shift, and enter state 25
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 30
	RelationalPredicategoto state 81
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21

State 79

	IsA -> Text 'IS' . 'A' Text                         (rule 14)

	'A'            shift, and enter state 80


State 80

	IsA -> Text 'IS' 'A' . Text                         (rule 14)

	L_Text         shift, and enter state 10

	Text           goto state 107

State 81

	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate .    (rule 12)
	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate . 'IF' BoolStruct    (rule 13)

	'IF'           shift, and enter state 106
	%eof           reduce using rule 12


State 82

	ListIsA -> IsA ';' ListIsA .                        (rule 17)

	'DECIDE'       reduce using rule 17
	'DECLARE'      reduce using rule 17
	'EVERY'        reduce using rule 17
	'GIVEN'        reduce using rule 17
	'GIVETH'       reduce using rule 17
	L_Text         reduce using rule 17
	%eof           reduce using rule 17


State 83

	BoolStruct -> Text 'ANY' '(' . ListBoolStruct ')' Text    (rule 36)
	BoolStruct -> Text 'ANY' '(' . ListBoolStruct ')'    (rule 37)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 93
	ListBoolStruct goto state 105

State 84

	BoolStruct -> Text 'ALL' '(' . ListBoolStruct ')'    (rule 39)
	BoolStruct -> Text 'ALL' '(' . ListBoolStruct ')' Text    (rule 40)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 93
	ListBoolStruct goto state 104

State 85

	RPRel -> 'SUBJECT' 'TO' .                           (rule 62)

	'ALL'          reduce using rule 62
	'ANY'          reduce using rule 62
	'False'        reduce using rule 62
	'NOT'          reduce using rule 62
	'True'         reduce using rule 62
	L_doubl        reduce using rule 62
	L_integ        reduce using rule 62
	L_Text         reduce using rule 62


State 86

	RPRel -> 'NOT' 'IN' .                               (rule 53)

	'ALL'          reduce using rule 53
	'ANY'          reduce using rule 53
	'False'        reduce using rule 53
	'NOT'          reduce using rule 53
	'True'         reduce using rule 53
	L_doubl        reduce using rule 53
	L_integ        reduce using rule 53
	L_Text         reduce using rule 53


State 87

	RelationalPredicate -> ListMTExpr RPRel BoolStruct .    (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26
	'IF'           reduce using rule 26
	'MAY'          reduce using rule 26
	'MEANS'        reduce using rule 26
	'MUST'         reduce using rule 26
	'SHANT'        reduce using rule 26
	'WHO'          reduce using rule 26
	%eof           reduce using rule 26


State 88

	Who -> 'WHO' BoolStruct .                           (rule 23)

	'MAY'          reduce using rule 23
	'MEANS'        reduce using rule 23
	'MUST'         reduce using rule 23
	'SHANT'        reduce using rule 23


State 89

	Rule -> 'EVERY' BoolStruct Who Deontic . BoolStruct    (rule 7)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 103

State 90

	Rule -> 'EVERY' BoolStruct Who InlineHornlike . Deontic BoolStruct    (rule 8)

	'MAY'          shift, and enter state 42
	'MUST'         shift, and enter state 43
	'SHANT'        shift, and enter state 44

	Deontic        goto state 102

State 91

	InlineHornlike -> 'MEANS' . BoolStruct              (rule 24)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 101

State 92

	Rule -> 'EVERY' BoolStruct Deontic BoolStruct .     (rule 6)

	%eof           reduce using rule 6


State 93

	ListBoolStruct -> BoolStruct .                      (rule 43)
	ListBoolStruct -> BoolStruct . ',' ListBoolStruct    (rule 44)

	')'            reduce using rule 43
	','            shift, and enter state 100


State 94

	BoolStruct -> 'ALL' '(' ListBoolStruct . ')'        (rule 38)

	')'            shift, and enter state 99


State 95

	BoolStruct -> 'ANY' '(' ListBoolStruct . ')'        (rule 35)

	')'            shift, and enter state 98


State 96

	Fields -> 'HAS' ListIsA .                           (rule 18)

	%eof           reduce using rule 18


State 97

	Rule -> 'DECIDE' RelationalPredicate 'IF' BoolStruct .    (rule 11)

	%eof           reduce using rule 11


State 98

	BoolStruct -> 'ANY' '(' ListBoolStruct ')' .        (rule 35)

	')'            reduce using rule 35
	','            reduce using rule 35
	'IF'           reduce using rule 35
	'MAY'          reduce using rule 35
	'MEANS'        reduce using rule 35
	'MUST'         reduce using rule 35
	'SHANT'        reduce using rule 35
	'WHO'          reduce using rule 35
	%eof           reduce using rule 35


State 99

	BoolStruct -> 'ALL' '(' ListBoolStruct ')' .        (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	'IF'           reduce using rule 38
	'MAY'          reduce using rule 38
	'MEANS'        reduce using rule 38
	'MUST'         reduce using rule 38
	'SHANT'        reduce using rule 38
	'WHO'          reduce using rule 38
	%eof           reduce using rule 38


State 100

	ListBoolStruct -> BoolStruct ',' . ListBoolStruct    (rule 44)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 93
	ListBoolStruct goto state 112

State 101

	InlineHornlike -> 'MEANS' BoolStruct .              (rule 24)

	'MAY'          reduce using rule 24
	'MUST'         reduce using rule 24
	'SHANT'        reduce using rule 24


State 102

	Rule -> 'EVERY' BoolStruct Who InlineHornlike Deontic . BoolStruct    (rule 8)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 111

State 103

	Rule -> 'EVERY' BoolStruct Who Deontic BoolStruct .    (rule 7)

	%eof           reduce using rule 7


State 104

	BoolStruct -> Text 'ALL' '(' ListBoolStruct . ')'    (rule 39)
	BoolStruct -> Text 'ALL' '(' ListBoolStruct . ')' Text    (rule 40)

	')'            shift, and enter state 110


State 105

	BoolStruct -> Text 'ANY' '(' ListBoolStruct . ')' Text    (rule 36)
	BoolStruct -> Text 'ANY' '(' ListBoolStruct . ')'    (rule 37)

	')'            shift, and enter state 109


State 106

	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate 'IF' . BoolStruct    (rule 13)

	'ALL'          shift, and enter state 23
	'ANY'          shift, and enter state 24
	'False'        shift, and enter state 25
	'NOT'          shift, and enter state 26
	'True'         shift, and enter state 27
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 28
	L_Text         shift, and enter state 10

	Double         goto state 15
	Integer        goto state 16
	Text           goto state 17
	RelationalPredicategoto state 18
	MTExpr         goto state 19
	Bool           goto state 20
	ListMTExpr     goto state 21
	BoolStruct     goto state 108

State 107

	IsA -> Text 'IS' 'A' Text .                         (rule 14)

	';'            reduce using rule 14
	'DECIDE'       reduce using rule 14
	'DECLARE'      reduce using rule 14
	'EVERY'        reduce using rule 14
	'GIVEN'        reduce using rule 14
	'GIVETH'       reduce using rule 14
	'HAS'          reduce using rule 14
	L_Text         reduce using rule 14
	%eof           reduce using rule 14


State 108

	Rule -> 'GIVETH' IsA 'DECIDE' RelationalPredicate 'IF' BoolStruct .    (rule 13)

	%eof           reduce using rule 13


State 109

	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')' . Text    (rule 36)
	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')' .    (rule 37)

	')'            reduce using rule 37
	','            reduce using rule 37
	'IF'           reduce using rule 37
	'MAY'          reduce using rule 37
	'MEANS'        reduce using rule 37
	'MUST'         reduce using rule 37
	'SHANT'        reduce using rule 37
	'WHO'          reduce using rule 37
	L_Text         shift, and enter state 10
	%eof           reduce using rule 37

	Text           goto state 114

State 110

	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')' .    (rule 39)
	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')' . Text    (rule 40)

	')'            reduce using rule 39
	','            reduce using rule 39
	'IF'           reduce using rule 39
	'MAY'          reduce using rule 39
	'MEANS'        reduce using rule 39
	'MUST'         reduce using rule 39
	'SHANT'        reduce using rule 39
	'WHO'          reduce using rule 39
	L_Text         shift, and enter state 10
	%eof           reduce using rule 39

	Text           goto state 113

State 111

	Rule -> 'EVERY' BoolStruct Who InlineHornlike Deontic BoolStruct .    (rule 8)

	%eof           reduce using rule 8


State 112

	ListBoolStruct -> BoolStruct ',' ListBoolStruct .    (rule 44)

	')'            reduce using rule 44


State 113

	BoolStruct -> Text 'ALL' '(' ListBoolStruct ')' Text .    (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	'IF'           reduce using rule 40
	'MAY'          reduce using rule 40
	'MEANS'        reduce using rule 40
	'MUST'         reduce using rule 40
	'SHANT'        reduce using rule 40
	'WHO'          reduce using rule 40
	%eof           reduce using rule 40


State 114

	BoolStruct -> Text 'ANY' '(' ListBoolStruct ')' Text .    (rule 36)

	')'            reduce using rule 36
	','            reduce using rule 36
	'IF'           reduce using rule 36
	'MAY'          reduce using rule 36
	'MEANS'        reduce using rule 36
	'MUST'         reduce using rule 36
	'SHANT'        reduce using rule 36
	'WHO'          reduce using rule 36
	%eof           reduce using rule 36


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 72
Number of terminals: 49
Number of non-terminals: 19
Number of states: 115
