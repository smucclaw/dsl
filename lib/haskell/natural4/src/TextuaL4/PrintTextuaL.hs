-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for TextuaL4.

module TextuaL4.PrintTextuaL where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified TextuaL4.AbsTextuaL

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print TextuaL4.AbsTextuaL.Token where
  prt _ (TextuaL4.AbsTextuaL.Token i) = doc $ showString i
instance Print TextuaL4.AbsTextuaL.Rule where
  prt i = \case
    TextuaL4.AbsTextuaL.TypeDecl isa fields -> prPrec i 0 (concatD [doc (showString "DECLARE"), prt 0 isa, prt 0 fields])
    TextuaL4.AbsTextuaL.Given isas rule -> prPrec i 0 (concatD [doc (showString "GIVEN"), prt 0 isas, prt 0 rule])
    TextuaL4.AbsTextuaL.RegSimple boolstruct1 deontic boolstruct2 -> prPrec i 0 (concatD [doc (showString "EVERY"), prt 0 boolstruct1, prt 0 deontic, prt 0 boolstruct2])
    TextuaL4.AbsTextuaL.RegWho boolstruct1 who deontic boolstruct2 -> prPrec i 0 (concatD [doc (showString "EVERY"), prt 0 boolstruct1, prt 0 who, prt 0 deontic, prt 0 boolstruct2])
    TextuaL4.AbsTextuaL.RegWhoInline boolstruct1 who inlinehornlike deontic boolstruct2 -> prPrec i 0 (concatD [doc (showString "EVERY"), prt 0 boolstruct1, prt 0 who, prt 0 inlinehornlike, prt 0 deontic, prt 0 boolstruct2])
    TextuaL4.AbsTextuaL.HornlikeMeans text boolstruct -> prPrec i 0 (concatD [prt 0 text, doc (showString "MEANS"), prt 0 boolstruct])
    TextuaL4.AbsTextuaL.HornlikeDecide relationalpredicate -> prPrec i 0 (concatD [doc (showString "DECIDE"), prt 0 relationalpredicate])
    TextuaL4.AbsTextuaL.HornlikeDecideIf relationalpredicate boolstruct -> prPrec i 0 (concatD [doc (showString "DECIDE"), prt 0 relationalpredicate, doc (showString "IF"), prt 0 boolstruct])
    TextuaL4.AbsTextuaL.HlikeGiveth isa relationalpredicate -> prPrec i 0 (concatD [doc (showString "GIVETH"), prt 0 isa, doc (showString "DECIDE"), prt 0 relationalpredicate])
    TextuaL4.AbsTextuaL.HlikeGivethIf isa relationalpredicate boolstruct -> prPrec i 0 (concatD [doc (showString "GIVETH"), prt 0 isa, doc (showString "DECIDE"), prt 0 relationalpredicate, doc (showString "IF"), prt 0 boolstruct])

instance Print TextuaL4.AbsTextuaL.IsA where
  prt i = \case
    TextuaL4.AbsTextuaL.IsAType text1 text2 -> prPrec i 0 (concatD [prt 0 text1, doc (showString "IS"), doc (showString "A"), prt 0 text2])
    TextuaL4.AbsTextuaL.IsAEnum text texts -> prPrec i 0 (concatD [prt 0 text, doc (showString "IS"), doc (showString "ONE"), doc (showString "OF"), prt 0 texts])
    TextuaL4.AbsTextuaL.IsAList text1 text2 -> prPrec i 0 (concatD [prt 0 text1, doc (showString "IS"), doc (showString "LIST"), doc (showString "OF"), prt 0 text2])
    TextuaL4.AbsTextuaL.IsASet text1 text2 -> prPrec i 0 (concatD [prt 0 text1, doc (showString "IS"), doc (showString "SET"), doc (showString "OF"), prt 0 text2])
    TextuaL4.AbsTextuaL.IsANoType text -> prPrec i 0 (concatD [prt 0 text])

instance Print [TextuaL4.AbsTextuaL.Text] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [TextuaL4.AbsTextuaL.IsA] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print TextuaL4.AbsTextuaL.Fields where
  prt i = \case
    TextuaL4.AbsTextuaL.Has isas -> prPrec i 0 (concatD [doc (showString "HAS"), prt 0 isas])
    TextuaL4.AbsTextuaL.EmptyFields -> prPrec i 0 (concatD [])

instance Print TextuaL4.AbsTextuaL.Deontic where
  prt i = \case
    TextuaL4.AbsTextuaL.Deontic_MUST -> prPrec i 0 (concatD [doc (showString "MUST")])
    TextuaL4.AbsTextuaL.Deontic_MAY -> prPrec i 0 (concatD [doc (showString "MAY")])
    TextuaL4.AbsTextuaL.Deontic_SHANT -> prPrec i 0 (concatD [doc (showString "SHANT")])

instance Print TextuaL4.AbsTextuaL.Who where
  prt i = \case
    TextuaL4.AbsTextuaL.WhoSimple boolstruct -> prPrec i 0 (concatD [doc (showString "WHO"), prt 0 boolstruct])

instance Print TextuaL4.AbsTextuaL.InlineHornlike where
  prt i = \case
    TextuaL4.AbsTextuaL.MeansInline boolstruct -> prPrec i 0 (concatD [doc (showString "MEANS"), prt 0 boolstruct])

instance Print TextuaL4.AbsTextuaL.RelationalPredicate where
  prt i = \case
    TextuaL4.AbsTextuaL.RPMT mtexprs -> prPrec i 0 (concatD [prt 0 mtexprs])
    TextuaL4.AbsTextuaL.RPBoolStructR mtexprs rprel boolstruct -> prPrec i 0 (concatD [prt 0 mtexprs, prt 0 rprel, prt 1 boolstruct])

instance Print TextuaL4.AbsTextuaL.MTExpr where
  prt i = \case
    TextuaL4.AbsTextuaL.MTT text -> prPrec i 0 (concatD [prt 0 text])
    TextuaL4.AbsTextuaL.MTI n -> prPrec i 0 (concatD [prt 0 n])
    TextuaL4.AbsTextuaL.MTF d -> prPrec i 0 (concatD [prt 0 d])
    TextuaL4.AbsTextuaL.MTB bool -> prPrec i 0 (concatD [prt 0 bool])

instance Print TextuaL4.AbsTextuaL.Bool where
  prt i = \case
    TextuaL4.AbsTextuaL.Bool_True -> prPrec i 0 (concatD [doc (showString "True")])
    TextuaL4.AbsTextuaL.Bool_False -> prPrec i 0 (concatD [doc (showString "False")])

instance Print TextuaL4.AbsTextuaL.Text where
  prt i = \case
    TextuaL4.AbsTextuaL.TextString str -> prPrec i 0 (concatD [printString str])
    TextuaL4.AbsTextuaL.TextToken token -> prPrec i 0 (concatD [prt 0 token])

instance Print [TextuaL4.AbsTextuaL.MTExpr] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x, doc (showString " ")]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print TextuaL4.AbsTextuaL.BoolStruct where
  prt i = \case
    TextuaL4.AbsTextuaL.Any boolstructs -> prPrec i 1 (concatD [doc (showString "ANY"), doc (showString "("), prt 0 boolstructs, doc (showString ")")])
    TextuaL4.AbsTextuaL.AnyPrePost text1 boolstructs text2 -> prPrec i 1 (concatD [prt 0 text1, doc (showString "ANY"), doc (showString "("), prt 0 boolstructs, doc (showString ")"), prt 0 text2])
    TextuaL4.AbsTextuaL.AnyPre text boolstructs -> prPrec i 1 (concatD [prt 0 text, doc (showString "ANY"), doc (showString "("), prt 0 boolstructs, doc (showString ")")])
    TextuaL4.AbsTextuaL.All boolstructs -> prPrec i 1 (concatD [doc (showString "ALL"), doc (showString "("), prt 0 boolstructs, doc (showString ")")])
    TextuaL4.AbsTextuaL.AllPre text boolstructs -> prPrec i 1 (concatD [prt 0 text, doc (showString "ALL"), doc (showString "("), prt 0 boolstructs, doc (showString ")")])
    TextuaL4.AbsTextuaL.AllPrePost text1 boolstructs text2 -> prPrec i 1 (concatD [prt 0 text1, doc (showString "ALL"), doc (showString "("), prt 0 boolstructs, doc (showString ")"), prt 0 text2])
    TextuaL4.AbsTextuaL.Not boolstruct -> prPrec i 1 (concatD [doc (showString "NOT"), prt 1 boolstruct])
    TextuaL4.AbsTextuaL.Unless boolstruct1 boolstruct2 -> prPrec i 0 (concatD [prt 1 boolstruct1, doc (showString "UNLESS"), prt 1 boolstruct2])
    TextuaL4.AbsTextuaL.Leaf relationalpredicate -> prPrec i 1 (concatD [prt 0 relationalpredicate])

instance Print [TextuaL4.AbsTextuaL.BoolStruct] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print TextuaL4.AbsTextuaL.RPRel where
  prt i = \case
    TextuaL4.AbsTextuaL.RPis -> prPrec i 0 (concatD [doc (showString "IS")])
    TextuaL4.AbsTextuaL.RPhas -> prPrec i 0 (concatD [doc (showString "HAS")])
    TextuaL4.AbsTextuaL.RPeq -> prPrec i 0 (concatD [doc (showString "EQUALS")])
    TextuaL4.AbsTextuaL.RPlt -> prPrec i 0 (concatD [doc (showString "<")])
    TextuaL4.AbsTextuaL.RPlte -> prPrec i 0 (concatD [doc (showString "<=")])
    TextuaL4.AbsTextuaL.RPgt -> prPrec i 0 (concatD [doc (showString ">")])
    TextuaL4.AbsTextuaL.RPgte -> prPrec i 0 (concatD [doc (showString ">=")])
    TextuaL4.AbsTextuaL.RPelem -> prPrec i 0 (concatD [doc (showString "IN")])
    TextuaL4.AbsTextuaL.RPnotElem -> prPrec i 0 (concatD [doc (showString "NOT"), doc (showString "IN")])
    TextuaL4.AbsTextuaL.RPnot -> prPrec i 0 (concatD [doc (showString "NOT")])
    TextuaL4.AbsTextuaL.RPand -> prPrec i 0 (concatD [doc (showString "AND")])
    TextuaL4.AbsTextuaL.RPor -> prPrec i 0 (concatD [doc (showString "OR")])
    TextuaL4.AbsTextuaL.RPsum -> prPrec i 0 (concatD [doc (showString "SUM")])
    TextuaL4.AbsTextuaL.RPproduct -> prPrec i 0 (concatD [doc (showString "PRODUCT")])
    TextuaL4.AbsTextuaL.RPminus -> prPrec i 0 (concatD [doc (showString "MINUS")])
    TextuaL4.AbsTextuaL.RPdivide -> prPrec i 0 (concatD [doc (showString "DIVIDE")])
    TextuaL4.AbsTextuaL.RPmodulo -> prPrec i 0 (concatD [doc (showString "MODULO")])
    TextuaL4.AbsTextuaL.RPsubjectTo -> prPrec i 0 (concatD [doc (showString "SUBJECT"), doc (showString "TO")])
    TextuaL4.AbsTextuaL.RPmin -> prPrec i 0 (concatD [doc (showString "MIN")])
    TextuaL4.AbsTextuaL.RPmax -> prPrec i 0 (concatD [doc (showString "MAX")])
    TextuaL4.AbsTextuaL.RPmap -> prPrec i 0 (concatD [doc (showString "MAP")])
    TextuaL4.AbsTextuaL.RPTC tcomparison -> prPrec i 0 (concatD [prt 0 tcomparison])

instance Print TextuaL4.AbsTextuaL.TComparison where
  prt i = \case
    TextuaL4.AbsTextuaL.TBefore -> prPrec i 0 (concatD [doc (showString "BEFORE")])
    TextuaL4.AbsTextuaL.TAfter -> prPrec i 0 (concatD [doc (showString "AFTER")])
    TextuaL4.AbsTextuaL.TBy -> prPrec i 0 (concatD [doc (showString "BY")])
    TextuaL4.AbsTextuaL.TOn -> prPrec i 0 (concatD [doc (showString "ON")])
    TextuaL4.AbsTextuaL.TVague -> prPrec i 0 (concatD [doc (showString "ABOUT")])
