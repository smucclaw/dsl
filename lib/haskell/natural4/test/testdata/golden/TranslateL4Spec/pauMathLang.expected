(
    [ MathSet "How Much Money Do You Get"
        ( MathVar "PAU0" )
    ]
, MyState
    { symtabF = fromList
        [
            ( "Step 1"
            , MathITE
                ( Just "Step 1" )
                ( PredVar "there were past ADD payouts" )
                ( MathVar "claimable limited base ADD benefit" )
                ( MathVar "base ADD benefit" )
            )
        ,
            ( "claimable limited base ADD benefit"
            , MathBin
                ( Just "claimable limited base ADD benefit" ) Minus
                ( MathVar "claimable limit" )
                ( MathVar "policyHolder.past ADD payouts" )
            )
        ,
            ( "Step 3"
            , MathVar "multiplied by double triple benefit"
            )
        ,
            ( "juvenile limited"
            , MathMin
                ( Just "juvenile limited" )
                ( MathVar "Step 1" )
                ( MathVar "juvenile limit" )
            )
        ,
            ( "ADD benefit"
            , MathMin
                ( Just "ADD benefit" )
                ( MathBin Nothing Plus
                    ( MathVar "addBenefit" )
                    ( MathVar "otherBenefits" )
                )
                ( MathVar "risk cap" )
            )
        ,
            ( "addBenefit"
            , MathVar "PAU4"
            )
        ,
            ( "The Answer"
            , MathITE
                ( Just "The Answer" )
                ( PredVar "user input.accident_claim.selected" )
                ( MathVar "accident branch" )
                ( MathVar "illness branch" )
            )
        ,
            ( "accident branch"
            , MathITE
                ( Just "accident branch" )
                ( PredVar "ADD is disqualified entirely" )
                ( MathVar "excludedZero" )
                ( MathVar "ADD benefit" )
            )
        ,
            ( "claimable limit"
            , MathMin
                ( Just "claimable limit" )
                ( MathBin Nothing Times
                    ( Val Nothing 1.5 )
                    ( MathVar "total sum assured" )
                )
                ( MathVar "lifetime claimable limit" )
            )
        ,
            ( "illness"
            , MathITE
                ( Just "illness" )
                ( PredFold Nothing PLOr
                    [ PredVar "illness.general exclusions apply"
                    , PredVar "policy.ended"
                    ]
                )
                ( MathVar "disqualified" )
                ( Undefined
                    ( Just "No otherwise case" )
                )
            )
        ,
            ( "policyHolder.age"
            , Val
                ( Just "policyHolder.age" ) 50.0
            )
        ,
            ( "PAU4"
            , MathVar "Step 1"
            )
        ,
            ( "Step 2"
            , MathITE
                ( Just "Step 2" )
                ( PredVar "accident.juvenile limit applies" )
                ( MathVar "juvenile limited" )
                ( MathVar "Step 1" )
            )
        ,
            ( "multiplied by double triple benefit"
            , MathITE
                ( Just "multiplied by double triple benefit" )
                ( PredVar "accident.triple benefits apply" )
                ( MathBin
                    ( Just "multiplied by double triple benefit" ) Times
                    ( MathVar "Step 2" )
                    ( Val Nothing 3.0 )
                )
                ( MathITE Nothing
                    ( PredVar "accident.double benefits apply" )
                    ( MathBin
                        ( Just "multiplied by double triple benefit" ) Times
                        ( MathVar "Step 2" )
                        ( Val Nothing 2.0 )
                    )
                    ( MathVar "Step 2" )
                )
            )
        ,
            ( "PAU0"
            , MathVar "The Answer"
            )
        ,
            ( "Step 4"
            , MathVar "Step 3 discounted by accident.risk percentage"
            )
        ,
            ( "base ADD benefit"
            , MathVar "policy.benADD"
            )
        ,
            ( "Step 3 discounted by accident.risk percentage"
            , MathBin
                ( Just "Step 3 discounted by accident.risk percentage" ) Times
                ( MathVar "Step 3" )
                ( MathBin Nothing Minus
                    ( Val Nothing 1.0 )
                    ( MathVar "accident.risk percentage" )
                )
            )
        ,
            ( "otherBenefits"
            , Val
                ( Just "otherBenefits" ) 50.0
            )
        ,
            ( "excludedZero"
            , Val
                ( Just "excludedZero" ) 0.0
            )
        ,
            ( "lifetime claimable limit"
            , Val
                ( Just "lifetime claimable limit" ) 4500000.0
            )
        ,
            ( "juvenile limit"
            , Val
                ( Just "juvenile limit" ) 500000.0
            )
        ,
            ( "Top-Level"
            , MathSet "How Much Money Do You Get"
                ( MathVar "PAU0" )
            )
        ,
            ( "illness branch"
            , MathITE
                ( Just "illness branch" )
                ( PredVar "illness.disqualified" )
                ( MathVar "excludedZero" )
                ( MathVar "policy.benMR" )
            )
        ]
    , symtabP = fromList
        [
            ( "ADD is disqualified entirely"
            , PredFold
                ( Just "ADD is disqualified entirely" ) PLOr
                [ PredComp Nothing CGTE
                    ( MathVar "policyHolder.age" )
                    ( Val Nothing 75.0 )
                , PredVar "accident.general exclusions apply"
                , PredVar "policy.ended"
                ]
            )
        ,
            ( "there were past ADD payouts"
            , PredComp
                ( Just "there were past ADD payouts" ) CGT
                ( MathVar "policyHolder.past ADD payouts" )
                ( Val Nothing 0.0 )
            )
        ]
    , symtabL = fromList []
    , symtabS = fromList []
    }
)